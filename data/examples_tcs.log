07/10/2023 10:25:02 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/10/2023 10:25:02 AM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
07/10/2023 10:25:02 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/10/2023 10:25:02 AM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
07/10/2023 10:25:02 AM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/10/2023 10:25:02 AM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
07/10/2023 10:25:02 AM INFO Trap states were added.
07/10/2023 10:25:02 AM INFO Trap states were added.
07/10/2023 10:25:02 AM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
07/10/2023 10:25:02 AM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
07/10/2023 10:25:02 AM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/10/2023 10:25:02 AM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
07/10/2023 10:25:02 AM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
07/10/2023 10:25:02 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/10/2023 10:25:02 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
07/10/2023 10:25:02 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/10/2023 10:25:02 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
07/10/2023 10:25:02 AM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/10/2023 10:25:02 AM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
07/10/2023 10:25:02 AM INFO No trap states were added.
07/10/2023 10:25:02 AM INFO No trap states were added.
07/10/2023 10:25:02 AM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
07/10/2023 10:25:02 AM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
07/10/2023 10:25:02 AM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
07/10/2023 10:25:02 AM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
07/10/2023 10:25:02 AM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
07/10/2023 10:25:02 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
07/10/2023 10:25:02 AM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/10/2023 10:25:02 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
07/10/2023 10:25:02 AM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
07/10/2023 10:25:02 AM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
07/10/2023 10:25:02 AM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
07/10/2023 10:25:02 AM DEBUG [spec] No of nodes: 40
07/10/2023 10:25:02 AM DEBUG [spec] No of edges: 72
07/10/2023 10:25:02 AM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
07/10/2023 10:25:02 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
07/10/2023 10:25:02 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

07/10/2023 10:25:02 AM DEBUG [spec] No of nodes: 11
07/10/2023 10:25:02 AM DEBUG [spec] No of edges: 24
07/10/2023 10:25:02 AM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
07/10/2023 10:25:02 AM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
07/10/2023 10:25:02 AM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
07/10/2023 10:25:02 AM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
07/10/2023 10:25:02 AM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
07/10/2023 10:25:02 AM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
07/10/2023 10:25:02 AM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
07/10/2023 10:25:02 AM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
07/10/2023 10:25:02 AM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
07/10/2023 10:25:02 AM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
07/10/2023 10:25:02 AM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
07/10/2023 10:25:02 AM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
07/10/2023 10:25:02 AM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
07/10/2023 10:25:02 AM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
07/10/2023 10:25:02 AM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
07/10/2023 10:25:02 AM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
07/10/2023 10:25:02 AM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
07/10/2023 10:25:02 AM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
07/10/2023 10:25:02 AM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
07/10/2023 10:25:02 AM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
07/10/2023 10:25:02 AM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
07/10/2023 10:25:02 AM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
07/10/2023 10:25:02 AM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
07/10/2023 10:25:02 AM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
07/10/2023 10:25:02 AM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
07/10/2023 10:25:03 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'C:\\Users\\eb7z3\\PycharmProjects\\pythonProject\\venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000
07/10/2023 10:25:04 AM DEBUG 
End of translate


07/10/2023 10:25:04 AM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
07/10/2023 10:25:04 AM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
07/10/2023 10:25:04 AM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
07/10/2023 10:25:04 AM DEBUG 

Start policy computation

07/14/2023 04:34:03 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/14/2023 04:34:03 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
07/14/2023 04:34:03 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/14/2023 04:34:03 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
07/14/2023 04:34:03 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/14/2023 04:34:03 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
07/14/2023 04:34:03 PM INFO Trap states were added.
07/14/2023 04:34:03 PM INFO Trap states were added.
07/14/2023 04:34:03 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
07/14/2023 04:34:03 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
07/14/2023 04:34:03 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/14/2023 04:34:03 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
07/14/2023 04:34:03 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
07/14/2023 04:34:03 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/14/2023 04:34:03 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
07/14/2023 04:34:03 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/14/2023 04:34:03 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
07/14/2023 04:34:03 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/14/2023 04:34:03 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
07/14/2023 04:34:03 PM INFO No trap states were added.
07/14/2023 04:34:03 PM INFO No trap states were added.
07/14/2023 04:34:03 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
07/14/2023 04:34:03 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
07/14/2023 04:34:03 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
07/14/2023 04:34:03 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
07/14/2023 04:34:03 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
07/14/2023 04:34:03 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
07/14/2023 04:34:03 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
07/14/2023 04:34:03 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
07/14/2023 04:34:03 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
07/14/2023 04:34:03 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
07/14/2023 04:34:03 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
07/14/2023 04:34:03 PM DEBUG [spec] No of nodes: 40
07/14/2023 04:34:03 PM DEBUG [spec] No of edges: 72
07/14/2023 04:34:03 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
07/14/2023 04:34:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
07/14/2023 04:34:03 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

07/14/2023 04:34:03 PM DEBUG [spec] No of nodes: 11
07/14/2023 04:34:03 PM DEBUG [spec] No of edges: 24
07/14/2023 04:34:03 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
07/14/2023 04:34:03 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
07/14/2023 04:34:03 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
07/14/2023 04:34:03 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
07/14/2023 04:34:03 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
07/14/2023 04:34:03 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
07/14/2023 04:34:03 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
07/14/2023 04:34:03 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
07/14/2023 04:34:03 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
07/14/2023 04:34:03 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
07/14/2023 04:34:03 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
07/14/2023 04:34:03 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
07/14/2023 04:34:03 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
07/14/2023 04:34:03 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
07/14/2023 04:34:03 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
07/14/2023 04:34:03 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
07/14/2023 04:34:03 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
07/14/2023 04:34:03 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
07/14/2023 04:34:03 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
07/14/2023 04:34:03 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
07/14/2023 04:34:03 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
07/14/2023 04:34:03 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
07/14/2023 04:34:03 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
07/14/2023 04:34:03 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
07/14/2023 04:34:03 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
07/14/2023 04:34:04 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'C:\\Users\\eb7z3\\PycharmProjects\\pythonProject\\venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000
08/02/2023 05:30:32 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/02/2023 05:30:32 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/02/2023 05:30:32 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/02/2023 05:30:32 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/02/2023 05:30:32 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/02/2023 05:30:32 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
08/02/2023 05:30:32 PM INFO Trap states were added.
08/02/2023 05:30:32 PM INFO Trap states were added.
08/02/2023 05:30:32 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
08/02/2023 05:30:32 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
08/02/2023 05:30:32 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/02/2023 05:30:32 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
08/02/2023 05:30:32 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
08/02/2023 05:30:32 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/02/2023 05:30:32 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/02/2023 05:30:32 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/02/2023 05:30:32 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/02/2023 05:30:32 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/02/2023 05:30:32 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
08/02/2023 05:30:32 PM INFO No trap states were added.
08/02/2023 05:30:32 PM INFO No trap states were added.
08/02/2023 05:30:32 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
08/02/2023 05:30:32 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
08/02/2023 05:30:32 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
08/02/2023 05:30:32 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
08/02/2023 05:30:32 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
08/02/2023 05:30:32 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
08/02/2023 05:30:32 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/02/2023 05:30:32 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
08/02/2023 05:30:32 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
08/02/2023 05:30:32 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
08/02/2023 05:30:32 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
08/02/2023 05:30:33 PM DEBUG [spec] No of nodes: 40
08/02/2023 05:30:33 PM DEBUG [spec] No of edges: 72
08/02/2023 05:30:33 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
08/02/2023 05:30:33 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
08/02/2023 05:30:33 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

08/02/2023 05:30:33 PM DEBUG [spec] No of nodes: 11
08/02/2023 05:30:33 PM DEBUG [spec] No of edges: 24
08/02/2023 05:30:33 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
08/02/2023 05:30:33 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/02/2023 05:30:33 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/02/2023 05:30:33 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/02/2023 05:30:33 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/02/2023 05:30:33 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/02/2023 05:30:33 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/02/2023 05:30:33 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
08/02/2023 05:30:33 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
08/02/2023 05:30:33 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
08/02/2023 05:30:33 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/02/2023 05:30:33 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
08/02/2023 05:30:33 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
08/02/2023 05:30:33 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
08/02/2023 05:30:33 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/02/2023 05:30:33 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
08/02/2023 05:30:33 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/02/2023 05:30:33 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
08/02/2023 05:30:33 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
08/02/2023 05:30:33 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/02/2023 05:30:33 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
08/02/2023 05:30:33 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/02/2023 05:30:33 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
08/02/2023 05:30:33 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
08/02/2023 05:30:33 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/02/2023 05:30:33 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'C:\\Users\\eb7z3\\PycharmProjects\\pythonProject\\venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000
08/02/2023 05:30:40 PM DEBUG 
End of translate


08/02/2023 05:30:40 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
08/02/2023 05:30:40 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
08/02/2023 05:30:40 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
08/02/2023 05:30:40 PM DEBUG 

Start policy computation

08/15/2023 11:47:27 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/15/2023 11:47:27 AM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/15/2023 11:47:27 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/15/2023 11:47:27 AM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/15/2023 11:47:27 AM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/15/2023 11:47:27 AM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
08/15/2023 11:47:27 AM INFO Trap states were added.
08/15/2023 11:47:27 AM INFO Trap states were added.
08/15/2023 11:47:27 AM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
08/15/2023 11:47:27 AM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
08/15/2023 11:47:27 AM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/15/2023 11:47:27 AM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
08/15/2023 11:47:27 AM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
08/15/2023 11:47:27 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/15/2023 11:47:27 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/15/2023 11:47:27 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/15/2023 11:47:27 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/15/2023 11:47:27 AM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/15/2023 11:47:27 AM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
08/15/2023 11:47:27 AM INFO No trap states were added.
08/15/2023 11:47:27 AM INFO No trap states were added.
08/15/2023 11:47:27 AM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
08/15/2023 11:47:27 AM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
08/15/2023 11:47:27 AM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
08/15/2023 11:47:27 AM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
08/15/2023 11:47:27 AM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
08/15/2023 11:47:27 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
08/15/2023 11:47:27 AM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/15/2023 11:47:27 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
08/15/2023 11:47:27 AM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
08/15/2023 11:47:27 AM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
08/15/2023 11:47:27 AM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
08/15/2023 11:47:28 AM DEBUG [spec] No of nodes: 40
08/15/2023 11:47:28 AM DEBUG [spec] No of edges: 72
08/15/2023 11:47:28 AM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
08/15/2023 11:47:28 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
08/15/2023 11:47:28 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

08/15/2023 11:47:28 AM DEBUG [spec] No of nodes: 11
08/15/2023 11:47:28 AM DEBUG [spec] No of edges: 24
08/15/2023 11:47:28 AM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
08/15/2023 11:47:28 AM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/15/2023 11:47:28 AM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/15/2023 11:47:28 AM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/15/2023 11:47:28 AM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/15/2023 11:47:28 AM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/15/2023 11:47:28 AM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/15/2023 11:47:28 AM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
08/15/2023 11:47:28 AM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
08/15/2023 11:47:28 AM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
08/15/2023 11:47:28 AM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/15/2023 11:47:28 AM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
08/15/2023 11:47:28 AM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
08/15/2023 11:47:28 AM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
08/15/2023 11:47:28 AM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/15/2023 11:47:28 AM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
08/15/2023 11:47:28 AM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/15/2023 11:47:28 AM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
08/15/2023 11:47:28 AM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
08/15/2023 11:47:28 AM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/15/2023 11:47:28 AM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
08/15/2023 11:47:28 AM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/15/2023 11:47:28 AM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
08/15/2023 11:47:28 AM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
08/15/2023 11:47:28 AM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/15/2023 11:47:30 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'C:\\Users\\eb7z3\\PycharmProjects\\pythonProject\\venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000
08/15/2023 11:47:34 AM DEBUG 
End of translate


08/15/2023 11:47:34 AM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
08/15/2023 11:47:34 AM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
08/15/2023 11:47:34 AM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
08/15/2023 11:47:34 AM DEBUG 

Start policy computation

08/16/2023 12:13:53 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:13:53 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/16/2023 12:13:53 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:13:53 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/16/2023 12:13:53 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:13:53 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
08/16/2023 12:13:53 PM INFO Trap states were added.
08/16/2023 12:13:53 PM INFO Trap states were added.
08/16/2023 12:13:53 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
08/16/2023 12:13:53 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
08/16/2023 12:13:53 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:13:53 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
08/16/2023 12:13:53 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
08/16/2023 12:13:53 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:13:53 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/16/2023 12:13:53 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:13:53 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/16/2023 12:13:53 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:13:53 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
08/16/2023 12:13:53 PM INFO No trap states were added.
08/16/2023 12:13:53 PM INFO No trap states were added.
08/16/2023 12:13:53 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
08/16/2023 12:13:53 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
08/16/2023 12:13:53 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
08/16/2023 12:13:53 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
08/16/2023 12:13:53 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
08/16/2023 12:13:53 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
08/16/2023 12:13:53 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:13:53 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
08/16/2023 12:13:53 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
08/16/2023 12:13:53 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
08/16/2023 12:13:53 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
08/16/2023 12:13:53 PM DEBUG [spec] No of nodes: 40
08/16/2023 12:13:53 PM DEBUG [spec] No of edges: 72
08/16/2023 12:13:53 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
08/16/2023 12:13:53 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
08/16/2023 12:13:53 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

08/16/2023 12:13:53 PM DEBUG [spec] No of nodes: 11
08/16/2023 12:13:53 PM DEBUG [spec] No of edges: 24
08/16/2023 12:14:25 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:14:25 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/16/2023 12:14:25 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:14:25 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/16/2023 12:14:25 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:14:25 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
08/16/2023 12:14:25 PM INFO Trap states were added.
08/16/2023 12:14:25 PM INFO Trap states were added.
08/16/2023 12:14:25 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
08/16/2023 12:14:25 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
08/16/2023 12:14:25 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:14:25 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
08/16/2023 12:14:25 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
08/16/2023 12:14:25 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:14:25 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/16/2023 12:14:25 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:14:25 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/16/2023 12:14:25 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:14:25 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
08/16/2023 12:14:25 PM INFO No trap states were added.
08/16/2023 12:14:25 PM INFO No trap states were added.
08/16/2023 12:14:25 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
08/16/2023 12:14:25 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
08/16/2023 12:14:25 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
08/16/2023 12:14:25 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
08/16/2023 12:14:25 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
08/16/2023 12:14:25 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
08/16/2023 12:14:25 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:14:25 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
08/16/2023 12:14:25 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
08/16/2023 12:14:25 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
08/16/2023 12:14:25 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
08/16/2023 12:14:25 PM DEBUG [spec] No of nodes: 40
08/16/2023 12:14:25 PM DEBUG [spec] No of edges: 72
08/16/2023 12:14:25 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
08/16/2023 12:14:25 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
08/16/2023 12:14:25 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

08/16/2023 12:14:25 PM DEBUG [spec] No of nodes: 11
08/16/2023 12:14:25 PM DEBUG [spec] No of edges: 24
08/16/2023 12:15:22 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:15:22 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/16/2023 12:15:22 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:15:22 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/16/2023 12:15:22 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:15:22 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
08/16/2023 12:15:22 PM INFO Trap states were added.
08/16/2023 12:15:22 PM INFO Trap states were added.
08/16/2023 12:15:22 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
08/16/2023 12:15:22 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
08/16/2023 12:15:22 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:15:22 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
08/16/2023 12:15:22 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
08/16/2023 12:15:22 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:15:22 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/16/2023 12:15:22 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:15:22 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/16/2023 12:15:22 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:15:22 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
08/16/2023 12:15:22 PM INFO No trap states were added.
08/16/2023 12:15:22 PM INFO No trap states were added.
08/16/2023 12:15:22 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
08/16/2023 12:15:22 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
08/16/2023 12:15:22 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
08/16/2023 12:15:22 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
08/16/2023 12:15:22 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
08/16/2023 12:15:22 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
08/16/2023 12:15:22 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 12:15:22 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
08/16/2023 12:15:22 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
08/16/2023 12:15:22 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
08/16/2023 12:15:22 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
08/16/2023 12:15:22 PM DEBUG [spec] No of nodes: 40
08/16/2023 12:15:22 PM DEBUG [spec] No of edges: 72
08/16/2023 12:15:22 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
08/16/2023 12:15:22 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
08/16/2023 12:15:22 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

08/16/2023 12:15:22 PM DEBUG [spec] No of nodes: 11
08/16/2023 12:15:22 PM DEBUG [spec] No of edges: 24
08/16/2023 12:15:22 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
08/16/2023 12:15:22 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/16/2023 12:15:22 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/16/2023 12:15:22 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/16/2023 12:15:22 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/16/2023 12:15:22 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/16/2023 12:15:22 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/16/2023 12:15:22 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
08/16/2023 12:15:22 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
08/16/2023 12:15:22 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
08/16/2023 12:15:22 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/16/2023 12:15:22 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
08/16/2023 12:15:22 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
08/16/2023 12:15:22 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
08/16/2023 12:15:22 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/16/2023 12:15:22 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
08/16/2023 12:15:22 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/16/2023 12:15:22 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
08/16/2023 12:15:22 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
08/16/2023 12:15:22 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/16/2023 12:15:22 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
08/16/2023 12:15:22 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/16/2023 12:15:22 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
08/16/2023 12:15:22 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
08/16/2023 12:15:22 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/16/2023 12:15:23 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'C:\\Users\\eb7z3\\PycharmProjects\\pythonProject\\venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000
08/16/2023 12:16:23 PM DEBUG 
End of translate


08/16/2023 12:16:23 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
08/16/2023 12:16:24 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
08/16/2023 12:16:24 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
08/16/2023 12:16:24 PM DEBUG 

Start policy computation

08/16/2023 08:08:09 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:08:09 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/16/2023 08:08:09 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:08:09 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/16/2023 08:08:09 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:08:09 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
08/16/2023 08:08:09 PM INFO Trap states were added.
08/16/2023 08:08:09 PM INFO Trap states were added.
08/16/2023 08:08:09 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
08/16/2023 08:08:09 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
08/16/2023 08:08:09 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:08:09 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
08/16/2023 08:08:09 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
08/16/2023 08:08:09 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:08:09 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/16/2023 08:08:09 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:08:09 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/16/2023 08:08:09 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:08:09 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
08/16/2023 08:08:09 PM INFO No trap states were added.
08/16/2023 08:08:09 PM INFO No trap states were added.
08/16/2023 08:08:09 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
08/16/2023 08:08:09 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
08/16/2023 08:08:09 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
08/16/2023 08:08:09 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
08/16/2023 08:08:09 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
08/16/2023 08:08:09 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
08/16/2023 08:08:09 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:08:09 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
08/16/2023 08:08:09 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
08/16/2023 08:08:09 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
08/16/2023 08:08:09 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
08/16/2023 08:08:09 PM DEBUG [spec] No of nodes: 40
08/16/2023 08:08:09 PM DEBUG [spec] No of edges: 72
08/16/2023 08:08:09 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
08/16/2023 08:08:09 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
08/16/2023 08:08:09 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

08/16/2023 08:08:09 PM DEBUG [spec] No of nodes: 11
08/16/2023 08:08:09 PM DEBUG [spec] No of edges: 24
08/16/2023 08:08:09 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
08/16/2023 08:08:09 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/16/2023 08:08:09 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/16/2023 08:08:09 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/16/2023 08:08:09 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/16/2023 08:08:09 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/16/2023 08:08:09 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/16/2023 08:08:09 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
08/16/2023 08:08:09 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
08/16/2023 08:08:09 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
08/16/2023 08:08:09 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/16/2023 08:08:09 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
08/16/2023 08:08:09 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
08/16/2023 08:08:09 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
08/16/2023 08:08:09 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/16/2023 08:08:09 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
08/16/2023 08:08:09 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/16/2023 08:08:09 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
08/16/2023 08:08:09 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
08/16/2023 08:08:09 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/16/2023 08:08:09 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
08/16/2023 08:08:09 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/16/2023 08:08:09 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
08/16/2023 08:08:09 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
08/16/2023 08:08:09 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/16/2023 08:08:10 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'C:\\Users\\eb7z3\\PycharmProjects\\pythonProject\\venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000
08/16/2023 08:08:12 PM DEBUG 
End of translate


08/16/2023 08:08:12 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
08/16/2023 08:08:12 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
08/16/2023 08:08:12 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
08/16/2023 08:08:12 PM DEBUG 

Start policy computation

08/16/2023 08:10:26 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:10:26 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/16/2023 08:10:26 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:10:26 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/16/2023 08:10:26 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:10:26 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
08/16/2023 08:10:26 PM INFO Trap states were added.
08/16/2023 08:10:26 PM INFO Trap states were added.
08/16/2023 08:10:26 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
08/16/2023 08:10:26 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
08/16/2023 08:10:26 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:10:26 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
08/16/2023 08:10:26 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
08/16/2023 08:10:26 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:10:26 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/16/2023 08:10:26 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:10:26 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/16/2023 08:10:26 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:10:26 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
08/16/2023 08:10:26 PM INFO No trap states were added.
08/16/2023 08:10:26 PM INFO No trap states were added.
08/16/2023 08:10:26 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
08/16/2023 08:10:26 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
08/16/2023 08:10:26 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
08/16/2023 08:10:26 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
08/16/2023 08:10:26 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
08/16/2023 08:10:26 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
08/16/2023 08:10:26 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
08/16/2023 08:10:26 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
08/16/2023 08:10:26 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
08/16/2023 08:10:26 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
08/16/2023 08:10:26 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
08/16/2023 08:10:26 PM DEBUG [spec] No of nodes: 40
08/16/2023 08:10:26 PM DEBUG [spec] No of edges: 72
08/16/2023 08:10:26 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
08/16/2023 08:10:26 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
08/16/2023 08:10:26 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

08/16/2023 08:10:26 PM DEBUG [spec] No of nodes: 11
08/16/2023 08:10:26 PM DEBUG [spec] No of edges: 24
08/16/2023 08:10:26 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
08/16/2023 08:10:26 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/16/2023 08:10:26 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/16/2023 08:10:26 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/16/2023 08:10:26 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/16/2023 08:10:26 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/16/2023 08:10:26 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/16/2023 08:10:26 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
08/16/2023 08:10:26 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
08/16/2023 08:10:26 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
08/16/2023 08:10:26 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/16/2023 08:10:26 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
08/16/2023 08:10:26 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
08/16/2023 08:10:26 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
08/16/2023 08:10:26 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/16/2023 08:10:26 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
08/16/2023 08:10:26 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/16/2023 08:10:26 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
08/16/2023 08:10:26 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
08/16/2023 08:10:26 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/16/2023 08:10:26 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
08/16/2023 08:10:26 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
08/16/2023 08:10:26 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
08/16/2023 08:10:26 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
08/16/2023 08:10:26 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/16/2023 08:10:26 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'C:\\Users\\eb7z3\\PycharmProjects\\pythonProject\\venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000
08/16/2023 08:10:28 PM DEBUG 
End of translate


08/16/2023 08:10:28 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
08/16/2023 08:10:28 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
08/16/2023 08:10:28 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
08/16/2023 08:10:28 PM DEBUG 

Start policy computation

08/16/2023 08:10:28 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
08/16/2023 08:10:28 PM INFO Constructing product automaton with normal DFA!
08/16/2023 08:15:37 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/16/2023 08:15:37 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/16/2023 08:15:37 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/16/2023 08:15:37 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/16/2023 08:15:37 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/16/2023 08:15:37 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/16/2023 08:15:37 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/16/2023 08:15:37 PM DEBUG [spec] No of nodes: 22
08/16/2023 08:15:37 PM DEBUG [spec] No of edges: 33
08/16/2023 08:16:23 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/16/2023 08:16:23 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/16/2023 08:16:23 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/16/2023 08:16:23 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/16/2023 08:16:23 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/16/2023 08:16:23 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/16/2023 08:16:23 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/16/2023 08:16:23 PM DEBUG [spec] No of nodes: 22
08/16/2023 08:16:23 PM DEBUG [spec] No of edges: 33
08/16/2023 08:16:42 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/16/2023 08:16:42 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/16/2023 08:16:42 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/16/2023 08:16:42 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/16/2023 08:16:42 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/16/2023 08:16:42 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/16/2023 08:16:42 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/16/2023 08:16:42 PM DEBUG [spec] No of nodes: 22
08/16/2023 08:16:42 PM DEBUG [spec] No of edges: 33
08/17/2023 12:47:53 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/17/2023 12:47:53 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/17/2023 12:47:53 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/17/2023 12:47:53 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/17/2023 12:47:53 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/17/2023 12:47:53 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/17/2023 12:47:53 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/17/2023 12:47:53 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/17/2023 12:47:53 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/17/2023 12:47:53 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/17/2023 12:47:53 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/17/2023 12:47:53 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/17/2023 12:47:53 PM DEBUG [spec] No of nodes: 22
08/17/2023 12:47:53 PM DEBUG [spec] No of edges: 33
08/17/2023 12:47:53 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/17/2023 12:47:53 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/17/2023 12:47:53 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/17/2023 12:47:53 PM DEBUG [spec] No of nodes: 6
08/17/2023 12:47:53 PM DEBUG [spec] No of edges: 10
08/17/2023 01:10:05 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/17/2023 01:10:05 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/17/2023 01:10:05 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/17/2023 01:10:05 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/17/2023 01:10:05 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/17/2023 01:10:05 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/17/2023 01:10:05 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/17/2023 01:10:05 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/17/2023 01:10:05 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/17/2023 01:10:05 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/17/2023 01:10:05 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/17/2023 01:10:05 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/17/2023 01:10:05 PM DEBUG [spec] No of nodes: 22
08/17/2023 01:10:05 PM DEBUG [spec] No of edges: 33
08/17/2023 01:10:05 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/17/2023 01:10:05 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/17/2023 01:10:05 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/17/2023 01:10:05 PM DEBUG [spec] No of nodes: 6
08/17/2023 01:10:05 PM DEBUG [spec] No of edges: 10
08/17/2023 01:10:24 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/17/2023 01:10:24 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/17/2023 01:10:24 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/17/2023 01:10:24 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/17/2023 01:10:24 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/17/2023 01:10:24 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/17/2023 01:10:24 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/17/2023 01:10:24 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/17/2023 01:10:24 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/17/2023 01:10:24 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/17/2023 01:10:24 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/17/2023 01:10:24 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/17/2023 01:10:24 PM DEBUG [spec] No of nodes: 22
08/17/2023 01:10:24 PM DEBUG [spec] No of edges: 33
08/17/2023 01:10:24 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/17/2023 01:10:24 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/17/2023 01:10:24 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/17/2023 01:10:24 PM DEBUG [spec] No of nodes: 6
08/17/2023 01:10:24 PM DEBUG [spec] No of edges: 10
08/17/2023 01:26:12 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/17/2023 01:26:12 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/17/2023 01:26:12 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/17/2023 01:26:12 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/17/2023 01:26:12 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/17/2023 01:26:12 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/17/2023 01:26:12 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/17/2023 01:26:12 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/17/2023 01:26:12 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/17/2023 01:26:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/17/2023 01:26:12 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/17/2023 01:26:12 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/17/2023 01:26:12 PM DEBUG [spec] No of nodes: 22
08/17/2023 01:26:12 PM DEBUG [spec] No of edges: 33
08/17/2023 01:26:12 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/17/2023 01:26:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/17/2023 01:26:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/17/2023 01:26:12 PM DEBUG [spec] No of nodes: 6
08/17/2023 01:26:12 PM DEBUG [spec] No of edges: 10
08/17/2023 01:29:16 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/17/2023 01:29:16 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/17/2023 01:29:16 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/17/2023 01:29:16 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/17/2023 01:29:16 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/17/2023 01:29:16 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/17/2023 01:29:16 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/17/2023 01:29:16 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/17/2023 01:29:16 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/17/2023 01:29:16 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/17/2023 01:29:16 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/17/2023 01:29:16 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/17/2023 01:29:16 PM DEBUG [spec] No of nodes: 22
08/17/2023 01:29:16 PM DEBUG [spec] No of edges: 33
08/17/2023 01:29:16 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/17/2023 01:29:16 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/17/2023 01:29:16 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/17/2023 01:29:16 PM DEBUG [spec] No of nodes: 6
08/17/2023 01:29:16 PM DEBUG [spec] No of edges: 10
08/17/2023 01:30:05 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/17/2023 01:30:05 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/17/2023 01:30:05 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/17/2023 01:30:05 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/17/2023 01:30:05 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/17/2023 01:30:05 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/17/2023 01:30:05 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/17/2023 01:30:05 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/17/2023 01:30:05 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/17/2023 01:30:05 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/17/2023 01:30:05 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/17/2023 01:30:05 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/17/2023 01:30:05 PM DEBUG [spec] No of nodes: 22
08/17/2023 01:30:05 PM DEBUG [spec] No of edges: 33
08/17/2023 01:30:05 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/17/2023 01:30:05 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/17/2023 01:30:05 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/17/2023 01:30:05 PM DEBUG [spec] No of nodes: 6
08/17/2023 01:30:05 PM DEBUG [spec] No of edges: 10
08/17/2023 02:05:17 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/17/2023 02:05:17 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/17/2023 02:05:17 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/17/2023 02:05:17 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/17/2023 02:05:17 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/17/2023 02:05:17 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/17/2023 02:05:17 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/17/2023 02:05:17 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/17/2023 02:05:17 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/17/2023 02:05:17 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/17/2023 02:05:17 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/17/2023 02:05:17 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/17/2023 02:05:17 PM DEBUG [spec] No of nodes: 22
08/17/2023 02:05:17 PM DEBUG [spec] No of edges: 33
08/17/2023 02:05:17 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/17/2023 02:05:17 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/17/2023 02:05:17 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/17/2023 02:05:17 PM DEBUG [spec] No of nodes: 6
08/17/2023 02:05:17 PM DEBUG [spec] No of edges: 10
08/21/2023 01:53:07 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 01:53:07 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 01:53:07 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 01:53:07 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 01:53:07 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/21/2023 01:53:07 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 01:53:07 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 01:53:07 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 01:53:07 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 01:53:07 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/21/2023 01:53:07 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 01:53:07 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 01:53:07 PM DEBUG [spec] No of nodes: 22
08/21/2023 01:53:07 PM DEBUG [spec] No of edges: 33
08/21/2023 01:53:07 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 01:53:07 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 01:53:07 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/21/2023 01:53:07 PM DEBUG [spec] No of nodes: 6
08/21/2023 01:53:07 PM DEBUG [spec] No of edges: 10
08/21/2023 01:53:07 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/21/2023 01:53:07 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/21/2023 01:53:07 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/21/2023 01:53:07 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/21/2023 01:53:07 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/21/2023 01:53:07 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/21/2023 01:53:07 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/21/2023 01:53:07 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}
08/21/2023 01:53:07 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/21/2023 01:53:07 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}
08/21/2023 01:53:38 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 01:53:38 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 01:53:38 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 01:53:38 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 01:53:38 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/21/2023 01:53:38 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 01:53:38 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 01:53:38 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 01:53:38 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 01:53:38 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/21/2023 01:53:38 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 01:53:38 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 01:53:38 PM DEBUG [spec] No of nodes: 22
08/21/2023 01:53:38 PM DEBUG [spec] No of edges: 33
08/21/2023 01:53:38 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 01:53:38 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 01:53:38 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/21/2023 01:53:38 PM DEBUG [spec] No of nodes: 6
08/21/2023 01:53:38 PM DEBUG [spec] No of edges: 10
08/21/2023 01:53:38 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/21/2023 01:53:38 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/21/2023 01:53:38 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/21/2023 01:53:38 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/21/2023 01:53:38 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/21/2023 01:53:38 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/21/2023 01:53:38 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/21/2023 01:53:38 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}
08/21/2023 01:53:38 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/21/2023 01:53:38 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}
08/21/2023 01:53:38 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'C:\\Users\\eb7z3\\PycharmProjects\\pythonProject\\venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000
08/21/2023 01:53:40 PM DEBUG 
End of translate


08/21/2023 01:53:40 PM INFO The bound of formula "[H^2 A]^[0, 6] * [H^1 B]^[0, 3]" is (4, 10)!
08/21/2023 01:53:40 PM INFO Translated formula "[H^2 A]^[0, 6] * [H^1 B]^[0, 3]" to normal DFA of size (22, 33)!
08/21/2023 01:53:40 PM INFO Translated formula "[H^2 A]^[0, 6] * [H^1 B]^[0, 3]" to infinity DFA of size (6, 10)!
08/21/2023 01:53:40 PM DEBUG 

Start policy computation

08/21/2023 01:53:40 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
08/21/2023 01:53:40 PM INFO Constructing product automaton with normal DFA!
08/21/2023 07:15:56 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 07:15:56 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 07:15:56 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 07:15:56 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 07:15:56 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/21/2023 07:15:56 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 07:15:56 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 07:15:56 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 07:15:56 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 07:15:56 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/21/2023 07:15:56 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 07:15:56 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 07:15:56 PM DEBUG [spec] No of nodes: 22
08/21/2023 07:15:56 PM DEBUG [spec] No of edges: 33
08/21/2023 07:15:56 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 07:15:56 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 07:15:56 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/21/2023 07:15:56 PM DEBUG [spec] No of nodes: 6
08/21/2023 07:15:56 PM DEBUG [spec] No of edges: 10
08/21/2023 07:15:56 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/21/2023 07:15:56 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/21/2023 07:15:56 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/21/2023 07:15:56 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/21/2023 07:15:56 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/21/2023 07:15:56 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
08/21/2023 07:15:56 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/21/2023 07:15:56 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}
08/21/2023 07:15:56 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
08/21/2023 07:15:56 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}
08/21/2023 07:15:57 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'C:\\Users\\eb7z3\\PycharmProjects\\pythonProject\\venv\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000
08/21/2023 07:16:51 PM DEBUG 
End of translate


08/21/2023 07:16:51 PM INFO The bound of formula "[H^2 A]^[0, 6] * [H^1 B]^[0, 3]" is (4, 10)!
08/21/2023 07:16:51 PM INFO Translated formula "[H^2 A]^[0, 6] * [H^1 B]^[0, 3]" to normal DFA of size (22, 33)!
08/21/2023 07:16:51 PM INFO Translated formula "[H^2 A]^[0, 6] * [H^1 B]^[0, 3]" to infinity DFA of size (6, 10)!
08/21/2023 07:16:51 PM DEBUG 

Start policy computation

08/21/2023 07:16:51 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
08/21/2023 07:16:51 PM INFO Constructing product automaton with normal DFA!
08/21/2023 07:17:06 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 07:17:06 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 07:17:06 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 07:17:06 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 07:17:06 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/21/2023 07:17:06 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 07:17:06 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 07:17:06 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 07:17:06 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 07:17:06 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/21/2023 07:17:06 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 07:17:06 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 07:17:06 PM DEBUG [spec] No of nodes: 22
08/21/2023 07:17:06 PM DEBUG [spec] No of edges: 33
08/21/2023 07:17:06 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 07:17:06 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 07:17:06 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/21/2023 07:17:06 PM DEBUG [spec] No of nodes: 6
08/21/2023 07:17:06 PM DEBUG [spec] No of edges: 10
08/21/2023 08:56:06 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 08:56:06 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 08:56:06 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 08:56:06 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 08:56:06 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/21/2023 08:56:06 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 08:56:06 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 08:56:06 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 08:56:06 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 08:56:06 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/21/2023 08:56:06 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 08:56:06 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 08:56:06 PM DEBUG [spec] No of nodes: 22
08/21/2023 08:56:06 PM DEBUG [spec] No of edges: 33
08/21/2023 08:56:06 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 08:56:06 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 08:56:06 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/21/2023 08:56:06 PM DEBUG [spec] No of nodes: 6
08/21/2023 08:56:06 PM DEBUG [spec] No of edges: 10
08/21/2023 08:59:42 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 08:59:42 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 08:59:42 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 08:59:42 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 08:59:42 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/21/2023 08:59:42 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 08:59:42 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 08:59:42 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 08:59:42 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 08:59:42 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/21/2023 08:59:42 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 08:59:42 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 08:59:42 PM DEBUG [spec] No of nodes: 22
08/21/2023 08:59:42 PM DEBUG [spec] No of edges: 33
08/21/2023 08:59:42 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 08:59:42 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 08:59:42 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/21/2023 08:59:42 PM DEBUG [spec] No of nodes: 6
08/21/2023 08:59:42 PM DEBUG [spec] No of edges: 10
08/21/2023 09:00:03 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 09:00:03 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 09:00:03 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 09:00:03 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 09:00:03 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/21/2023 09:00:03 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 09:00:03 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 09:00:03 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 09:00:03 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 09:00:03 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/21/2023 09:00:03 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 09:00:03 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 09:00:03 PM DEBUG [spec] No of nodes: 22
08/21/2023 09:00:03 PM DEBUG [spec] No of edges: 33
08/21/2023 09:00:03 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 09:00:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 09:00:03 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/21/2023 09:00:03 PM DEBUG [spec] No of nodes: 6
08/21/2023 09:00:03 PM DEBUG [spec] No of edges: 10
08/21/2023 09:06:16 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 09:06:16 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 09:06:16 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 09:06:16 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 09:06:16 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/21/2023 09:06:16 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 09:06:16 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 09:06:16 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 09:06:16 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 09:06:16 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/21/2023 09:06:16 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 09:06:16 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 09:06:16 PM DEBUG [spec] No of nodes: 22
08/21/2023 09:06:16 PM DEBUG [spec] No of edges: 33
08/21/2023 09:06:16 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 09:06:16 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 09:06:16 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/21/2023 09:06:16 PM DEBUG [spec] No of nodes: 6
08/21/2023 09:06:16 PM DEBUG [spec] No of edges: 10
08/21/2023 09:06:31 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 09:06:31 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 09:06:31 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 09:06:31 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 09:06:31 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/21/2023 09:06:31 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 09:06:31 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 09:06:31 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 09:06:31 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 09:06:31 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/21/2023 09:06:31 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 09:06:31 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 09:06:31 PM DEBUG [spec] No of nodes: 22
08/21/2023 09:06:31 PM DEBUG [spec] No of edges: 33
08/21/2023 09:06:31 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 09:06:31 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 09:06:31 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/21/2023 09:06:31 PM DEBUG [spec] No of nodes: 6
08/21/2023 09:06:31 PM DEBUG [spec] No of edges: 10
08/21/2023 09:24:17 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 09:24:17 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 09:24:17 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 09:24:17 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 09:24:17 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/21/2023 09:24:17 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 09:24:17 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 09:24:17 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 09:24:17 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 09:24:17 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/21/2023 09:24:17 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 09:24:17 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 09:24:17 PM DEBUG [spec] No of nodes: 22
08/21/2023 09:24:17 PM DEBUG [spec] No of edges: 33
08/21/2023 09:24:17 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 09:24:17 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 09:24:17 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/21/2023 09:24:17 PM DEBUG [spec] No of nodes: 6
08/21/2023 09:24:17 PM DEBUG [spec] No of edges: 10
08/21/2023 09:24:36 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 09:24:36 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 09:24:36 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 09:24:36 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 09:24:36 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/21/2023 09:24:36 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 09:24:36 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 09:24:36 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 09:24:36 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 09:24:36 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/21/2023 09:24:36 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 09:24:36 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 09:24:36 PM DEBUG [spec] No of nodes: 22
08/21/2023 09:24:36 PM DEBUG [spec] No of edges: 33
08/21/2023 09:24:36 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 09:24:36 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 09:24:36 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/21/2023 09:24:36 PM DEBUG [spec] No of nodes: 6
08/21/2023 09:24:36 PM DEBUG [spec] No of edges: 10
08/21/2023 10:48:52 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 10:48:52 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 10:48:52 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 10:48:52 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 10:48:52 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/21/2023 10:48:52 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 10:48:52 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 10:48:52 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 10:48:52 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 10:48:52 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/21/2023 10:48:52 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 10:48:52 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 10:48:52 PM DEBUG [spec] No of nodes: 22
08/21/2023 10:48:52 PM DEBUG [spec] No of edges: 33
08/21/2023 10:48:52 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 10:48:52 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 10:48:52 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/21/2023 10:48:52 PM DEBUG [spec] No of nodes: 6
08/21/2023 10:48:52 PM DEBUG [spec] No of edges: 10
08/21/2023 10:49:04 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 10:49:04 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 10:49:04 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 10:49:04 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 10:49:04 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/21/2023 10:49:04 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 10:49:04 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 10:49:04 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 10:49:04 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 10:49:04 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/21/2023 10:49:04 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 10:49:04 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 10:49:04 PM DEBUG [spec] No of nodes: 22
08/21/2023 10:49:04 PM DEBUG [spec] No of edges: 33
08/21/2023 10:49:04 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 10:49:04 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 10:49:04 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/21/2023 10:49:04 PM DEBUG [spec] No of nodes: 6
08/21/2023 10:49:04 PM DEBUG [spec] No of edges: 10
08/21/2023 10:51:22 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 10:51:22 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 10:51:22 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 10:51:22 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 10:51:22 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/21/2023 10:51:22 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/21/2023 10:51:22 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/21/2023 10:51:22 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/21/2023 10:51:22 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/21/2023 10:51:22 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/21/2023 10:51:22 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 10:51:22 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 10:51:22 PM DEBUG [spec] No of nodes: 22
08/21/2023 10:51:22 PM DEBUG [spec] No of edges: 33
08/21/2023 10:51:22 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/21/2023 10:51:22 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/21/2023 10:51:22 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/21/2023 10:51:22 PM DEBUG [spec] No of nodes: 6
08/21/2023 10:51:22 PM DEBUG [spec] No of edges: 10
08/22/2023 01:23:56 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/22/2023 01:23:56 AM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/22/2023 01:23:56 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/22/2023 01:23:56 AM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/22/2023 01:23:56 AM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/22/2023 01:23:56 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/22/2023 01:23:56 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/22/2023 01:23:56 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/22/2023 01:23:56 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/22/2023 01:23:56 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/22/2023 01:23:56 AM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/22/2023 01:23:56 AM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/22/2023 01:23:56 AM DEBUG [spec] No of nodes: 22
08/22/2023 01:23:56 AM DEBUG [spec] No of edges: 33
08/22/2023 01:23:56 AM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/22/2023 01:23:56 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/22/2023 01:23:56 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/22/2023 01:23:56 AM DEBUG [spec] No of nodes: 6
08/22/2023 01:23:56 AM DEBUG [spec] No of edges: 10
08/22/2023 01:26:03 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/22/2023 01:26:03 AM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/22/2023 01:26:03 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/22/2023 01:26:03 AM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/22/2023 01:26:03 AM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/22/2023 01:26:03 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/22/2023 01:26:03 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/22/2023 01:26:03 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/22/2023 01:26:03 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/22/2023 01:26:03 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/22/2023 01:26:03 AM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/22/2023 01:26:03 AM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/22/2023 01:26:03 AM DEBUG [spec] No of nodes: 22
08/22/2023 01:26:03 AM DEBUG [spec] No of edges: 33
08/22/2023 01:26:03 AM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/22/2023 01:26:03 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/22/2023 01:26:03 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/22/2023 01:26:03 AM DEBUG [spec] No of nodes: 6
08/22/2023 01:26:03 AM DEBUG [spec] No of edges: 10
08/22/2023 01:27:37 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/22/2023 01:27:37 AM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
08/22/2023 01:27:37 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/22/2023 01:27:37 AM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
08/22/2023 01:27:37 AM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Repeat (Hold 1 B ) 0 3 )
08/22/2023 01:27:37 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'B'])
08/22/2023 01:27:37 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
08/22/2023 01:27:37 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/22/2023 01:27:37 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
08/22/2023 01:27:37 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Eventually (Hold 1 B ) 0 3 )
08/22/2023 01:27:37 AM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/22/2023 01:27:37 AM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A ) 0 6 ) (Repeat (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([21])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 16, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (15, 17, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (16, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 18, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (17, 19, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (18, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (19, 20, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (20, 21, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/22/2023 01:27:37 AM DEBUG [spec] No of nodes: 22
08/22/2023 01:27:37 AM DEBUG [spec] No of edges: 33
08/22/2023 01:27:37 AM DEBUG [spec] spec: [H^2 A]^[0, 6] * [H^1 B]^[0, 3]
08/22/2023 01:27:37 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 6 ) (Eventually (Hold 1 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
08/22/2023 01:27:37 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/22/2023 01:27:37 AM DEBUG [spec] No of nodes: 6
08/22/2023 01:27:37 AM DEBUG [spec] No of edges: 10
08/22/2023 09:05:59 AM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A', 'B'])
08/22/2023 09:05:59 AM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A )
08/22/2023 09:05:59 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/22/2023 09:05:59 AM DEBUG [within] Low: 4 High: 6 DFA: (Hold 1 B )
08/22/2023 09:05:59 AM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A ) 0 3 ) DFA2: (Repeat (Hold 1 B ) 4 6 )
08/22/2023 09:05:59 AM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A', 'B'])
08/22/2023 09:05:59 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A )
08/22/2023 09:05:59 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'B'])
08/22/2023 09:05:59 AM DEBUG [eventually] Low: 4 High: 6 DFA: (Hold 1 B )
08/22/2023 09:05:59 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A ) 0 3 ) DFA2: (Eventually (Hold 1 B ) 4 6 )
08/22/2023 09:05:59 AM DEBUG [spec] spec: [H^1 A]^[0, 3] * [H^1 B]^[4, 6]
08/22/2023 09:05:59 AM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A ) 0 3 ) (Repeat (Hold 1 B ) 4 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([11])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 6, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 12, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (7, 9, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 11, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (9, 10, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (10, 11, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (12, 13, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (13, 14, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (14, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
08/22/2023 09:05:59 AM DEBUG [spec] No of nodes: 15
08/22/2023 09:05:59 AM DEBUG [spec] No of edges: 18
08/22/2023 09:05:59 AM DEBUG [spec] spec: [H^1 A]^[0, 3] * [H^1 B]^[4, 6]
08/22/2023 09:05:59 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A ) 0 3 ) (Eventually (Hold 1 B ) 4 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (8, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
08/22/2023 09:05:59 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/22/2023 09:05:59 AM DEBUG [spec] No of nodes: 9
08/22/2023 09:05:59 AM DEBUG [spec] No of edges: 12
08/22/2023 09:07:10 AM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:07:10 AM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A11 )
08/22/2023 09:07:10 AM DEBUG [hold] Prop: B21 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:07:10 AM DEBUG [within] Low: 4 High: 6 DFA: (Hold 1 B21 )
08/22/2023 09:07:10 AM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A11 ) 0 3 ) DFA2: (Repeat (Hold 1 B21 ) 4 6 )
08/22/2023 09:07:10 AM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:07:10 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A11 )
08/22/2023 09:07:10 AM DEBUG [hold] Prop: B21 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:07:10 AM DEBUG [eventually] Low: 4 High: 6 DFA: (Hold 1 B21 )
08/22/2023 09:07:10 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A11 ) 0 3 ) DFA2: (Eventually (Hold 1 B21 ) 4 6 )
08/22/2023 09:07:10 AM DEBUG [spec] spec: [H^1 A11]^[0, 3] * [H^1 B21]^[4, 6]
08/22/2023 09:07:10 AM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A11 ) 0 3 ) (Repeat (Hold 1 B21 ) 4 6 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([11])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (0, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 3, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (4, 5, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (5, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (6, 12, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (7, 9, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 11, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (9, 10, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (10, 11, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (12, 13, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (13, 14, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (14, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
08/22/2023 09:07:10 AM DEBUG [spec] No of nodes: 15
08/22/2023 09:07:10 AM DEBUG [spec] No of edges: 18
08/22/2023 09:07:10 AM DEBUG [spec] spec: [H^1 A11]^[0, 3] * [H^1 B21]^[4, 6]
08/22/2023 09:07:10 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A11 ) 0 3 ) (Eventually (Hold 1 B21 ) 4 6 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (8, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
08/22/2023 09:07:10 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/22/2023 09:07:10 AM DEBUG [spec] No of nodes: 9
08/22/2023 09:07:10 AM DEBUG [spec] No of edges: 12
08/22/2023 09:57:55 AM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:57:55 AM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A11 )
08/22/2023 09:57:55 AM DEBUG [hold] Prop: B21 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:57:55 AM DEBUG [within] Low: 4 High: 6 DFA: (Hold 1 B21 )
08/22/2023 09:57:55 AM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A11 ) 0 3 ) DFA2: (Repeat (Hold 1 B21 ) 4 6 )
08/22/2023 09:57:55 AM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:57:55 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A11 )
08/22/2023 09:57:55 AM DEBUG [hold] Prop: B21 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:57:55 AM DEBUG [eventually] Low: 4 High: 6 DFA: (Hold 1 B21 )
08/22/2023 09:57:55 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A11 ) 0 3 ) DFA2: (Eventually (Hold 1 B21 ) 4 6 )
08/22/2023 09:57:55 AM DEBUG [spec] spec: [H^1 A11]^[0, 3] * [H^1 B21]^[4, 6]
08/22/2023 09:57:55 AM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A11 ) 0 3 ) (Repeat (Hold 1 B21 ) 4 6 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([11])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (0, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 3, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (4, 5, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (5, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (6, 12, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (7, 9, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 11, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (9, 10, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (10, 11, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (12, 13, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (13, 14, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (14, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
08/22/2023 09:57:55 AM DEBUG [spec] No of nodes: 15
08/22/2023 09:57:55 AM DEBUG [spec] No of edges: 18
08/22/2023 09:57:55 AM DEBUG [spec] spec: [H^1 A11]^[0, 3] * [H^1 B21]^[4, 6]
08/22/2023 09:57:55 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A11 ) 0 3 ) (Eventually (Hold 1 B21 ) 4 6 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (8, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
08/22/2023 09:57:55 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/22/2023 09:57:55 AM DEBUG [spec] No of nodes: 9
08/22/2023 09:57:55 AM DEBUG [spec] No of edges: 12
08/22/2023 09:57:55 AM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:57:55 AM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A11 )
08/22/2023 09:57:55 AM DEBUG [hold] Prop: B21 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:57:55 AM DEBUG [within] Low: 4 High: 6 DFA: (Hold 1 B21 )
08/22/2023 09:57:55 AM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A11 ) 0 3 ) DFA2: (Repeat (Hold 1 B21 ) 4 6 )
08/22/2023 09:57:55 AM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:57:55 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A11 )
08/22/2023 09:57:55 AM DEBUG [hold] Prop: B21 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:57:55 AM DEBUG [eventually] Low: 4 High: 6 DFA: (Hold 1 B21 )
08/22/2023 09:57:55 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A11 ) 0 3 ) DFA2: (Eventually (Hold 1 B21 ) 4 6 )
08/22/2023 09:57:55 AM DEBUG [spec] spec: [H^1 A11]^[0, 3] * [H^1 B21]^[4, 6]
08/22/2023 09:57:55 AM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A11 ) 0 3 ) (Repeat (Hold 1 B21 ) 4 6 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([11])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (0, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 3, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (4, 5, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (5, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (6, 12, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (7, 9, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 11, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (9, 10, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (10, 11, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (12, 13, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (13, 14, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (14, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
08/22/2023 09:57:55 AM DEBUG [spec] No of nodes: 15
08/22/2023 09:57:55 AM DEBUG [spec] No of edges: 18
08/22/2023 09:57:55 AM DEBUG [spec] spec: [H^1 A11]^[0, 3] * [H^1 B21]^[4, 6]
08/22/2023 09:57:55 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A11 ) 0 3 ) (Eventually (Hold 1 B21 ) 4 6 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (8, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
08/22/2023 09:57:55 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/22/2023 09:57:55 AM DEBUG [spec] No of nodes: 9
08/22/2023 09:57:55 AM DEBUG [spec] No of edges: 12
08/22/2023 09:59:04 AM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:59:04 AM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A11 )
08/22/2023 09:59:04 AM DEBUG [hold] Prop: B21 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:59:04 AM DEBUG [within] Low: 4 High: 6 DFA: (Hold 1 B21 )
08/22/2023 09:59:04 AM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A11 ) 0 3 ) DFA2: (Repeat (Hold 1 B21 ) 4 6 )
08/22/2023 09:59:04 AM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:59:04 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A11 )
08/22/2023 09:59:04 AM DEBUG [hold] Prop: B21 Duration: 1 Negation: False Props: set(['A11', 'B21'])
08/22/2023 09:59:04 AM DEBUG [eventually] Low: 4 High: 6 DFA: (Hold 1 B21 )
08/22/2023 09:59:04 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A11 ) 0 3 ) DFA2: (Eventually (Hold 1 B21 ) 4 6 )
08/22/2023 09:59:04 AM DEBUG [spec] spec: [H^1 A11]^[0, 3] * [H^1 B21]^[4, 6]
08/22/2023 09:59:04 AM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A11 ) 0 3 ) (Repeat (Hold 1 B21 ) 4 6 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([11])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (0, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 3, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (4, 5, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (5, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (6, 12, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (7, 9, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 11, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (9, 10, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (10, 11, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (12, 13, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (13, 14, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (14, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
08/22/2023 09:59:04 AM DEBUG [spec] No of nodes: 15
08/22/2023 09:59:04 AM DEBUG [spec] No of edges: 18
08/22/2023 09:59:04 AM DEBUG [spec] spec: [H^1 A11]^[0, 3] * [H^1 B21]^[4, 6]
08/22/2023 09:59:04 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A11 ) 0 3 ) (Eventually (Hold 1 B21 ) 4 6 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (8, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
08/22/2023 09:59:04 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/22/2023 09:59:04 AM DEBUG [spec] No of nodes: 9
08/22/2023 09:59:04 AM DEBUG [spec] No of edges: 12
08/22/2023 09:59:04 AM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['B22', 'A12'])
08/22/2023 09:59:04 AM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A12 )
08/22/2023 09:59:04 AM DEBUG [hold] Prop: B22 Duration: 1 Negation: False Props: set(['B22', 'A12'])
08/22/2023 09:59:04 AM DEBUG [within] Low: 4 High: 6 DFA: (Hold 1 B22 )
08/22/2023 09:59:04 AM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A12 ) 0 3 ) DFA2: (Repeat (Hold 1 B22 ) 4 6 )
08/22/2023 09:59:04 AM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['B22', 'A12'])
08/22/2023 09:59:04 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A12 )
08/22/2023 09:59:04 AM DEBUG [hold] Prop: B22 Duration: 1 Negation: False Props: set(['B22', 'A12'])
08/22/2023 09:59:04 AM DEBUG [eventually] Low: 4 High: 6 DFA: (Hold 1 B22 )
08/22/2023 09:59:04 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A12 ) 0 3 ) DFA2: (Eventually (Hold 1 B22 ) 4 6 )
08/22/2023 09:59:04 AM DEBUG [spec] spec: [H^1 A12]^[0, 3] * [H^1 B22]^[4, 6]
08/22/2023 09:59:04 AM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A12 ) 0 3 ) (Repeat (Hold 1 B22 ) 4 6 ) )
Directed: True
Multi: False
Props: {'B22': 1, 'A12': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([11])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {})]
Edges: [(0, 1, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (0, 2, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 3, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 4, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (4, 5, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (5, 6, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (6, 12, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (7, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 11, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (9, 10, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (10, 11, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (12, 13, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (13, 14, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (14, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
08/22/2023 09:59:04 AM DEBUG [spec] No of nodes: 15
08/22/2023 09:59:04 AM DEBUG [spec] No of edges: 18
08/22/2023 09:59:04 AM DEBUG [spec] spec: [H^1 A12]^[0, 3] * [H^1 B22]^[4, 6]
08/22/2023 09:59:04 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A12 ) 0 3 ) (Eventually (Hold 1 B22 ) 4 6 ) )
Directed: True
Multi: False
Props: {'B22': 1, 'A12': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (8, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
08/22/2023 09:59:04 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

08/22/2023 09:59:04 AM DEBUG [spec] No of nodes: 9
08/22/2023 09:59:04 AM DEBUG [spec] No of edges: 12
09/14/2023 05:02:05 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B21'])
09/14/2023 05:02:05 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A11 )
09/14/2023 05:02:05 PM DEBUG [hold] Prop: B21 Duration: 1 Negation: False Props: set(['A11', 'B21'])
09/14/2023 05:02:05 PM DEBUG [within] Low: 4 High: 6 DFA: (Hold 1 B21 )
09/14/2023 05:02:05 PM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A11 ) 0 3 ) DFA2: (Repeat (Hold 1 B21 ) 4 6 )
09/14/2023 05:02:05 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B21'])
09/14/2023 05:02:05 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A11 )
09/14/2023 05:02:05 PM DEBUG [hold] Prop: B21 Duration: 1 Negation: False Props: set(['A11', 'B21'])
09/14/2023 05:02:05 PM DEBUG [eventually] Low: 4 High: 6 DFA: (Hold 1 B21 )
09/14/2023 05:02:05 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A11 ) 0 3 ) DFA2: (Eventually (Hold 1 B21 ) 4 6 )
09/14/2023 05:02:05 PM DEBUG [spec] spec: [H^1 A11]^[0, 3] * [H^1 B21]^[4, 6]
09/14/2023 05:02:05 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A11 ) 0 3 ) (Repeat (Hold 1 B21 ) 4 6 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([11])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (0, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 3, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (4, 5, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (5, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (6, 12, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (7, 9, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 11, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (9, 10, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (10, 11, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (12, 13, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (13, 14, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (14, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/14/2023 05:02:05 PM DEBUG [spec] No of nodes: 15
09/14/2023 05:02:05 PM DEBUG [spec] No of edges: 18
09/14/2023 05:02:05 PM DEBUG [spec] spec: [H^1 A11]^[0, 3] * [H^1 B21]^[4, 6]
09/14/2023 05:02:05 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A11 ) 0 3 ) (Eventually (Hold 1 B21 ) 4 6 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (8, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/14/2023 05:02:05 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

09/14/2023 05:02:05 PM DEBUG [spec] No of nodes: 9
09/14/2023 05:02:05 PM DEBUG [spec] No of edges: 12
09/14/2023 05:02:05 PM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['B22', 'A12'])
09/14/2023 05:02:05 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A12 )
09/14/2023 05:02:05 PM DEBUG [hold] Prop: B22 Duration: 1 Negation: False Props: set(['B22', 'A12'])
09/14/2023 05:02:05 PM DEBUG [within] Low: 4 High: 6 DFA: (Hold 1 B22 )
09/14/2023 05:02:05 PM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A12 ) 0 3 ) DFA2: (Repeat (Hold 1 B22 ) 4 6 )
09/14/2023 05:02:05 PM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['B22', 'A12'])
09/14/2023 05:02:05 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A12 )
09/14/2023 05:02:05 PM DEBUG [hold] Prop: B22 Duration: 1 Negation: False Props: set(['B22', 'A12'])
09/14/2023 05:02:05 PM DEBUG [eventually] Low: 4 High: 6 DFA: (Hold 1 B22 )
09/14/2023 05:02:05 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A12 ) 0 3 ) DFA2: (Eventually (Hold 1 B22 ) 4 6 )
09/14/2023 05:02:05 PM DEBUG [spec] spec: [H^1 A12]^[0, 3] * [H^1 B22]^[4, 6]
09/14/2023 05:02:05 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A12 ) 0 3 ) (Repeat (Hold 1 B22 ) 4 6 ) )
Directed: True
Multi: False
Props: {'B22': 1, 'A12': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([11])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {})]
Edges: [(0, 1, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (0, 2, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 3, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 4, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (4, 5, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (5, 6, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (6, 12, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (7, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 11, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (9, 10, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (10, 11, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (12, 13, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (13, 14, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (14, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/14/2023 05:02:05 PM DEBUG [spec] No of nodes: 15
09/14/2023 05:02:05 PM DEBUG [spec] No of edges: 18
09/14/2023 05:02:05 PM DEBUG [spec] spec: [H^1 A12]^[0, 3] * [H^1 B22]^[4, 6]
09/14/2023 05:02:05 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A12 ) 0 3 ) (Eventually (Hold 1 B22 ) 4 6 ) )
Directed: True
Multi: False
Props: {'B22': 1, 'A12': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (8, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/14/2023 05:02:05 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

09/14/2023 05:02:05 PM DEBUG [spec] No of nodes: 9
09/14/2023 05:02:05 PM DEBUG [spec] No of edges: 12
09/15/2023 02:04:55 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B21'])
09/15/2023 02:04:55 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A11 )
09/15/2023 02:04:55 PM DEBUG [hold] Prop: B21 Duration: 1 Negation: False Props: set(['A11', 'B21'])
09/15/2023 02:04:55 PM DEBUG [within] Low: 4 High: 6 DFA: (Hold 1 B21 )
09/15/2023 02:04:55 PM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A11 ) 0 3 ) DFA2: (Repeat (Hold 1 B21 ) 4 6 )
09/15/2023 02:04:55 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B21'])
09/15/2023 02:04:55 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A11 )
09/15/2023 02:04:55 PM DEBUG [hold] Prop: B21 Duration: 1 Negation: False Props: set(['A11', 'B21'])
09/15/2023 02:04:55 PM DEBUG [eventually] Low: 4 High: 6 DFA: (Hold 1 B21 )
09/15/2023 02:04:55 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A11 ) 0 3 ) DFA2: (Eventually (Hold 1 B21 ) 4 6 )
09/15/2023 02:04:55 PM DEBUG [spec] spec: [H^1 A11]^[0, 3] * [H^1 B21]^[4, 6]
09/15/2023 02:04:55 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A11 ) 0 3 ) (Repeat (Hold 1 B21 ) 4 6 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([11])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (0, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 3, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (4, 5, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (5, 6, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (6, 12, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (7, 9, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 11, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (9, 10, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (10, 11, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (12, 13, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (13, 14, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (14, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:04:55 PM DEBUG [spec] No of nodes: 15
09/15/2023 02:04:55 PM DEBUG [spec] No of edges: 18
09/15/2023 02:04:55 PM DEBUG [spec] spec: [H^1 A11]^[0, 3] * [H^1 B21]^[4, 6]
09/15/2023 02:04:55 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A11 ) 0 3 ) (Eventually (Hold 1 B21 ) 4 6 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B21', 'weight': 0, 'label': u'B21'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (8, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:04:55 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

09/15/2023 02:04:55 PM DEBUG [spec] No of nodes: 9
09/15/2023 02:04:55 PM DEBUG [spec] No of edges: 12
09/15/2023 02:04:55 PM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['B22', 'A12'])
09/15/2023 02:04:55 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A12 )
09/15/2023 02:04:55 PM DEBUG [hold] Prop: B22 Duration: 1 Negation: False Props: set(['B22', 'A12'])
09/15/2023 02:04:55 PM DEBUG [within] Low: 4 High: 6 DFA: (Hold 1 B22 )
09/15/2023 02:04:55 PM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A12 ) 0 3 ) DFA2: (Repeat (Hold 1 B22 ) 4 6 )
09/15/2023 02:04:55 PM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['B22', 'A12'])
09/15/2023 02:04:55 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A12 )
09/15/2023 02:04:55 PM DEBUG [hold] Prop: B22 Duration: 1 Negation: False Props: set(['B22', 'A12'])
09/15/2023 02:04:55 PM DEBUG [eventually] Low: 4 High: 6 DFA: (Hold 1 B22 )
09/15/2023 02:04:55 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A12 ) 0 3 ) DFA2: (Eventually (Hold 1 B22 ) 4 6 )
09/15/2023 02:04:55 PM DEBUG [spec] spec: [H^1 A12]^[0, 3] * [H^1 B22]^[4, 6]
09/15/2023 02:04:55 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A12 ) 0 3 ) (Repeat (Hold 1 B22 ) 4 6 ) )
Directed: True
Multi: False
Props: {'B22': 1, 'A12': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([11])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {})]
Edges: [(0, 1, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (0, 2, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 3, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 4, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (4, 5, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (5, 6, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (6, 12, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (7, 9, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 11, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (9, 10, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (10, 11, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (12, 13, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (13, 14, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (14, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:04:55 PM DEBUG [spec] No of nodes: 15
09/15/2023 02:04:55 PM DEBUG [spec] No of edges: 18
09/15/2023 02:04:55 PM DEBUG [spec] spec: [H^1 A12]^[0, 3] * [H^1 B22]^[4, 6]
09/15/2023 02:04:55 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A12 ) 0 3 ) (Eventually (Hold 1 B22 ) 4 6 ) )
Directed: True
Multi: False
Props: {'B22': 1, 'A12': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'B22', 'weight': 0, 'label': u'B22'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (8, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:04:55 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

09/15/2023 02:04:55 PM DEBUG [spec] No of nodes: 9
09/15/2023 02:04:55 PM DEBUG [spec] No of edges: 12
09/15/2023 02:11:03 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11'])
09/15/2023 02:11:03 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A11 )
09/15/2023 02:11:03 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11'])
09/15/2023 02:11:03 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A11 )
09/15/2023 02:11:03 PM DEBUG [spec] spec: [H^1 A11]^[0, 3] 
09/15/2023 02:11:03 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 1 A11 ) 0 3 )
Directed: True
Multi: False
Props: {'A11': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (0, 2, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 3, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (4, 5, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (5, 6, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'})]
		
09/15/2023 02:11:03 PM DEBUG [spec] No of nodes: 7
09/15/2023 02:11:03 PM DEBUG [spec] No of edges: 9
09/15/2023 02:11:03 PM DEBUG [spec] spec: [H^1 A11]^[0, 3] 
09/15/2023 02:11:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A11 ) 0 3 )
Directed: True
Multi: False
Props: {'A11': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'})]
		
09/15/2023 02:11:03 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

09/15/2023 02:11:03 PM DEBUG [spec] No of nodes: 3
09/15/2023 02:11:03 PM DEBUG [spec] No of edges: 4
09/15/2023 02:11:03 PM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['A12'])
09/15/2023 02:11:03 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A12 )
09/15/2023 02:11:03 PM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['A12'])
09/15/2023 02:11:03 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A12 )
09/15/2023 02:11:03 PM DEBUG [spec] spec: [H^1 A12]^[0, 3] 
09/15/2023 02:11:03 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 1 A12 ) 0 3 )
Directed: True
Multi: False
Props: {'A12': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (0, 2, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 3, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (4, 5, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (5, 6, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'})]
		
09/15/2023 02:11:03 PM DEBUG [spec] No of nodes: 7
09/15/2023 02:11:03 PM DEBUG [spec] No of edges: 9
09/15/2023 02:11:03 PM DEBUG [spec] spec: [H^1 A12]^[0, 3] 
09/15/2023 02:11:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A12 ) 0 3 )
Directed: True
Multi: False
Props: {'A12': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'})]
		
09/15/2023 02:11:03 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

09/15/2023 02:11:03 PM DEBUG [spec] No of nodes: 3
09/15/2023 02:11:03 PM DEBUG [spec] No of edges: 4
09/15/2023 02:17:43 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11'])
09/15/2023 02:17:43 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A11 )
09/15/2023 02:17:43 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11'])
09/15/2023 02:17:43 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A11 )
09/15/2023 02:17:43 PM DEBUG [spec] spec: [H^1 A11]^[0, 3] 
09/15/2023 02:17:43 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 1 A11 ) 0 3 )
Directed: True
Multi: False
Props: {'A11': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (0, 2, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 3, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (4, 5, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (5, 6, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'})]
		
09/15/2023 02:17:43 PM DEBUG [spec] No of nodes: 7
09/15/2023 02:17:43 PM DEBUG [spec] No of edges: 9
09/15/2023 02:17:43 PM DEBUG [spec] spec: [H^1 A11]^[0, 3] 
09/15/2023 02:17:43 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A11 ) 0 3 )
Directed: True
Multi: False
Props: {'A11': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'})]
		
09/15/2023 02:17:43 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

09/15/2023 02:17:43 PM DEBUG [spec] No of nodes: 3
09/15/2023 02:17:43 PM DEBUG [spec] No of edges: 4
09/15/2023 02:17:43 PM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['A12'])
09/15/2023 02:17:43 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A12 )
09/15/2023 02:17:43 PM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['A12'])
09/15/2023 02:17:43 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A12 )
09/15/2023 02:17:43 PM DEBUG [spec] spec: [H^1 A12]^[0, 3] 
09/15/2023 02:17:43 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 1 A12 ) 0 3 )
Directed: True
Multi: False
Props: {'A12': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (0, 2, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 3, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (4, 5, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (5, 6, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'})]
		
09/15/2023 02:17:43 PM DEBUG [spec] No of nodes: 7
09/15/2023 02:17:43 PM DEBUG [spec] No of edges: 9
09/15/2023 02:17:43 PM DEBUG [spec] spec: [H^1 A12]^[0, 3] 
09/15/2023 02:17:43 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A12 ) 0 3 )
Directed: True
Multi: False
Props: {'A12': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'})]
		
09/15/2023 02:17:43 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

09/15/2023 02:17:43 PM DEBUG [spec] No of nodes: 3
09/15/2023 02:17:43 PM DEBUG [spec] No of edges: 4
09/15/2023 02:18:08 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11'])
09/15/2023 02:18:08 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A11 )
09/15/2023 02:18:08 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11'])
09/15/2023 02:18:08 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A11 )
09/15/2023 02:18:08 PM DEBUG [spec] spec: [H^1 A11]^[0, 3] 
09/15/2023 02:18:08 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 1 A11 ) 0 3 )
Directed: True
Multi: False
Props: {'A11': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (0, 2, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 3, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (4, 5, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (5, 6, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'})]
		
09/15/2023 02:18:08 PM DEBUG [spec] No of nodes: 7
09/15/2023 02:18:08 PM DEBUG [spec] No of edges: 9
09/15/2023 02:18:08 PM DEBUG [spec] spec: [H^1 A11]^[0, 3] 
09/15/2023 02:18:08 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A11 ) 0 3 )
Directed: True
Multi: False
Props: {'A11': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'})]
		
09/15/2023 02:18:08 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

09/15/2023 02:18:08 PM DEBUG [spec] No of nodes: 3
09/15/2023 02:18:08 PM DEBUG [spec] No of edges: 4
09/15/2023 02:18:08 PM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['A12'])
09/15/2023 02:18:08 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A12 )
09/15/2023 02:18:08 PM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['A12'])
09/15/2023 02:18:08 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A12 )
09/15/2023 02:18:08 PM DEBUG [spec] spec: [H^1 A12]^[0, 3] 
09/15/2023 02:18:08 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 1 A12 ) 0 3 )
Directed: True
Multi: False
Props: {'A12': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (0, 2, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 3, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (4, 5, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (5, 6, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'})]
		
09/15/2023 02:18:08 PM DEBUG [spec] No of nodes: 7
09/15/2023 02:18:08 PM DEBUG [spec] No of edges: 9
09/15/2023 02:18:08 PM DEBUG [spec] spec: [H^1 A12]^[0, 3] 
09/15/2023 02:18:08 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A12 ) 0 3 )
Directed: True
Multi: False
Props: {'A12': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A12', 'weight': 0, 'label': u'A12'})]
		
09/15/2023 02:18:08 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

09/15/2023 02:18:08 PM DEBUG [spec] No of nodes: 3
09/15/2023 02:18:08 PM DEBUG [spec] No of edges: 4
09/15/2023 02:19:00 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11'])
09/15/2023 02:19:00 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A11 )
09/15/2023 02:19:00 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11'])
09/15/2023 02:19:00 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A11 )
09/15/2023 02:19:00 PM DEBUG [spec] spec: [H^1 A11]^[0, 3] 
09/15/2023 02:19:00 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 1 A11 ) 0 3 )
Directed: True
Multi: False
Props: {'A11': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (0, 2, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 3, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (4, 5, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (5, 6, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'})]
		
09/15/2023 02:19:00 PM DEBUG [spec] No of nodes: 7
09/15/2023 02:19:00 PM DEBUG [spec] No of edges: 9
09/15/2023 02:19:00 PM DEBUG [spec] spec: [H^1 A11]^[0, 3] 
09/15/2023 02:19:00 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A11 ) 0 3 )
Directed: True
Multi: False
Props: {'A11': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'})]
		
09/15/2023 02:19:00 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

09/15/2023 02:19:00 PM DEBUG [spec] No of nodes: 3
09/15/2023 02:19:00 PM DEBUG [spec] No of edges: 4
09/15/2023 02:19:00 PM DEBUG [hold] Prop: B Duration: 2 Negation: False Props: set(['B'])
09/15/2023 02:19:00 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 2 B )
09/15/2023 02:19:00 PM DEBUG [hold] Prop: B Duration: 2 Negation: False Props: set(['B'])
09/15/2023 02:19:00 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 B )
09/15/2023 02:19:00 PM DEBUG [spec] spec: [H^2 B]^[0, 3] 
09/15/2023 02:19:00 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 2 B ) 0 3 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (0, 3, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (2, 6, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (3, 4, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 5, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (5, 6, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
09/15/2023 02:19:00 PM DEBUG [spec] No of nodes: 7
09/15/2023 02:19:00 PM DEBUG [spec] No of edges: 7
09/15/2023 02:19:00 PM DEBUG [spec] spec: [H^2 B]^[0, 3] 
09/15/2023 02:19:00 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 2 B ) 0 3 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([3])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (2, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
09/15/2023 02:19:00 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([3])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([3])

09/15/2023 02:19:00 PM DEBUG [spec] No of nodes: 4
09/15/2023 02:19:00 PM DEBUG [spec] No of edges: 6
09/15/2023 02:24:33 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11'])
09/15/2023 02:24:33 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A11 )
09/15/2023 02:24:33 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11'])
09/15/2023 02:24:33 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A11 )
09/15/2023 02:24:33 PM DEBUG [spec] spec: [H^1 A11]^[0, 3] 
09/15/2023 02:24:33 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 1 A11 ) 0 3 )
Directed: True
Multi: False
Props: {'A11': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (0, 2, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 3, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (4, 5, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (5, 6, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'})]
		
09/15/2023 02:24:33 PM DEBUG [spec] No of nodes: 7
09/15/2023 02:24:33 PM DEBUG [spec] No of edges: 9
09/15/2023 02:24:33 PM DEBUG [spec] spec: [H^1 A11]^[0, 3] 
09/15/2023 02:24:33 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A11 ) 0 3 )
Directed: True
Multi: False
Props: {'A11': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A11', 'weight': 0, 'label': u'A11'})]
		
09/15/2023 02:24:33 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

09/15/2023 02:24:33 PM DEBUG [spec] No of nodes: 3
09/15/2023 02:24:33 PM DEBUG [spec] No of edges: 4
09/15/2023 02:24:33 PM DEBUG [hold] Prop: B Duration: 2 Negation: False Props: set(['B'])
09/15/2023 02:24:33 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 2 B )
09/15/2023 02:24:33 PM DEBUG [hold] Prop: B Duration: 2 Negation: False Props: set(['B'])
09/15/2023 02:24:33 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 B )
09/15/2023 02:24:33 PM DEBUG [spec] spec: [H^2 B]^[0, 3] 
09/15/2023 02:24:33 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 2 B ) 0 3 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (0, 3, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (2, 6, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (3, 4, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 5, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (5, 6, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
09/15/2023 02:24:33 PM DEBUG [spec] No of nodes: 7
09/15/2023 02:24:33 PM DEBUG [spec] No of edges: 7
09/15/2023 02:24:33 PM DEBUG [spec] spec: [H^2 B]^[0, 3] 
09/15/2023 02:24:33 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 2 B ) 0 3 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([3])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (2, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
09/15/2023 02:24:33 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([3])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([3])

09/15/2023 02:24:33 PM DEBUG [spec] No of nodes: 4
09/15/2023 02:24:33 PM DEBUG [spec] No of edges: 6
09/15/2023 02:39:46 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:39:46 PM DEBUG [within] Low: 0 High: 2 DFA: (Hold 1 A11 )
09/15/2023 02:39:46 PM DEBUG [hold] Prop: B11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:39:46 PM DEBUG [within] Low: 3 High: 4 DFA: (Hold 1 B11 )
09/15/2023 02:39:46 PM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A11 ) 0 2 ) DFA2: (Repeat (Hold 1 B11 ) 3 4 )
09/15/2023 02:39:46 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:39:46 PM DEBUG [eventually] Low: 0 High: 2 DFA: (Hold 1 A11 )
09/15/2023 02:39:46 PM DEBUG [hold] Prop: B11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:39:46 PM DEBUG [eventually] Low: 3 High: 4 DFA: (Hold 1 B11 )
09/15/2023 02:39:46 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A11 ) 0 2 ) DFA2: (Eventually (Hold 1 B11 ) 3 4 )
09/15/2023 02:39:46 PM DEBUG [spec] spec: [H^1 A11]^[0, 2] * [H^1 B11]^[3, 4]
09/15/2023 02:39:46 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A11 ) 0 2 ) (Repeat (Hold 1 B11 ) 3 4 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B11': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([7])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (0, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 3, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (3, 4, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (4, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (5, 6, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (6, 7, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (8, 9, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (9, 5, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:39:46 PM DEBUG [spec] No of nodes: 10
09/15/2023 02:39:46 PM DEBUG [spec] No of edges: 10
09/15/2023 02:39:46 PM DEBUG [spec] spec: [H^1 A11]^[0, 2] * [H^1 B11]^[3, 4]
09/15/2023 02:39:46 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A11 ) 0 2 ) (Eventually (Hold 1 B11 ) 3 4 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B11': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:39:46 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

09/15/2023 02:39:46 PM DEBUG [spec] No of nodes: 8
09/15/2023 02:39:46 PM DEBUG [spec] No of edges: 11
09/15/2023 02:39:46 PM DEBUG [hold] Prop: A12 Duration: 2 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:39:46 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 2 A12 )
09/15/2023 02:39:46 PM DEBUG [hold] Prop: B12 Duration: 1 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:39:46 PM DEBUG [within] Low: 3 High: 4 DFA: (Hold 1 B12 )
09/15/2023 02:39:46 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A12 ) 0 3 ) DFA2: (Repeat (Hold 1 B12 ) 3 4 )
09/15/2023 02:39:46 PM DEBUG [hold] Prop: A12 Duration: 2 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:39:46 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 A12 )
09/15/2023 02:39:46 PM DEBUG [hold] Prop: B12 Duration: 1 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:39:46 PM DEBUG [eventually] Low: 3 High: 4 DFA: (Hold 1 B12 )
09/15/2023 02:39:46 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A12 ) 0 3 ) DFA2: (Eventually (Hold 1 B12 ) 3 4 )
09/15/2023 02:39:46 PM DEBUG [spec] spec: [H^2 A12]^[0, 3] * [H^1 B12]^[3, 4]
09/15/2023 02:39:46 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A12 ) 0 3 ) (Repeat (Hold 1 B12 ) 3 4 ) )
Directed: True
Multi: False
Props: {'B12': 1, 'A12': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([9])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {})]
Edges: [(0, 1, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (0, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 6, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (3, 4, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (4, 5, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (5, 6, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (6, 10, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (8, 9, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (10, 11, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (11, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:39:46 PM DEBUG [spec] No of nodes: 12
09/15/2023 02:39:46 PM DEBUG [spec] No of edges: 12
09/15/2023 02:39:46 PM DEBUG [spec] spec: [H^2 A12]^[0, 3] * [H^1 B12]^[3, 4]
09/15/2023 02:39:46 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A12 ) 0 3 ) (Eventually (Hold 1 B12 ) 3 4 ) )
Directed: True
Multi: False
Props: {'B12': 1, 'A12': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (3, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (4, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (5, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (7, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (8, 4, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:39:46 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([4])
     Final: set([6])

09/15/2023 02:39:46 PM DEBUG [spec] No of nodes: 9
09/15/2023 02:39:46 PM DEBUG [spec] No of edges: 13
09/15/2023 02:46:31 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:46:31 PM DEBUG [within] Low: 0 High: 2 DFA: (Hold 1 A11 )
09/15/2023 02:46:31 PM DEBUG [hold] Prop: B11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:46:31 PM DEBUG [within] Low: 3 High: 4 DFA: (Hold 1 B11 )
09/15/2023 02:46:31 PM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A11 ) 0 2 ) DFA2: (Repeat (Hold 1 B11 ) 3 4 )
09/15/2023 02:46:31 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:46:31 PM DEBUG [eventually] Low: 0 High: 2 DFA: (Hold 1 A11 )
09/15/2023 02:46:31 PM DEBUG [hold] Prop: B11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:46:31 PM DEBUG [eventually] Low: 3 High: 4 DFA: (Hold 1 B11 )
09/15/2023 02:46:31 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A11 ) 0 2 ) DFA2: (Eventually (Hold 1 B11 ) 3 4 )
09/15/2023 02:46:31 PM DEBUG [spec] spec: [H^1 A11]^[0, 2] * [H^1 B11]^[3, 4]
09/15/2023 02:46:31 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A11 ) 0 2 ) (Repeat (Hold 1 B11 ) 3 4 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B11': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([7])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (0, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 3, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (3, 4, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (4, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (5, 6, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (6, 7, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (8, 9, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (9, 5, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:46:31 PM DEBUG [spec] No of nodes: 10
09/15/2023 02:46:31 PM DEBUG [spec] No of edges: 10
09/15/2023 02:46:31 PM DEBUG [spec] spec: [H^1 A11]^[0, 2] * [H^1 B11]^[3, 4]
09/15/2023 02:46:31 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A11 ) 0 2 ) (Eventually (Hold 1 B11 ) 3 4 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B11': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:46:31 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

09/15/2023 02:46:31 PM DEBUG [spec] No of nodes: 8
09/15/2023 02:46:31 PM DEBUG [spec] No of edges: 11
09/15/2023 02:46:31 PM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:46:31 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A12 )
09/15/2023 02:46:31 PM DEBUG [hold] Prop: B12 Duration: 1 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:46:31 PM DEBUG [within] Low: 3 High: 4 DFA: (Hold 1 B12 )
09/15/2023 02:46:31 PM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A12 ) 0 3 ) DFA2: (Repeat (Hold 1 B12 ) 3 4 )
09/15/2023 02:46:31 PM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:46:31 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A12 )
09/15/2023 02:46:31 PM DEBUG [hold] Prop: B12 Duration: 1 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:46:31 PM DEBUG [eventually] Low: 3 High: 4 DFA: (Hold 1 B12 )
09/15/2023 02:46:31 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A12 ) 0 3 ) DFA2: (Eventually (Hold 1 B12 ) 3 4 )
09/15/2023 02:46:31 PM DEBUG [spec] spec: [H^1 A12]^[0, 3] * [H^1 B12]^[3, 4]
09/15/2023 02:46:31 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A12 ) 0 3 ) (Repeat (Hold 1 B12 ) 3 4 ) )
Directed: True
Multi: False
Props: {'B12': 1, 'A12': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([9])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {})]
Edges: [(0, 1, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (0, 2, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 3, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 4, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (4, 5, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (5, 6, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (6, 10, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 8, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (8, 9, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (10, 11, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (11, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:46:31 PM DEBUG [spec] No of nodes: 12
09/15/2023 02:46:31 PM DEBUG [spec] No of edges: 14
09/15/2023 02:46:31 PM DEBUG [spec] spec: [H^1 A12]^[0, 3] * [H^1 B12]^[3, 4]
09/15/2023 02:46:31 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A12 ) 0 3 ) (Eventually (Hold 1 B12 ) 3 4 ) )
Directed: True
Multi: False
Props: {'B12': 1, 'A12': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:46:31 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

09/15/2023 02:46:31 PM DEBUG [spec] No of nodes: 8
09/15/2023 02:46:31 PM DEBUG [spec] No of edges: 11
09/15/2023 02:47:21 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:47:21 PM DEBUG [within] Low: 0 High: 2 DFA: (Hold 1 A11 )
09/15/2023 02:47:21 PM DEBUG [hold] Prop: B11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:47:21 PM DEBUG [within] Low: 3 High: 4 DFA: (Hold 1 B11 )
09/15/2023 02:47:21 PM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A11 ) 0 2 ) DFA2: (Repeat (Hold 1 B11 ) 3 4 )
09/15/2023 02:47:21 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:47:21 PM DEBUG [eventually] Low: 0 High: 2 DFA: (Hold 1 A11 )
09/15/2023 02:47:21 PM DEBUG [hold] Prop: B11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:47:21 PM DEBUG [eventually] Low: 3 High: 4 DFA: (Hold 1 B11 )
09/15/2023 02:47:21 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A11 ) 0 2 ) DFA2: (Eventually (Hold 1 B11 ) 3 4 )
09/15/2023 02:47:21 PM DEBUG [spec] spec: [H^1 A11]^[0, 2] * [H^1 B11]^[3, 4]
09/15/2023 02:47:21 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A11 ) 0 2 ) (Repeat (Hold 1 B11 ) 3 4 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B11': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([7])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (0, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 3, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (3, 4, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (4, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (5, 6, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (6, 7, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (8, 9, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (9, 5, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:47:21 PM DEBUG [spec] No of nodes: 10
09/15/2023 02:47:21 PM DEBUG [spec] No of edges: 10
09/15/2023 02:47:21 PM DEBUG [spec] spec: [H^1 A11]^[0, 2] * [H^1 B11]^[3, 4]
09/15/2023 02:47:21 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A11 ) 0 2 ) (Eventually (Hold 1 B11 ) 3 4 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B11': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:47:21 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

09/15/2023 02:47:21 PM DEBUG [spec] No of nodes: 8
09/15/2023 02:47:21 PM DEBUG [spec] No of edges: 11
09/15/2023 02:47:21 PM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:47:21 PM DEBUG [within] Low: 0 High: 2 DFA: (Hold 1 A12 )
09/15/2023 02:47:21 PM DEBUG [hold] Prop: B12 Duration: 1 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:47:21 PM DEBUG [within] Low: 3 High: 4 DFA: (Hold 1 B12 )
09/15/2023 02:47:21 PM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A12 ) 0 2 ) DFA2: (Repeat (Hold 1 B12 ) 3 4 )
09/15/2023 02:47:21 PM DEBUG [hold] Prop: A12 Duration: 1 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:47:21 PM DEBUG [eventually] Low: 0 High: 2 DFA: (Hold 1 A12 )
09/15/2023 02:47:21 PM DEBUG [hold] Prop: B12 Duration: 1 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:47:21 PM DEBUG [eventually] Low: 3 High: 4 DFA: (Hold 1 B12 )
09/15/2023 02:47:21 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A12 ) 0 2 ) DFA2: (Eventually (Hold 1 B12 ) 3 4 )
09/15/2023 02:47:21 PM DEBUG [spec] spec: [H^1 A12]^[0, 2] * [H^1 B12]^[3, 4]
09/15/2023 02:47:21 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A12 ) 0 2 ) (Repeat (Hold 1 B12 ) 3 4 ) )
Directed: True
Multi: False
Props: {'B12': 1, 'A12': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([7])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {})]
Edges: [(0, 1, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (0, 2, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 3, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (3, 4, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (4, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (5, 6, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (6, 7, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (8, 9, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (9, 5, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:47:21 PM DEBUG [spec] No of nodes: 10
09/15/2023 02:47:21 PM DEBUG [spec] No of edges: 10
09/15/2023 02:47:21 PM DEBUG [spec] spec: [H^1 A12]^[0, 2] * [H^1 B12]^[3, 4]
09/15/2023 02:47:21 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A12 ) 0 2 ) (Eventually (Hold 1 B12 ) 3 4 ) )
Directed: True
Multi: False
Props: {'B12': 1, 'A12': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:47:21 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

09/15/2023 02:47:21 PM DEBUG [spec] No of nodes: 8
09/15/2023 02:47:21 PM DEBUG [spec] No of edges: 11
09/15/2023 02:56:57 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:56:57 PM DEBUG [within] Low: 0 High: 2 DFA: (Hold 1 A11 )
09/15/2023 02:56:57 PM DEBUG [hold] Prop: B11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:56:57 PM DEBUG [within] Low: 3 High: 4 DFA: (Hold 1 B11 )
09/15/2023 02:56:57 PM DEBUG [concatenation] DFA1: (Repeat (Hold 1 A11 ) 0 2 ) DFA2: (Repeat (Hold 1 B11 ) 3 4 )
09/15/2023 02:56:57 PM DEBUG [hold] Prop: A11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:56:57 PM DEBUG [eventually] Low: 0 High: 2 DFA: (Hold 1 A11 )
09/15/2023 02:56:57 PM DEBUG [hold] Prop: B11 Duration: 1 Negation: False Props: set(['A11', 'B11'])
09/15/2023 02:56:57 PM DEBUG [eventually] Low: 3 High: 4 DFA: (Hold 1 B11 )
09/15/2023 02:56:57 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A11 ) 0 2 ) DFA2: (Eventually (Hold 1 B11 ) 3 4 )
09/15/2023 02:56:57 PM DEBUG [spec] spec: [H^1 A11]^[0, 2] * [H^1 B11]^[3, 4]
09/15/2023 02:56:57 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 1 A11 ) 0 2 ) (Repeat (Hold 1 B11 ) 3 4 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B11': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([7])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {})]
Edges: [(0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (0, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 3, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (3, 4, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (4, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (5, 6, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (6, 7, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (8, 9, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (9, 5, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:56:57 PM DEBUG [spec] No of nodes: 10
09/15/2023 02:56:57 PM DEBUG [spec] No of edges: 10
09/15/2023 02:56:57 PM DEBUG [spec] spec: [H^1 A11]^[0, 2] * [H^1 B11]^[3, 4]
09/15/2023 02:56:57 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A11 ) 0 2 ) (Eventually (Hold 1 B11 ) 3 4 ) )
Directed: True
Multi: False
Props: {'A11': 1, 'B11': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A11', 'weight': 0, 'label': u'A11'}), (2, 6, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B11', 'weight': 0, 'label': u'B11'}), (6, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (7, 3, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:56:57 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

09/15/2023 02:56:57 PM DEBUG [spec] No of nodes: 8
09/15/2023 02:56:57 PM DEBUG [spec] No of edges: 11
09/15/2023 02:56:57 PM DEBUG [hold] Prop: A12 Duration: 2 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:56:57 PM DEBUG [within] Low: 0 High: 2 DFA: (Hold 2 A12 )
09/15/2023 02:56:57 PM DEBUG [hold] Prop: B12 Duration: 1 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:56:57 PM DEBUG [within] Low: 3 High: 4 DFA: (Hold 1 B12 )
09/15/2023 02:56:57 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A12 ) 0 2 ) DFA2: (Repeat (Hold 1 B12 ) 3 4 )
09/15/2023 02:56:57 PM DEBUG [hold] Prop: A12 Duration: 2 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:56:57 PM DEBUG [eventually] Low: 0 High: 2 DFA: (Hold 2 A12 )
09/15/2023 02:56:57 PM DEBUG [hold] Prop: B12 Duration: 1 Negation: False Props: set(['B12', 'A12'])
09/15/2023 02:56:57 PM DEBUG [eventually] Low: 3 High: 4 DFA: (Hold 1 B12 )
09/15/2023 02:56:57 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A12 ) 0 2 ) DFA2: (Eventually (Hold 1 B12 ) 3 4 )
09/15/2023 02:56:57 PM DEBUG [spec] spec: [H^2 A12]^[0, 2] * [H^1 B12]^[3, 4]
09/15/2023 02:56:57 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Repeat (Hold 2 A12 ) 0 2 ) (Repeat (Hold 1 B12 ) 3 4 ) )
Directed: True
Multi: False
Props: {'B12': 1, 'A12': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {})]
Edges: [(0, 1, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (1, 2, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 3, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (3, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (4, 5, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (5, 6, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (7, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (8, 4, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:56:57 PM DEBUG [spec] No of nodes: 9
09/15/2023 02:56:57 PM DEBUG [spec] No of edges: 8
09/15/2023 02:56:57 PM DEBUG [spec] spec: [H^2 A12]^[0, 2] * [H^1 B12]^[3, 4]
09/15/2023 02:56:57 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A12 ) 0 2 ) (Eventually (Hold 1 B12 ) 3 4 ) )
Directed: True
Multi: False
Props: {'B12': 1, 'A12': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'A12', 'weight': 0, 'label': u'A12'}), (3, 7, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (4, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (5, 4, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'B12', 'weight': 0, 'label': u'B12'}), (7, 8, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (8, 4, {'input': set([0, 1, 2, 3]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
09/15/2023 02:56:57 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([4])
     Final: set([6])

09/15/2023 02:56:57 PM DEBUG [spec] No of nodes: 9
09/15/2023 02:56:57 PM DEBUG [spec] No of edges: 13
09/15/2023 07:23:59 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
09/15/2023 07:23:59 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A )
09/15/2023 07:23:59 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
09/15/2023 07:23:59 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A )
09/15/2023 07:23:59 PM DEBUG [spec] spec: [H^1 A]^[0, 3] 
09/15/2023 07:23:59 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 1 A ) 0 3 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 2, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 3, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (4, 5, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 6, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'})]
		
09/15/2023 07:23:59 PM DEBUG [spec] No of nodes: 7
09/15/2023 07:23:59 PM DEBUG [spec] No of edges: 9
09/15/2023 07:23:59 PM DEBUG [spec] spec: [H^1 A]^[0, 3] 
09/15/2023 07:23:59 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 0 3 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'})]
		
09/15/2023 07:23:59 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

09/15/2023 07:23:59 PM DEBUG [spec] No of nodes: 3
09/15/2023 07:23:59 PM DEBUG [spec] No of edges: 4
09/15/2023 07:23:59 PM DEBUG [hold] Prop: B Duration: 2 Negation: False Props: set(['B'])
09/15/2023 07:23:59 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 2 B )
09/15/2023 07:23:59 PM DEBUG [hold] Prop: B Duration: 2 Negation: False Props: set(['B'])
09/15/2023 07:23:59 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 B )
09/15/2023 07:23:59 PM DEBUG [spec] spec: [H^2 B]^[0, 3]
09/15/2023 07:23:59 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 2 B ) 0 3 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (0, 3, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (2, 6, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (3, 4, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 5, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (5, 6, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
09/15/2023 07:23:59 PM DEBUG [spec] No of nodes: 7
09/15/2023 07:23:59 PM DEBUG [spec] No of edges: 7
09/15/2023 07:23:59 PM DEBUG [spec] spec: [H^2 B]^[0, 3]
09/15/2023 07:23:59 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 2 B ) 0 3 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([3])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (2, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
09/15/2023 07:23:59 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([3])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([3])

09/15/2023 07:23:59 PM DEBUG [spec] No of nodes: 4
09/15/2023 07:23:59 PM DEBUG [spec] No of edges: 6
09/27/2023 06:47:44 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
09/27/2023 06:47:44 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A )
09/27/2023 06:47:44 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
09/27/2023 06:47:44 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A )
09/27/2023 06:47:44 PM DEBUG [spec] spec: [H^1 A]^[0, 3] 
09/27/2023 06:47:44 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 1 A ) 0 3 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 2, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 3, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (4, 5, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 6, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'})]
		
09/27/2023 06:47:44 PM DEBUG [spec] No of nodes: 7
09/27/2023 06:47:44 PM DEBUG [spec] No of edges: 9
09/27/2023 06:47:44 PM DEBUG [spec] spec: [H^1 A]^[0, 3] 
09/27/2023 06:47:44 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 0 3 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'})]
		
09/27/2023 06:47:44 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

09/27/2023 06:47:44 PM DEBUG [spec] No of nodes: 3
09/27/2023 06:47:44 PM DEBUG [spec] No of edges: 4
09/27/2023 06:47:44 PM DEBUG [hold] Prop: B Duration: 2 Negation: False Props: set(['B'])
09/27/2023 06:47:44 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 2 B )
09/27/2023 06:47:44 PM DEBUG [hold] Prop: B Duration: 2 Negation: False Props: set(['B'])
09/27/2023 06:47:44 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 B )
09/27/2023 06:47:44 PM DEBUG [spec] spec: [H^2 B]^[0, 3]
09/27/2023 06:47:44 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 2 B ) 0 3 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (0, 3, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (2, 6, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (3, 4, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 5, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (5, 6, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
09/27/2023 06:47:44 PM DEBUG [spec] No of nodes: 7
09/27/2023 06:47:44 PM DEBUG [spec] No of edges: 7
09/27/2023 06:47:44 PM DEBUG [spec] spec: [H^2 B]^[0, 3]
09/27/2023 06:47:44 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 2 B ) 0 3 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([3])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (2, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
09/27/2023 06:47:44 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([3])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([3])

09/27/2023 06:47:44 PM DEBUG [spec] No of nodes: 4
09/27/2023 06:47:44 PM DEBUG [spec] No of edges: 6
09/27/2023 06:48:23 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
09/27/2023 06:48:23 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 A )
09/27/2023 06:48:23 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
09/27/2023 06:48:23 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 A )
09/27/2023 06:48:23 PM DEBUG [spec] spec: [H^1 A]^[0, 3] 
09/27/2023 06:48:23 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 1 A ) 0 3 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 2, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 6, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 3, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 4, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 6, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (4, 5, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 6, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'})]
		
09/27/2023 06:48:23 PM DEBUG [spec] No of nodes: 7
09/27/2023 06:48:23 PM DEBUG [spec] No of edges: 9
09/27/2023 06:48:23 PM DEBUG [spec] spec: [H^1 A]^[0, 3] 
09/27/2023 06:48:23 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 0 3 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'})]
		
09/27/2023 06:48:23 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

09/27/2023 06:48:23 PM DEBUG [spec] No of nodes: 3
09/27/2023 06:48:23 PM DEBUG [spec] No of edges: 4
09/27/2023 06:48:23 PM DEBUG [hold] Prop: B Duration: 2 Negation: False Props: set(['B'])
09/27/2023 06:48:23 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 2 B )
09/27/2023 06:48:23 PM DEBUG [hold] Prop: B Duration: 2 Negation: False Props: set(['B'])
09/27/2023 06:48:23 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 B )
09/27/2023 06:48:23 PM DEBUG [spec] spec: [H^2 B]^[0, 3]
09/27/2023 06:48:23 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 2 B ) 0 3 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (0, 3, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (2, 6, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (3, 4, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 5, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (5, 6, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
09/27/2023 06:48:23 PM DEBUG [spec] No of nodes: 7
09/27/2023 06:48:23 PM DEBUG [spec] No of edges: 7
09/27/2023 06:48:23 PM DEBUG [spec] spec: [H^2 B]^[0, 3]
09/27/2023 06:48:23 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 2 B ) 0 3 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [0]
Final: set([3])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (2, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
09/27/2023 06:48:23 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([3])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([3])

09/27/2023 06:48:23 PM DEBUG [spec] No of nodes: 4
09/27/2023 06:48:23 PM DEBUG [spec] No of edges: 6
09/27/2023 07:02:49 PM DEBUG [hold] Prop: I1 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
09/27/2023 07:02:49 PM DEBUG [eventually] Low: 0 High: 2 DFA: (Hold 1 I1 )
09/27/2023 07:02:49 PM DEBUG [hold] Prop: R1 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
09/27/2023 07:02:49 PM DEBUG [eventually] Low: 3 High: 5 DFA: (Hold 1 R1 )
09/27/2023 07:02:49 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 I1 ) 0 2 ) DFA2: (Eventually (Hold 1 R1 ) 3 5 )
09/27/2023 07:02:49 PM DEBUG [hold] Prop: R2 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
09/27/2023 07:02:49 PM DEBUG [eventually] Low: 6 High: 10 DFA: (Hold 1 R2 )
09/27/2023 07:02:49 PM DEBUG [hold] Prop: R4 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
09/27/2023 07:02:49 PM DEBUG [eventually] Low: 6 High: 10 DFA: (Hold 1 R4 )
09/27/2023 07:02:49 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 R2 ) 6 10 ) DFA2: (Eventually (Hold 1 R4 ) 6 10 )
09/27/2023 07:02:49 PM DEBUG [hold] Prop: R3 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
09/27/2023 07:02:49 PM DEBUG [eventually] Low: 11 High: 14 DFA: (Hold 1 R3 )
09/27/2023 07:02:49 PM DEBUG [hold] Prop: R5 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
09/27/2023 07:02:49 PM DEBUG [eventually] Low: 11 High: 14 DFA: (Hold 1 R5 )
09/27/2023 07:02:49 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 R3 ) 11 14 ) DFA2: (Eventually (Hold 1 R5 ) 11 14 )
09/27/2023 07:02:49 PM INFO No trap states were added.
09/27/2023 07:02:49 PM INFO No trap states were added.
09/27/2023 07:02:50 PM DEBUG state: Concatenation 
 init: [(3, 3)]
 final: [(11, 16)]
09/27/2023 07:02:50 PM DEBUG state: Eventually 
 init: [(3, 3)]
 final: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
09/27/2023 07:02:50 PM DEBUG state: Hold 
 init: [(0, 20), (0, 10), (0, 17), (0, 1), (0, 14), (0, 21), (0, 24), (0, 11), (0, 18), (0, 2), (0, 15), (0, 22), (0, 25), (0, 19), (0, 9), (0, 0), (0, 12), (0, 23), (0, 26), (0, 13)]
 final: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
09/27/2023 07:02:50 PM DEBUG state: Eventually 
 init: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
 final: [(11, 16)]
09/27/2023 07:02:50 PM DEBUG state: Hold 
 init: [(9, 26), (9, 0), (9, 21), (9, 14), (9, 19), (9, 25), (9, 20), (9, 2), (9, 23), (9, 18), (9, 24), (9, 1), (9, 22), (9, 15), (9, 17)]
 final: [(11, 16)]
09/27/2023 07:02:50 PM DEBUG state: Concatenation 
 init: [(3, 3)]
 final: [(11, 16)]
09/27/2023 07:02:50 PM DEBUG state: Eventually 
 init: [(3, 3)]
 final: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
09/27/2023 07:02:50 PM DEBUG state: Hold 
 init: [(9, 0), (16, 0), (13, 0), (15, 0), (1, 0), (10, 0), (12, 0), (14, 0), (0, 0), (2, 0)]
 final: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
09/27/2023 07:02:50 PM DEBUG state: Eventually 
 init: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
 final: [(11, 16)]
09/27/2023 07:02:50 PM DEBUG state: Hold 
 init: [(15, 14), (9, 14), (10, 14), (0, 14), (16, 14), (1, 14), (12, 14), (2, 14), (14, 14), (13, 14)]
 final: [(11, 16)]
09/27/2023 07:02:50 PM DEBUG [union] DFA1: (Concat (Eventually (Hold 1 R2 ) 6 10 ) (Eventually (Hold 1 R4 ) 6 10 ) ) DFA2: (Concat (Eventually (Hold 1 R3 ) 11 14 ) (Eventually (Hold 1 R5 ) 11 14 ) )
09/27/2023 07:02:50 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 1 I1 ) 0 2 ) (Eventually (Hold 1 R1 ) 3 5 ) ) DFA2: (Union (Concat (Eventually (Hold 1 R2 ) 6 10 ) (Eventually (Hold 1 R4 ) 6 10 ) ) (Concat (Eventually (Hold 1 R3 ) 11 14 ) (Eventually (Hold 1 R5 ) 11 14 ) ) )
09/27/2023 07:02:50 PM DEBUG [hold] Prop: R6 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
09/27/2023 07:02:50 PM DEBUG [eventually] Low: 15 High: 20 DFA: (Hold 1 R6 )
09/27/2023 07:02:50 PM DEBUG [concatenation] DFA1: (Concat (Concat (Eventually (Hold 1 I1 ) 0 2 ) (Eventually (Hold 1 R1 ) 3 5 ) ) (Union (Concat (Eventually (Hold 1 R2 ) 6 10 ) (Eventually (Hold 1 R4 ) 6 10 ) ) (Concat (Eventually (Hold 1 R3 ) 11 14 ) (Eventually (Hold 1 R5 ) 11 14 ) ) ) ) DFA2: (Eventually (Hold 1 R6 ) 15 20 )
09/27/2023 07:02:50 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
09/27/2023 07:02:50 PM DEBUG [eventually] Low: 0 High: 2 DFA: (Hold 1 B )
09/27/2023 07:02:50 PM DEBUG [hold] Prop: R7 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
09/27/2023 07:02:50 PM DEBUG [eventually] Low: 3 High: 5 DFA: (Hold 1 R7 )
09/27/2023 07:02:50 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 B ) 0 2 ) DFA2: (Eventually (Hold 1 R7 ) 3 5 )
09/27/2023 07:02:50 PM DEBUG [hold] Prop: R8 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
09/27/2023 07:02:50 PM DEBUG [eventually] Low: 6 High: 10 DFA: (Hold 1 R8 )
09/27/2023 07:02:50 PM DEBUG [hold] Prop: R10 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
09/27/2023 07:02:50 PM DEBUG [eventually] Low: 6 High: 10 DFA: (Hold 1 R10 )
09/27/2023 07:02:50 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 R8 ) 6 10 ) DFA2: (Eventually (Hold 1 R10 ) 6 10 )
09/27/2023 07:02:50 PM DEBUG [hold] Prop: R9 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
09/27/2023 07:02:50 PM DEBUG [eventually] Low: 11 High: 14 DFA: (Hold 1 R9 )
09/27/2023 07:02:50 PM DEBUG [hold] Prop: R11 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
09/27/2023 07:02:50 PM DEBUG [eventually] Low: 11 High: 14 DFA: (Hold 1 R11 )
09/27/2023 07:02:50 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 R9 ) 11 14 ) DFA2: (Eventually (Hold 1 R11 ) 11 14 )
09/27/2023 07:02:50 PM INFO No trap states were added.
09/27/2023 07:02:50 PM INFO No trap states were added.
09/27/2023 07:02:50 PM DEBUG state: Concatenation 
 init: [(3, 3)]
 final: [(11, 16)]
09/27/2023 07:02:50 PM DEBUG state: Eventually 
 init: [(3, 3)]
 final: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
09/27/2023 07:02:50 PM DEBUG state: Hold 
 init: [(0, 20), (0, 10), (0, 17), (0, 1), (0, 14), (0, 21), (0, 24), (0, 11), (0, 18), (0, 2), (0, 15), (0, 22), (0, 25), (0, 19), (0, 9), (0, 0), (0, 12), (0, 23), (0, 26), (0, 13)]
 final: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
09/27/2023 07:02:50 PM DEBUG state: Eventually 
 init: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
 final: [(11, 16)]
09/27/2023 07:02:50 PM DEBUG state: Hold 
 init: [(9, 26), (9, 0), (9, 21), (9, 14), (9, 19), (9, 25), (9, 20), (9, 2), (9, 23), (9, 18), (9, 24), (9, 1), (9, 22), (9, 15), (9, 17)]
 final: [(11, 16)]
09/27/2023 07:02:50 PM DEBUG state: Concatenation 
 init: [(3, 3)]
 final: [(11, 16)]
09/27/2023 07:02:50 PM DEBUG state: Eventually 
 init: [(3, 3)]
 final: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
09/27/2023 07:02:50 PM DEBUG state: Hold 
 init: [(9, 0), (16, 0), (13, 0), (15, 0), (1, 0), (10, 0), (12, 0), (14, 0), (0, 0), (2, 0)]
 final: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
09/27/2023 07:02:50 PM DEBUG state: Eventually 
 init: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
 final: [(11, 16)]
09/27/2023 07:02:50 PM DEBUG state: Hold 
 init: [(15, 14), (9, 14), (10, 14), (0, 14), (16, 14), (1, 14), (12, 14), (2, 14), (14, 14), (13, 14)]
 final: [(11, 16)]
09/27/2023 07:02:50 PM DEBUG [union] DFA1: (Concat (Eventually (Hold 1 R8 ) 6 10 ) (Eventually (Hold 1 R10 ) 6 10 ) ) DFA2: (Concat (Eventually (Hold 1 R9 ) 11 14 ) (Eventually (Hold 1 R11 ) 11 14 ) )
09/27/2023 07:02:50 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 1 B ) 0 2 ) (Eventually (Hold 1 R7 ) 3 5 ) ) DFA2: (Union (Concat (Eventually (Hold 1 R8 ) 6 10 ) (Eventually (Hold 1 R10 ) 6 10 ) ) (Concat (Eventually (Hold 1 R9 ) 11 14 ) (Eventually (Hold 1 R11 ) 11 14 ) ) )
09/27/2023 07:02:51 PM DEBUG [hold] Prop: R12 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
09/27/2023 07:02:51 PM DEBUG [eventually] Low: 15 High: 20 DFA: (Hold 1 R12 )
09/27/2023 07:02:51 PM DEBUG [concatenation] DFA1: (Concat (Concat (Eventually (Hold 1 B ) 0 2 ) (Eventually (Hold 1 R7 ) 3 5 ) ) (Union (Concat (Eventually (Hold 1 R8 ) 6 10 ) (Eventually (Hold 1 R10 ) 6 10 ) ) (Concat (Eventually (Hold 1 R9 ) 11 14 ) (Eventually (Hold 1 R11 ) 11 14 ) ) ) ) DFA2: (Eventually (Hold 1 R12 ) 15 20 )
09/27/2023 07:13:05 PM DEBUG state: Concatenation 
 init: [(0, 109), (0, 29), (0, 50), (0, 141), (0, 87), (0, 162), (0, 76), (0, 97), (0, 17), (0, 54), (0, 129), (0, 43), (0, 166), (0, 64), (0, 101), (0, 21), (0, 10), (0, 133), (0, 47), (0, 186), (0, 68), (0, 121), (0, 57), (0, 14), (0, 153), (0, 35), (0, 190), (0, 88), (0, 125), (0, 2), (0, 157), (0, 39), (0, 178), (0, 92), (0, 113), (0, 6), (0, 145), (0, 59), (0, 182), (0, 80), (0, 171), (0, 117), (0, 192), (0, 106), (0, 26), (0, 149), (0, 63), (0, 138), (0, 84), (0, 175), (0, 73), (0, 94), (0, 110), (0, 30), (0, 51), (0, 142), (0, 40), (0, 163), (0, 77), (0, 98), (0, 18), (0, 55), (0, 130), (0, 44), (0, 167), (0, 65), (0, 102), (0, 22), (0, 11), (0, 134), (0, 32), (0, 187), (0, 69), (0, 122), (0, 15), (0, 154), (0, 36), (0, 191), (0, 89), (0, 126), (0, 3), (0, 158), (0, 56), (0, 179), (0, 93), (0, 168), (0, 114), (0, 7), (0, 146), (0, 60), (0, 183), (0, 81), (0, 172), (0, 118), (0, 193), (0, 107), (0, 27), (0, 150), (0, 48), (0, 139), (0, 85), (0, 160), (0, 74), (0, 111), (0, 31), (0, 52), (0, 143), (0, 41), (0, 164), (0, 78), (0, 99), (0, 19), (0, 8), (0, 131), (0, 45), (0, 184), (0, 66), (0, 103), (0, 23), (0, 135), (0, 33), (0, 188), (0, 70), (0, 123), (0, 0), (0, 155), (0, 37), (0, 176), (0, 90), (0, 127), (0, 4), (0, 159), (0, 180), (0, 169), (0, 115), (0, 104), (0, 24), (0, 147), (0, 61), (0, 136), (0, 82), (0, 173), (0, 119), (0, 194), (0, 108), (0, 28), (0, 151), (0, 49), (0, 140), (0, 86), (0, 161), (0, 75), (0, 96), (0, 16), (0, 12), (0, 53), (0, 128), (0, 42), (0, 165), (0, 79), (0, 100), (0, 20), (0, 9), (0, 132), (0, 46), (0, 185), (0, 67), (0, 120), (0, 13), (0, 152), (0, 34), (0, 189), (0, 71), (0, 124), (0, 1), (0, 156), (0, 38), (0, 177), (0, 91), (0, 112), (0, 5), (0, 144), (0, 58), (0, 181), (0, 95), (0, 170), (0, 116), (0, 105), (0, 25), (0, 148), (0, 62), (0, 137), (0, 83), (0, 174), (0, 72), (0, 195)]
 final: [(181, 68), (181, 154), (181, 111), (181, 10), (181, 55), (181, 64), (181, 107), (181, 129), (181, 22), (181, 49), (181, 133), (181, 119), (181, 141), (181, 18), (181, 168), (181, 61), (181, 195), (181, 72), (181, 115), (181, 137), (181, 60), (181, 30), (181, 57), (181, 53), (181, 36), (181, 84), (181, 152), (181, 127), (181, 149), (181, 26), (181, 5), (181, 32), (181, 80), (181, 123), (181, 31), (181, 180), (181, 145), (181, 102), (181, 167), (181, 44), (181, 1), (181, 92), (181, 71), (181, 157), (181, 58), (181, 98), (181, 184), (181, 13), (181, 51), (181, 40), (181, 88), (181, 67), (181, 153), (181, 110), (181, 132), (181, 9), (181, 175), (181, 29), (181, 106), (181, 176), (181, 128), (181, 21), (181, 171), (181, 15), (181, 75), (181, 172), (181, 56), (181, 78), (181, 118), (181, 140), (181, 17), (181, 183), (181, 39), (181, 194), (181, 87), (181, 114), (181, 136), (181, 179), (181, 150), (181, 189), (181, 35), (181, 83), (181, 27), (181, 126), (181, 148), (181, 25), (181, 20), (181, 95), (181, 170), (181, 6), (181, 76), (181, 122), (181, 144), (181, 101), (181, 187), (181, 63), (181, 166), (181, 43), (181, 186), (181, 91), (181, 70), (181, 156), (181, 97), (181, 135), (181, 12), (181, 162), (181, 66), (181, 134), (181, 109), (181, 131), (181, 8), (181, 191), (181, 4), (181, 105), (181, 143), (181, 74), (181, 47), (181, 117), (181, 139), (181, 16), (181, 182), (181, 59), (181, 38), (181, 86), (181, 113), (181, 151), (181, 28), (181, 160), (181, 178), (181, 188), (181, 34), (181, 2), (181, 82), (181, 125), (181, 147), (181, 24), (181, 190), (181, 3), (181, 52), (181, 46), (181, 94), (181, 121), (181, 159), (181, 100), (181, 165), (181, 42), (181, 90), (181, 69), (181, 155), (181, 96), (181, 193), (181, 11), (181, 23), (181, 161), (181, 54), (181, 163), (181, 0), (181, 65), (181, 79), (181, 108), (181, 130), (181, 173), (181, 50), (181, 104), (181, 142), (181, 169), (181, 62), (181, 73), (181, 116), (181, 138), (181, 181), (181, 37), (181, 14), (181, 192), (181, 85), (181, 7), (181, 77), (181, 112), (181, 177), (181, 48), (181, 33), (181, 81), (181, 124), (181, 146), (181, 103), (181, 174), (181, 45), (181, 93), (181, 120), (181, 158), (181, 99), (181, 19), (181, 185), (181, 164), (181, 41), (181, 89)]
09/27/2023 07:13:05 PM DEBUG state: Concatenation 
 init: [(0, 109), (0, 29), (0, 50), (0, 141), (0, 87), (0, 162), (0, 76), (0, 97), (0, 17), (0, 54), (0, 129), (0, 43), (0, 166), (0, 64), (0, 101), (0, 21), (0, 10), (0, 133), (0, 47), (0, 186), (0, 68), (0, 121), (0, 57), (0, 14), (0, 153), (0, 35), (0, 190), (0, 88), (0, 125), (0, 2), (0, 157), (0, 39), (0, 178), (0, 92), (0, 113), (0, 6), (0, 145), (0, 59), (0, 182), (0, 80), (0, 171), (0, 117), (0, 192), (0, 106), (0, 26), (0, 149), (0, 63), (0, 138), (0, 84), (0, 175), (0, 73), (0, 94), (0, 110), (0, 30), (0, 51), (0, 142), (0, 40), (0, 163), (0, 77), (0, 98), (0, 18), (0, 55), (0, 130), (0, 44), (0, 167), (0, 65), (0, 102), (0, 22), (0, 11), (0, 134), (0, 32), (0, 187), (0, 69), (0, 122), (0, 15), (0, 154), (0, 36), (0, 191), (0, 89), (0, 126), (0, 3), (0, 158), (0, 56), (0, 179), (0, 93), (0, 168), (0, 114), (0, 7), (0, 146), (0, 60), (0, 183), (0, 81), (0, 172), (0, 118), (0, 193), (0, 107), (0, 27), (0, 150), (0, 48), (0, 139), (0, 85), (0, 160), (0, 74), (0, 111), (0, 31), (0, 52), (0, 143), (0, 41), (0, 164), (0, 78), (0, 99), (0, 19), (0, 8), (0, 131), (0, 45), (0, 184), (0, 66), (0, 103), (0, 23), (0, 135), (0, 33), (0, 188), (0, 70), (0, 123), (0, 0), (0, 155), (0, 37), (0, 176), (0, 90), (0, 127), (0, 4), (0, 159), (0, 180), (0, 169), (0, 115), (0, 104), (0, 24), (0, 147), (0, 61), (0, 136), (0, 82), (0, 173), (0, 119), (0, 194), (0, 108), (0, 28), (0, 151), (0, 49), (0, 140), (0, 86), (0, 161), (0, 75), (0, 96), (0, 16), (0, 12), (0, 53), (0, 128), (0, 42), (0, 165), (0, 79), (0, 100), (0, 20), (0, 9), (0, 132), (0, 46), (0, 185), (0, 67), (0, 120), (0, 13), (0, 152), (0, 34), (0, 189), (0, 71), (0, 124), (0, 1), (0, 156), (0, 38), (0, 177), (0, 91), (0, 112), (0, 5), (0, 144), (0, 58), (0, 181), (0, 95), (0, 170), (0, 116), (0, 105), (0, 25), (0, 148), (0, 62), (0, 137), (0, 83), (0, 174), (0, 72), (0, 195)]
 final: [(54, 13), (54, 26), (54, 189), (54, 91), (54, 124), (54, 194), (54, 152), (54, 58), (54, 177), (54, 63), (54, 95), (54, 112), (54, 38), (54, 181), (54, 83), (54, 116), (54, 105), (54, 17), (54, 175), (54, 25), (54, 50), (54, 24), (54, 87), (54, 72), (54, 3), (54, 151), (54, 109), (54, 10), (54, 61), (54, 43), (54, 166), (54, 76), (54, 97), (54, 47), (54, 129), (54, 186), (54, 64), (54, 101), (54, 23), (54, 133), (54, 68), (54, 1), (54, 121), (54, 156), (54, 153), (54, 39), (54, 178), (54, 88), (54, 142), (54, 125), (54, 45), (54, 157), (54, 59), (54, 182), (54, 184), (54, 92), (54, 171), (54, 113), (54, 21), (54, 163), (54, 106), (54, 28), (54, 170), (54, 145), (54, 138), (54, 80), (54, 7), (54, 117), (54, 192), (54, 110), (54, 14), (54, 30), (54, 149), (54, 51), (54, 84), (54, 56), (54, 73), (54, 98), (54, 35), (54, 18), (54, 55), (54, 130), (54, 42), (54, 190), (54, 77), (54, 161), (54, 102), (54, 11), (54, 134), (54, 44), (54, 5), (54, 65), (54, 122), (54, 144), (54, 155), (54, 15), (54, 62), (54, 69), (54, 126), (54, 158), (54, 40), (54, 36), (54, 179), (54, 89), (54, 167), (54, 114), (54, 16), (54, 174), (54, 146), (54, 27), (54, 183), (54, 93), (54, 118), (54, 2), (54, 107), (54, 195), (54, 150), (54, 60), (54, 81), (54, 172), (54, 74), (54, 193), (54, 139), (54, 111), (54, 85), (54, 78), (54, 99), (54, 22), (54, 52), (54, 131), (54, 41), (54, 164), (54, 66), (54, 0), (54, 148), (54, 103), (54, 8), (54, 135), (54, 70), (54, 37), (54, 137), (54, 123), (54, 176), (54, 12), (54, 33), (54, 188), (54, 187), (54, 90), (54, 127), (54, 162), (54, 31), (54, 159), (54, 94), (54, 6), (54, 115), (54, 147), (54, 48), (54, 180), (54, 82), (54, 169), (54, 143), (54, 119), (54, 104), (54, 136), (54, 185), (54, 86), (54, 173), (54, 75), (54, 160), (54, 108), (54, 29), (54, 49), (54, 140), (54, 4), (54, 79), (54, 96), (54, 54), (54, 154), (54, 53), (54, 128), (54, 46), (54, 165), (54, 57), (54, 141), (54, 67), (54, 100), (54, 32), (54, 168), (54, 20), (54, 9), (54, 132), (54, 191), (54, 34), (54, 71), (54, 120), (54, 19)]
09/27/2023 07:13:05 PM DEBUG state: Concatenation 
 init: [(0, 109), (0, 29), (0, 50), (0, 141), (0, 87), (0, 162), (0, 76), (0, 97), (0, 17), (0, 54), (0, 129), (0, 43), (0, 166), (0, 64), (0, 101), (0, 21), (0, 10), (0, 133), (0, 47), (0, 186), (0, 68), (0, 121), (0, 57), (0, 14), (0, 153), (0, 35), (0, 190), (0, 88), (0, 125), (0, 2), (0, 157), (0, 39), (0, 178), (0, 92), (0, 113), (0, 6), (0, 145), (0, 59), (0, 182), (0, 80), (0, 171), (0, 117), (0, 192), (0, 106), (0, 26), (0, 149), (0, 63), (0, 138), (0, 84), (0, 175), (0, 73), (0, 94), (0, 110), (0, 30), (0, 51), (0, 142), (0, 40), (0, 163), (0, 77), (0, 98), (0, 18), (0, 55), (0, 130), (0, 44), (0, 167), (0, 65), (0, 102), (0, 22), (0, 11), (0, 134), (0, 32), (0, 187), (0, 69), (0, 122), (0, 15), (0, 154), (0, 36), (0, 191), (0, 89), (0, 126), (0, 3), (0, 158), (0, 56), (0, 179), (0, 93), (0, 168), (0, 114), (0, 7), (0, 146), (0, 60), (0, 183), (0, 81), (0, 172), (0, 118), (0, 193), (0, 107), (0, 27), (0, 150), (0, 48), (0, 139), (0, 85), (0, 160), (0, 74), (0, 111), (0, 31), (0, 52), (0, 143), (0, 41), (0, 164), (0, 78), (0, 99), (0, 19), (0, 8), (0, 131), (0, 45), (0, 184), (0, 66), (0, 103), (0, 23), (0, 135), (0, 33), (0, 188), (0, 70), (0, 123), (0, 0), (0, 155), (0, 37), (0, 176), (0, 90), (0, 127), (0, 4), (0, 159), (0, 180), (0, 169), (0, 115), (0, 104), (0, 24), (0, 147), (0, 61), (0, 136), (0, 82), (0, 173), (0, 119), (0, 194), (0, 108), (0, 28), (0, 151), (0, 49), (0, 140), (0, 86), (0, 161), (0, 75), (0, 96), (0, 16), (0, 12), (0, 53), (0, 128), (0, 42), (0, 165), (0, 79), (0, 100), (0, 20), (0, 9), (0, 132), (0, 46), (0, 185), (0, 67), (0, 120), (0, 13), (0, 152), (0, 34), (0, 189), (0, 71), (0, 124), (0, 1), (0, 156), (0, 38), (0, 177), (0, 91), (0, 112), (0, 5), (0, 144), (0, 58), (0, 181), (0, 95), (0, 170), (0, 116), (0, 105), (0, 25), (0, 148), (0, 62), (0, 137), (0, 83), (0, 174), (0, 72), (0, 195)]
 final: [(5, 178), (5, 194), (5, 39), (5, 82), (5, 136), (5, 125), (5, 147), (5, 24), (5, 190), (5, 35), (5, 94), (5, 121), (5, 159), (5, 4), (5, 186), (5, 47), (5, 90), (5, 101), (5, 155), (5, 0), (5, 166), (5, 54), (5, 70), (5, 97), (5, 135), (5, 12), (5, 162), (5, 23), (5, 50), (5, 66), (5, 109), (5, 131), (5, 8), (5, 174), (5, 19), (5, 62), (5, 78), (5, 105), (5, 143), (5, 116), (5, 170), (5, 31), (5, 181), (5, 58), (5, 74), (5, 85), (5, 139), (5, 112), (5, 150), (5, 27), (5, 177), (5, 38), (5, 193), (5, 81), (5, 124), (5, 146), (5, 7), (5, 189), (5, 34), (5, 93), (5, 120), (5, 158), (5, 3), (5, 185), (5, 46), (5, 33), (5, 89), (5, 100), (5, 154), (5, 15), (5, 165), (5, 42), (5, 53), (5, 69), (5, 96), (5, 134), (5, 11), (5, 161), (5, 22), (5, 49), (5, 65), (5, 108), (5, 130), (5, 119), (5, 173), (5, 18), (5, 61), (5, 77), (5, 104), (5, 142), (5, 115), (5, 169), (5, 30), (5, 180), (5, 57), (5, 73), (5, 84), (5, 138), (5, 127), (5, 149), (5, 26), (5, 176), (5, 37), (5, 192), (5, 80), (5, 123), (5, 145), (5, 6), (5, 188), (5, 92), (5, 103), (5, 2), (5, 184), (5, 45), (5, 88), (5, 99), (5, 153), (5, 14), (5, 164), (5, 41), (5, 52), (5, 68), (5, 111), (5, 133), (5, 10), (5, 160), (5, 43), (5, 48), (5, 64), (5, 107), (5, 129), (5, 118), (5, 172), (5, 17), (5, 183), (5, 60), (5, 76), (5, 87), (5, 141), (5, 114), (5, 168), (5, 29), (5, 179), (5, 56), (5, 195), (5, 72), (5, 83), (5, 137), (5, 126), (5, 148), (5, 25), (5, 191), (5, 36), (5, 95), (5, 122), (5, 144), (5, 5), (5, 187), (5, 32), (5, 91), (5, 102), (5, 156), (5, 1), (5, 167), (5, 44), (5, 55), (5, 71), (5, 98), (5, 152), (5, 13), (5, 163), (5, 40), (5, 51), (5, 67), (5, 110), (5, 132), (5, 9), (5, 175), (5, 20), (5, 157), (5, 63), (5, 79), (5, 106), (5, 128), (5, 117), (5, 171), (5, 16), (5, 182), (5, 59), (5, 75), (5, 86), (5, 140), (5, 21), (5, 113), (5, 151), (5, 28)]
09/27/2023 07:13:05 PM DEBUG state: Eventually 
 init: [(0, 109), (0, 29), (0, 50), (0, 141), (0, 87), (0, 162), (0, 76), (0, 97), (0, 17), (0, 54), (0, 129), (0, 43), (0, 166), (0, 64), (0, 101), (0, 21), (0, 10), (0, 133), (0, 47), (0, 186), (0, 68), (0, 121), (0, 57), (0, 14), (0, 153), (0, 35), (0, 190), (0, 88), (0, 125), (0, 2), (0, 157), (0, 39), (0, 178), (0, 92), (0, 113), (0, 6), (0, 145), (0, 59), (0, 182), (0, 80), (0, 171), (0, 117), (0, 192), (0, 106), (0, 26), (0, 149), (0, 63), (0, 138), (0, 84), (0, 175), (0, 73), (0, 94), (0, 110), (0, 30), (0, 51), (0, 142), (0, 40), (0, 163), (0, 77), (0, 98), (0, 18), (0, 55), (0, 130), (0, 44), (0, 167), (0, 65), (0, 102), (0, 22), (0, 11), (0, 134), (0, 32), (0, 187), (0, 69), (0, 122), (0, 15), (0, 154), (0, 36), (0, 191), (0, 89), (0, 126), (0, 3), (0, 158), (0, 56), (0, 179), (0, 93), (0, 168), (0, 114), (0, 7), (0, 146), (0, 60), (0, 183), (0, 81), (0, 172), (0, 118), (0, 193), (0, 107), (0, 27), (0, 150), (0, 48), (0, 139), (0, 85), (0, 160), (0, 74), (0, 111), (0, 31), (0, 52), (0, 143), (0, 41), (0, 164), (0, 78), (0, 99), (0, 19), (0, 8), (0, 131), (0, 45), (0, 184), (0, 66), (0, 103), (0, 23), (0, 135), (0, 33), (0, 188), (0, 70), (0, 123), (0, 0), (0, 155), (0, 37), (0, 176), (0, 90), (0, 127), (0, 4), (0, 159), (0, 180), (0, 169), (0, 115), (0, 104), (0, 24), (0, 147), (0, 61), (0, 136), (0, 82), (0, 173), (0, 119), (0, 194), (0, 108), (0, 28), (0, 151), (0, 49), (0, 140), (0, 86), (0, 161), (0, 75), (0, 96), (0, 16), (0, 12), (0, 53), (0, 128), (0, 42), (0, 165), (0, 79), (0, 100), (0, 20), (0, 9), (0, 132), (0, 46), (0, 185), (0, 67), (0, 120), (0, 13), (0, 152), (0, 34), (0, 189), (0, 71), (0, 124), (0, 1), (0, 156), (0, 38), (0, 177), (0, 91), (0, 112), (0, 5), (0, 144), (0, 58), (0, 181), (0, 95), (0, 170), (0, 116), (0, 105), (0, 25), (0, 148), (0, 62), (0, 137), (0, 83), (0, 174), (0, 72), (0, 195)]
 final: [(2, 153), (2, 178), (2, 9), (2, 175), (2, 34), (2, 95), (2, 120), (2, 149), (2, 142), (2, 5), (2, 171), (2, 62), (2, 91), (2, 116), (2, 145), (2, 138), (2, 1), (2, 167), (2, 58), (2, 192), (2, 87), (2, 48), (2, 112), (2, 109), (2, 134), (2, 29), (2, 163), (2, 83), (2, 76), (2, 105), (2, 130), (2, 25), (2, 191), (2, 50), (2, 47), (2, 72), (2, 101), (2, 158), (2, 21), (2, 187), (2, 14), (2, 43), (2, 68), (2, 97), (2, 154), (2, 17), (2, 183), (2, 39), (2, 64), (2, 125), (2, 150), (2, 6), (2, 172), (2, 35), (2, 92), (2, 121), (2, 146), (2, 143), (2, 2), (2, 168), (2, 63), (2, 88), (2, 117), (2, 110), (2, 139), (2, 30), (2, 164), (2, 59), (2, 193), (2, 84), (2, 113), (2, 106), (2, 135), (2, 26), (2, 160), (2, 55), (2, 80), (2, 77), (2, 102), (2, 131), (2, 22), (2, 188), (2, 51), (2, 10), (2, 44), (2, 73), (2, 98), (2, 126), (2, 159), (2, 18), (2, 184), (2, 15), (2, 40), (2, 69), (2, 155), (2, 180), (2, 11), (2, 36), (2, 65), (2, 122), (2, 151), (2, 176), (2, 7), (2, 173), (2, 32), (2, 93), (2, 118), (2, 147), (2, 140), (2, 3), (2, 169), (2, 60), (2, 194), (2, 89), (2, 114), (2, 111), (2, 136), (2, 31), (2, 165), (2, 56), (2, 85), (2, 78), (2, 179), (2, 107), (2, 132), (2, 27), (2, 161), (2, 52), (2, 81), (2, 74), (2, 103), (2, 128), (2, 23), (2, 189), (2, 45), (2, 70), (2, 99), (2, 156), (2, 19), (2, 185), (2, 12), (2, 41), (2, 66), (2, 127), (2, 152), (2, 4), (2, 181), (2, 8), (2, 174), (2, 37), (2, 94), (2, 123), (2, 54), (2, 148), (2, 177), (2, 170), (2, 33), (2, 90), (2, 119), (2, 144), (2, 141), (2, 0), (2, 61), (2, 195), (2, 86), (2, 115), (2, 108), (2, 137), (2, 28), (2, 162), (2, 57), (2, 82), (2, 79), (2, 104), (2, 133), (2, 24), (2, 190), (2, 53), (2, 46), (2, 75), (2, 100), (2, 129), (2, 20), (2, 186), (2, 49), (2, 42), (2, 71), (2, 96), (2, 157), (2, 16), (2, 182), (2, 13), (2, 38), (2, 67), (2, 166), (2, 124)]
09/27/2023 07:13:05 PM DEBUG state: Hold 
 init: [(0, 109), (0, 29), (0, 50), (0, 141), (0, 87), (0, 162), (0, 76), (0, 97), (0, 17), (0, 54), (0, 129), (0, 43), (0, 166), (0, 64), (0, 101), (0, 21), (0, 10), (0, 133), (0, 47), (0, 186), (0, 68), (0, 121), (0, 57), (0, 14), (0, 153), (0, 35), (0, 190), (0, 88), (0, 125), (0, 2), (0, 157), (0, 39), (0, 178), (0, 92), (0, 113), (0, 6), (0, 145), (0, 59), (0, 182), (0, 80), (0, 171), (0, 117), (0, 192), (0, 106), (0, 26), (0, 149), (0, 63), (0, 138), (0, 84), (0, 175), (0, 73), (0, 94), (0, 110), (0, 30), (0, 51), (0, 142), (0, 40), (0, 163), (0, 77), (0, 98), (0, 18), (0, 55), (0, 130), (0, 44), (0, 167), (0, 65), (0, 102), (0, 22), (0, 11), (0, 134), (0, 32), (0, 187), (0, 69), (0, 122), (0, 15), (0, 154), (0, 36), (0, 191), (0, 89), (0, 126), (0, 3), (0, 158), (0, 56), (0, 179), (0, 93), (0, 168), (0, 114), (0, 7), (0, 146), (0, 60), (0, 183), (0, 81), (0, 172), (0, 118), (0, 193), (0, 107), (0, 27), (0, 150), (0, 48), (0, 139), (0, 85), (0, 160), (0, 74), (0, 111), (0, 31), (0, 52), (0, 143), (0, 41), (0, 164), (0, 78), (0, 99), (0, 19), (0, 8), (0, 131), (0, 45), (0, 184), (0, 66), (0, 103), (0, 23), (0, 135), (0, 33), (0, 188), (0, 70), (0, 123), (0, 0), (0, 155), (0, 37), (0, 176), (0, 90), (0, 127), (0, 4), (0, 159), (0, 180), (0, 169), (0, 115), (0, 104), (0, 24), (0, 147), (0, 61), (0, 136), (0, 82), (0, 173), (0, 119), (0, 194), (0, 108), (0, 28), (0, 151), (0, 49), (0, 140), (0, 86), (0, 161), (0, 75), (0, 96), (0, 16), (0, 12), (0, 53), (0, 128), (0, 42), (0, 165), (0, 79), (0, 100), (0, 20), (0, 9), (0, 132), (0, 46), (0, 185), (0, 67), (0, 120), (0, 13), (0, 152), (0, 34), (0, 189), (0, 71), (0, 124), (0, 1), (0, 156), (0, 38), (0, 177), (0, 91), (0, 112), (0, 5), (0, 144), (0, 58), (0, 181), (0, 95), (0, 170), (0, 116), (0, 105), (0, 25), (0, 148), (0, 62), (0, 137), (0, 83), (0, 174), (0, 72), (0, 195)]
 final: [(2, 153), (2, 178), (2, 9), (2, 175), (2, 34), (2, 95), (2, 120), (2, 149), (2, 142), (2, 5), (2, 171), (2, 62), (2, 91), (2, 116), (2, 145), (2, 138), (2, 1), (2, 167), (2, 58), (2, 192), (2, 87), (2, 48), (2, 112), (2, 109), (2, 134), (2, 29), (2, 163), (2, 83), (2, 76), (2, 105), (2, 130), (2, 25), (2, 191), (2, 50), (2, 47), (2, 72), (2, 101), (2, 158), (2, 21), (2, 187), (2, 14), (2, 43), (2, 68), (2, 97), (2, 154), (2, 17), (2, 183), (2, 39), (2, 64), (2, 125), (2, 150), (2, 6), (2, 172), (2, 35), (2, 92), (2, 121), (2, 146), (2, 143), (2, 2), (2, 168), (2, 63), (2, 88), (2, 117), (2, 110), (2, 139), (2, 30), (2, 164), (2, 59), (2, 193), (2, 84), (2, 113), (2, 106), (2, 135), (2, 26), (2, 160), (2, 55), (2, 80), (2, 77), (2, 102), (2, 131), (2, 22), (2, 188), (2, 51), (2, 10), (2, 44), (2, 73), (2, 98), (2, 126), (2, 159), (2, 18), (2, 184), (2, 15), (2, 40), (2, 69), (2, 155), (2, 180), (2, 11), (2, 36), (2, 65), (2, 122), (2, 151), (2, 176), (2, 7), (2, 173), (2, 32), (2, 93), (2, 118), (2, 147), (2, 140), (2, 3), (2, 169), (2, 60), (2, 194), (2, 89), (2, 114), (2, 111), (2, 136), (2, 31), (2, 165), (2, 56), (2, 85), (2, 78), (2, 179), (2, 107), (2, 132), (2, 27), (2, 161), (2, 52), (2, 81), (2, 74), (2, 103), (2, 128), (2, 23), (2, 189), (2, 45), (2, 70), (2, 99), (2, 156), (2, 19), (2, 185), (2, 12), (2, 41), (2, 66), (2, 127), (2, 152), (2, 4), (2, 181), (2, 8), (2, 174), (2, 37), (2, 94), (2, 123), (2, 54), (2, 148), (2, 177), (2, 170), (2, 33), (2, 90), (2, 119), (2, 144), (2, 141), (2, 0), (2, 61), (2, 195), (2, 86), (2, 115), (2, 108), (2, 137), (2, 28), (2, 162), (2, 57), (2, 82), (2, 79), (2, 104), (2, 133), (2, 24), (2, 190), (2, 53), (2, 46), (2, 75), (2, 100), (2, 129), (2, 20), (2, 186), (2, 49), (2, 42), (2, 71), (2, 96), (2, 157), (2, 16), (2, 182), (2, 13), (2, 38), (2, 67), (2, 166), (2, 124)]
09/27/2023 07:13:05 PM DEBUG state: Eventually 
 init: [(2, 153), (2, 178), (2, 9), (2, 175), (2, 34), (2, 95), (2, 120), (2, 149), (2, 142), (2, 5), (2, 171), (2, 62), (2, 91), (2, 116), (2, 145), (2, 138), (2, 1), (2, 167), (2, 58), (2, 192), (2, 87), (2, 48), (2, 112), (2, 109), (2, 134), (2, 29), (2, 163), (2, 83), (2, 76), (2, 105), (2, 130), (2, 25), (2, 191), (2, 50), (2, 47), (2, 72), (2, 101), (2, 158), (2, 21), (2, 187), (2, 14), (2, 43), (2, 68), (2, 97), (2, 154), (2, 17), (2, 183), (2, 39), (2, 64), (2, 125), (2, 150), (2, 6), (2, 172), (2, 35), (2, 92), (2, 121), (2, 146), (2, 143), (2, 2), (2, 168), (2, 63), (2, 88), (2, 117), (2, 110), (2, 139), (2, 30), (2, 164), (2, 59), (2, 193), (2, 84), (2, 113), (2, 106), (2, 135), (2, 26), (2, 160), (2, 55), (2, 80), (2, 77), (2, 102), (2, 131), (2, 22), (2, 188), (2, 51), (2, 10), (2, 44), (2, 73), (2, 98), (2, 126), (2, 159), (2, 18), (2, 184), (2, 15), (2, 40), (2, 69), (2, 155), (2, 180), (2, 11), (2, 36), (2, 65), (2, 122), (2, 151), (2, 176), (2, 7), (2, 173), (2, 32), (2, 93), (2, 118), (2, 147), (2, 140), (2, 3), (2, 169), (2, 60), (2, 194), (2, 89), (2, 114), (2, 111), (2, 136), (2, 31), (2, 165), (2, 56), (2, 85), (2, 78), (2, 179), (2, 107), (2, 132), (2, 27), (2, 161), (2, 52), (2, 81), (2, 74), (2, 103), (2, 128), (2, 23), (2, 189), (2, 45), (2, 70), (2, 99), (2, 156), (2, 19), (2, 185), (2, 12), (2, 41), (2, 66), (2, 127), (2, 152), (2, 4), (2, 181), (2, 8), (2, 174), (2, 37), (2, 94), (2, 123), (2, 54), (2, 148), (2, 177), (2, 170), (2, 33), (2, 90), (2, 119), (2, 144), (2, 141), (2, 0), (2, 61), (2, 195), (2, 86), (2, 115), (2, 108), (2, 137), (2, 28), (2, 162), (2, 57), (2, 82), (2, 79), (2, 104), (2, 133), (2, 24), (2, 190), (2, 53), (2, 46), (2, 75), (2, 100), (2, 129), (2, 20), (2, 186), (2, 49), (2, 42), (2, 71), (2, 96), (2, 157), (2, 16), (2, 182), (2, 13), (2, 38), (2, 67), (2, 166), (2, 124)]
 final: [(5, 178), (5, 194), (5, 39), (5, 82), (5, 136), (5, 125), (5, 147), (5, 24), (5, 190), (5, 35), (5, 94), (5, 121), (5, 159), (5, 4), (5, 186), (5, 47), (5, 90), (5, 101), (5, 155), (5, 0), (5, 166), (5, 54), (5, 70), (5, 97), (5, 135), (5, 12), (5, 162), (5, 23), (5, 50), (5, 66), (5, 109), (5, 131), (5, 8), (5, 174), (5, 19), (5, 62), (5, 78), (5, 105), (5, 143), (5, 116), (5, 170), (5, 31), (5, 181), (5, 58), (5, 74), (5, 85), (5, 139), (5, 112), (5, 150), (5, 27), (5, 177), (5, 38), (5, 193), (5, 81), (5, 124), (5, 146), (5, 7), (5, 189), (5, 34), (5, 93), (5, 120), (5, 158), (5, 3), (5, 185), (5, 46), (5, 33), (5, 89), (5, 100), (5, 154), (5, 15), (5, 165), (5, 42), (5, 53), (5, 69), (5, 96), (5, 134), (5, 11), (5, 161), (5, 22), (5, 49), (5, 65), (5, 108), (5, 130), (5, 119), (5, 173), (5, 18), (5, 61), (5, 77), (5, 104), (5, 142), (5, 115), (5, 169), (5, 30), (5, 180), (5, 57), (5, 73), (5, 84), (5, 138), (5, 127), (5, 149), (5, 26), (5, 176), (5, 37), (5, 192), (5, 80), (5, 123), (5, 145), (5, 6), (5, 188), (5, 92), (5, 103), (5, 2), (5, 184), (5, 45), (5, 88), (5, 99), (5, 153), (5, 14), (5, 164), (5, 41), (5, 52), (5, 68), (5, 111), (5, 133), (5, 10), (5, 160), (5, 43), (5, 48), (5, 64), (5, 107), (5, 129), (5, 118), (5, 172), (5, 17), (5, 183), (5, 60), (5, 76), (5, 87), (5, 141), (5, 114), (5, 168), (5, 29), (5, 179), (5, 56), (5, 195), (5, 72), (5, 83), (5, 137), (5, 126), (5, 148), (5, 25), (5, 191), (5, 36), (5, 95), (5, 122), (5, 144), (5, 5), (5, 187), (5, 32), (5, 91), (5, 102), (5, 156), (5, 1), (5, 167), (5, 44), (5, 55), (5, 71), (5, 98), (5, 152), (5, 13), (5, 163), (5, 40), (5, 51), (5, 67), (5, 110), (5, 132), (5, 9), (5, 175), (5, 20), (5, 157), (5, 63), (5, 79), (5, 106), (5, 128), (5, 117), (5, 171), (5, 16), (5, 182), (5, 59), (5, 75), (5, 86), (5, 140), (5, 21), (5, 113), (5, 151), (5, 28)]
09/27/2023 07:13:05 PM DEBUG state: Hold 
 init: [(3, 152), (3, 50), (3, 191), (3, 66), (3, 105), (3, 12), (3, 19), (3, 156), (3, 54), (3, 163), (3, 70), (3, 109), (3, 112), (3, 23), (3, 128), (3, 58), (3, 167), (3, 74), (3, 81), (3, 116), (3, 27), (3, 132), (3, 62), (3, 171), (3, 78), (3, 85), (3, 120), (3, 31), (3, 136), (3, 34), (3, 175), (3, 178), (3, 89), (3, 194), (3, 124), (3, 3), (3, 140), (3, 38), (3, 147), (3, 182), (3, 93), (3, 96), (3, 7), (3, 42), (3, 151), (3, 49), (3, 186), (3, 65), (3, 100), (3, 11), (3, 46), (3, 155), (3, 53), (3, 190), (3, 69), (3, 104), (3, 15), (3, 18), (3, 159), (3, 57), (3, 162), (3, 73), (3, 108), (3, 115), (3, 22), (3, 131), (3, 61), (3, 166), (3, 77), (3, 80), (3, 119), (3, 26), (3, 135), (3, 33), (3, 170), (3, 177), (3, 84), (3, 193), (3, 123), (3, 30), (3, 139), (3, 37), (3, 174), (3, 181), (3, 88), (3, 127), (3, 2), (3, 143), (3, 41), (3, 146), (3, 185), (3, 92), (3, 99), (3, 6), (3, 45), (3, 150), (3, 48), (3, 189), (3, 64), (3, 103), (3, 10), (3, 17), (3, 154), (3, 52), (3, 161), (3, 68), (3, 107), (3, 14), (3, 21), (3, 158), (3, 56), (3, 165), (3, 72), (3, 111), (3, 114), (3, 25), (3, 130), (3, 60), (3, 169), (3, 76), (3, 83), (3, 118), (3, 29), (3, 134), (3, 32), (3, 173), (3, 176), (3, 87), (3, 192), (3, 122), (3, 1), (3, 138), (3, 36), (3, 145), (3, 180), (3, 91), (3, 126), (3, 5), (3, 142), (3, 40), (3, 149), (3, 184), (3, 95), (3, 98), (3, 9), (3, 44), (3, 153), (3, 51), (3, 188), (3, 67), (3, 102), (3, 13), (3, 16), (3, 157), (3, 55), (3, 160), (3, 71), (3, 106), (3, 113), (3, 20), (3, 129), (3, 59), (3, 164), (3, 75), (3, 110), (3, 117), (3, 24), (3, 133), (3, 63), (3, 168), (3, 79), (3, 82), (3, 121), (3, 28), (3, 137), (3, 35), (3, 172), (3, 179), (3, 86), (3, 195), (3, 125), (3, 0), (3, 141), (3, 39), (3, 144), (3, 183), (3, 90), (3, 97), (3, 4), (3, 43), (3, 148), (3, 187), (3, 94), (3, 101), (3, 8), (3, 47)]
 final: [(5, 178), (5, 194), (5, 39), (5, 82), (5, 136), (5, 125), (5, 147), (5, 24), (5, 190), (5, 35), (5, 94), (5, 121), (5, 159), (5, 4), (5, 186), (5, 47), (5, 90), (5, 101), (5, 155), (5, 0), (5, 166), (5, 54), (5, 70), (5, 97), (5, 135), (5, 12), (5, 162), (5, 23), (5, 50), (5, 66), (5, 109), (5, 131), (5, 8), (5, 174), (5, 19), (5, 62), (5, 78), (5, 105), (5, 143), (5, 116), (5, 170), (5, 31), (5, 181), (5, 58), (5, 74), (5, 85), (5, 139), (5, 112), (5, 150), (5, 27), (5, 177), (5, 38), (5, 193), (5, 81), (5, 124), (5, 146), (5, 7), (5, 189), (5, 34), (5, 93), (5, 120), (5, 158), (5, 3), (5, 185), (5, 46), (5, 33), (5, 89), (5, 100), (5, 154), (5, 15), (5, 165), (5, 42), (5, 53), (5, 69), (5, 96), (5, 134), (5, 11), (5, 161), (5, 22), (5, 49), (5, 65), (5, 108), (5, 130), (5, 119), (5, 173), (5, 18), (5, 61), (5, 77), (5, 104), (5, 142), (5, 115), (5, 169), (5, 30), (5, 180), (5, 57), (5, 73), (5, 84), (5, 138), (5, 127), (5, 149), (5, 26), (5, 176), (5, 37), (5, 192), (5, 80), (5, 123), (5, 145), (5, 6), (5, 188), (5, 92), (5, 103), (5, 2), (5, 184), (5, 45), (5, 88), (5, 99), (5, 153), (5, 14), (5, 164), (5, 41), (5, 52), (5, 68), (5, 111), (5, 133), (5, 10), (5, 160), (5, 43), (5, 48), (5, 64), (5, 107), (5, 129), (5, 118), (5, 172), (5, 17), (5, 183), (5, 60), (5, 76), (5, 87), (5, 141), (5, 114), (5, 168), (5, 29), (5, 179), (5, 56), (5, 195), (5, 72), (5, 83), (5, 137), (5, 126), (5, 148), (5, 25), (5, 191), (5, 36), (5, 95), (5, 122), (5, 144), (5, 5), (5, 187), (5, 32), (5, 91), (5, 102), (5, 156), (5, 1), (5, 167), (5, 44), (5, 55), (5, 71), (5, 98), (5, 152), (5, 13), (5, 163), (5, 40), (5, 51), (5, 67), (5, 110), (5, 132), (5, 9), (5, 175), (5, 20), (5, 157), (5, 63), (5, 79), (5, 106), (5, 128), (5, 117), (5, 171), (5, 16), (5, 182), (5, 59), (5, 75), (5, 86), (5, 140), (5, 21), (5, 113), (5, 151), (5, 28)]
09/27/2023 07:13:05 PM DEBUG state: Union 
 init: [(5, 178), (5, 194), (5, 39), (5, 82), (5, 136), (5, 125), (5, 147), (5, 24), (5, 190), (5, 35), (5, 94), (5, 121), (5, 159), (5, 4), (5, 186), (5, 47), (5, 90), (5, 101), (5, 155), (5, 0), (5, 166), (5, 54), (5, 70), (5, 97), (5, 135), (5, 12), (5, 162), (5, 23), (5, 50), (5, 66), (5, 109), (5, 131), (5, 8), (5, 174), (5, 19), (5, 62), (5, 78), (5, 105), (5, 143), (5, 116), (5, 170), (5, 31), (5, 181), (5, 58), (5, 74), (5, 85), (5, 139), (5, 112), (5, 150), (5, 27), (5, 177), (5, 38), (5, 193), (5, 81), (5, 124), (5, 146), (5, 7), (5, 189), (5, 34), (5, 93), (5, 120), (5, 158), (5, 3), (5, 185), (5, 46), (5, 33), (5, 89), (5, 100), (5, 154), (5, 15), (5, 165), (5, 42), (5, 53), (5, 69), (5, 96), (5, 134), (5, 11), (5, 161), (5, 22), (5, 49), (5, 65), (5, 108), (5, 130), (5, 119), (5, 173), (5, 18), (5, 61), (5, 77), (5, 104), (5, 142), (5, 115), (5, 169), (5, 30), (5, 180), (5, 57), (5, 73), (5, 84), (5, 138), (5, 127), (5, 149), (5, 26), (5, 176), (5, 37), (5, 192), (5, 80), (5, 123), (5, 145), (5, 6), (5, 188), (5, 92), (5, 103), (5, 2), (5, 184), (5, 45), (5, 88), (5, 99), (5, 153), (5, 14), (5, 164), (5, 41), (5, 52), (5, 68), (5, 111), (5, 133), (5, 10), (5, 160), (5, 43), (5, 48), (5, 64), (5, 107), (5, 129), (5, 118), (5, 172), (5, 17), (5, 183), (5, 60), (5, 76), (5, 87), (5, 141), (5, 114), (5, 168), (5, 29), (5, 179), (5, 56), (5, 195), (5, 72), (5, 83), (5, 137), (5, 126), (5, 148), (5, 25), (5, 191), (5, 36), (5, 95), (5, 122), (5, 144), (5, 5), (5, 187), (5, 32), (5, 91), (5, 102), (5, 156), (5, 1), (5, 167), (5, 44), (5, 55), (5, 71), (5, 98), (5, 152), (5, 13), (5, 163), (5, 40), (5, 51), (5, 67), (5, 110), (5, 132), (5, 9), (5, 175), (5, 20), (5, 157), (5, 63), (5, 79), (5, 106), (5, 128), (5, 117), (5, 171), (5, 16), (5, 182), (5, 59), (5, 75), (5, 86), (5, 140), (5, 21), (5, 113), (5, 151), (5, 28)]
 final: [(54, 13), (54, 26), (54, 189), (54, 91), (54, 124), (54, 194), (54, 152), (54, 58), (54, 177), (54, 63), (54, 95), (54, 112), (54, 38), (54, 181), (54, 83), (54, 116), (54, 105), (54, 17), (54, 175), (54, 25), (54, 50), (54, 24), (54, 87), (54, 72), (54, 3), (54, 151), (54, 109), (54, 10), (54, 61), (54, 43), (54, 166), (54, 76), (54, 97), (54, 47), (54, 129), (54, 186), (54, 64), (54, 101), (54, 23), (54, 133), (54, 68), (54, 1), (54, 121), (54, 156), (54, 153), (54, 39), (54, 178), (54, 88), (54, 142), (54, 125), (54, 45), (54, 157), (54, 59), (54, 182), (54, 184), (54, 92), (54, 171), (54, 113), (54, 21), (54, 163), (54, 106), (54, 28), (54, 170), (54, 145), (54, 138), (54, 80), (54, 7), (54, 117), (54, 192), (54, 110), (54, 14), (54, 30), (54, 149), (54, 51), (54, 84), (54, 56), (54, 73), (54, 98), (54, 35), (54, 18), (54, 55), (54, 130), (54, 42), (54, 190), (54, 77), (54, 161), (54, 102), (54, 11), (54, 134), (54, 44), (54, 5), (54, 65), (54, 122), (54, 144), (54, 155), (54, 15), (54, 62), (54, 69), (54, 126), (54, 158), (54, 40), (54, 36), (54, 179), (54, 89), (54, 167), (54, 114), (54, 16), (54, 174), (54, 146), (54, 27), (54, 183), (54, 93), (54, 118), (54, 2), (54, 107), (54, 195), (54, 150), (54, 60), (54, 81), (54, 172), (54, 74), (54, 193), (54, 139), (54, 111), (54, 85), (54, 78), (54, 99), (54, 22), (54, 52), (54, 131), (54, 41), (54, 164), (54, 66), (54, 0), (54, 148), (54, 103), (54, 8), (54, 135), (54, 70), (54, 37), (54, 137), (54, 123), (54, 176), (54, 12), (54, 33), (54, 188), (54, 187), (54, 90), (54, 127), (54, 162), (54, 31), (54, 159), (54, 94), (54, 6), (54, 115), (54, 147), (54, 48), (54, 180), (54, 82), (54, 169), (54, 143), (54, 119), (54, 104), (54, 136), (54, 185), (54, 86), (54, 173), (54, 75), (54, 160), (54, 108), (54, 29), (54, 49), (54, 140), (54, 4), (54, 79), (54, 96), (54, 54), (54, 154), (54, 53), (54, 128), (54, 46), (54, 165), (54, 57), (54, 141), (54, 67), (54, 100), (54, 32), (54, 168), (54, 20), (54, 9), (54, 132), (54, 191), (54, 34), (54, 71), (54, 120), (54, 19)]
09/27/2023 07:13:05 PM DEBUG state: Concatenation 
 init: [(5, 178), (5, 194), (5, 39), (5, 82), (5, 136), (5, 125), (5, 147), (5, 24), (5, 190), (5, 35), (5, 94), (5, 121), (5, 159), (5, 4), (5, 186), (5, 47), (5, 90), (5, 101), (5, 155), (5, 0), (5, 166), (5, 54), (5, 70), (5, 97), (5, 135), (5, 12), (5, 162), (5, 23), (5, 50), (5, 66), (5, 109), (5, 131), (5, 8), (5, 174), (5, 19), (5, 62), (5, 78), (5, 105), (5, 143), (5, 116), (5, 170), (5, 31), (5, 181), (5, 58), (5, 74), (5, 85), (5, 139), (5, 112), (5, 150), (5, 27), (5, 177), (5, 38), (5, 193), (5, 81), (5, 124), (5, 146), (5, 7), (5, 189), (5, 34), (5, 93), (5, 120), (5, 158), (5, 3), (5, 185), (5, 46), (5, 33), (5, 89), (5, 100), (5, 154), (5, 15), (5, 165), (5, 42), (5, 53), (5, 69), (5, 96), (5, 134), (5, 11), (5, 161), (5, 22), (5, 49), (5, 65), (5, 108), (5, 130), (5, 119), (5, 173), (5, 18), (5, 61), (5, 77), (5, 104), (5, 142), (5, 115), (5, 169), (5, 30), (5, 180), (5, 57), (5, 73), (5, 84), (5, 138), (5, 127), (5, 149), (5, 26), (5, 176), (5, 37), (5, 192), (5, 80), (5, 123), (5, 145), (5, 6), (5, 188), (5, 92), (5, 103), (5, 2), (5, 184), (5, 45), (5, 88), (5, 99), (5, 153), (5, 14), (5, 164), (5, 41), (5, 52), (5, 68), (5, 111), (5, 133), (5, 10), (5, 160), (5, 43), (5, 48), (5, 64), (5, 107), (5, 129), (5, 118), (5, 172), (5, 17), (5, 183), (5, 60), (5, 76), (5, 87), (5, 141), (5, 114), (5, 168), (5, 29), (5, 179), (5, 56), (5, 195), (5, 72), (5, 83), (5, 137), (5, 126), (5, 148), (5, 25), (5, 191), (5, 36), (5, 95), (5, 122), (5, 144), (5, 5), (5, 187), (5, 32), (5, 91), (5, 102), (5, 156), (5, 1), (5, 167), (5, 44), (5, 55), (5, 71), (5, 98), (5, 152), (5, 13), (5, 163), (5, 40), (5, 51), (5, 67), (5, 110), (5, 132), (5, 9), (5, 175), (5, 20), (5, 157), (5, 63), (5, 79), (5, 106), (5, 128), (5, 117), (5, 171), (5, 16), (5, 182), (5, 59), (5, 75), (5, 86), (5, 140), (5, 21), (5, 113), (5, 151), (5, 28)]
 final: [(54, 13), (54, 26), (54, 189), (54, 91), (54, 124), (54, 194), (54, 152), (54, 58), (54, 177), (54, 63), (54, 95), (54, 112), (54, 38), (54, 181), (54, 83), (54, 116), (54, 105), (54, 17), (54, 175), (54, 25), (54, 50), (54, 24), (54, 87), (54, 72), (54, 3), (54, 151), (54, 109), (54, 10), (54, 61), (54, 43), (54, 166), (54, 76), (54, 97), (54, 47), (54, 129), (54, 186), (54, 64), (54, 101), (54, 23), (54, 133), (54, 68), (54, 1), (54, 121), (54, 156), (54, 153), (54, 39), (54, 178), (54, 88), (54, 142), (54, 125), (54, 45), (54, 157), (54, 59), (54, 182), (54, 184), (54, 92), (54, 171), (54, 113), (54, 21), (54, 163), (54, 106), (54, 28), (54, 170), (54, 145), (54, 138), (54, 80), (54, 7), (54, 117), (54, 192), (54, 110), (54, 14), (54, 30), (54, 149), (54, 51), (54, 84), (54, 56), (54, 73), (54, 98), (54, 35), (54, 18), (54, 55), (54, 130), (54, 42), (54, 190), (54, 77), (54, 161), (54, 102), (54, 11), (54, 134), (54, 44), (54, 5), (54, 65), (54, 122), (54, 144), (54, 155), (54, 15), (54, 62), (54, 69), (54, 126), (54, 158), (54, 40), (54, 36), (54, 179), (54, 89), (54, 167), (54, 114), (54, 16), (54, 174), (54, 146), (54, 27), (54, 183), (54, 93), (54, 118), (54, 2), (54, 107), (54, 195), (54, 150), (54, 60), (54, 81), (54, 172), (54, 74), (54, 193), (54, 139), (54, 111), (54, 85), (54, 78), (54, 99), (54, 22), (54, 52), (54, 131), (54, 41), (54, 164), (54, 66), (54, 0), (54, 148), (54, 103), (54, 8), (54, 135), (54, 70), (54, 37), (54, 137), (54, 123), (54, 176), (54, 12), (54, 33), (54, 188), (54, 187), (54, 90), (54, 127), (54, 162), (54, 31), (54, 159), (54, 94), (54, 6), (54, 115), (54, 147), (54, 48), (54, 180), (54, 82), (54, 169), (54, 143), (54, 119), (54, 104), (54, 136), (54, 185), (54, 86), (54, 173), (54, 75), (54, 160), (54, 108), (54, 29), (54, 49), (54, 140), (54, 4), (54, 79), (54, 96), (54, 54), (54, 154), (54, 53), (54, 128), (54, 46), (54, 165), (54, 57), (54, 141), (54, 67), (54, 100), (54, 32), (54, 168), (54, 20), (54, 9), (54, 132), (54, 191), (54, 34), (54, 71), (54, 120), (54, 19)]
10/09/2023 11:31:10 AM DEBUG [hold] Prop: I1 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:31:10 AM DEBUG [eventually] Low: 0 High: 2 DFA: (Hold 1 I1 )
10/09/2023 11:31:10 AM DEBUG [hold] Prop: R1 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:31:11 AM DEBUG [eventually] Low: 3 High: 5 DFA: (Hold 1 R1 )
10/09/2023 11:31:11 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 I1 ) 0 2 ) DFA2: (Eventually (Hold 1 R1 ) 3 5 )
10/09/2023 11:31:11 AM DEBUG [hold] Prop: R2 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:31:11 AM DEBUG [eventually] Low: 6 High: 10 DFA: (Hold 1 R2 )
10/09/2023 11:31:11 AM DEBUG [hold] Prop: R4 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:31:11 AM DEBUG [eventually] Low: 6 High: 10 DFA: (Hold 1 R4 )
10/09/2023 11:31:11 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 R2 ) 6 10 ) DFA2: (Eventually (Hold 1 R4 ) 6 10 )
10/09/2023 11:31:11 AM DEBUG [hold] Prop: R3 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:31:11 AM DEBUG [eventually] Low: 11 High: 14 DFA: (Hold 1 R3 )
10/09/2023 11:31:11 AM DEBUG [hold] Prop: R5 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:31:11 AM DEBUG [eventually] Low: 11 High: 14 DFA: (Hold 1 R5 )
10/09/2023 11:31:11 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 R3 ) 11 14 ) DFA2: (Eventually (Hold 1 R5 ) 11 14 )
10/09/2023 11:31:11 AM INFO No trap states were added.
10/09/2023 11:31:11 AM INFO No trap states were added.
10/09/2023 11:31:11 AM DEBUG state: Concatenation 
 init: [(3, 3)]
 final: [(11, 16)]
10/09/2023 11:31:11 AM DEBUG state: Eventually 
 init: [(3, 3)]
 final: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
10/09/2023 11:31:11 AM DEBUG state: Hold 
 init: [(0, 20), (0, 10), (0, 17), (0, 1), (0, 14), (0, 21), (0, 24), (0, 11), (0, 18), (0, 2), (0, 15), (0, 22), (0, 25), (0, 19), (0, 9), (0, 0), (0, 12), (0, 23), (0, 26), (0, 13)]
 final: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
10/09/2023 11:31:11 AM DEBUG state: Eventually 
 init: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
 final: [(11, 16)]
10/09/2023 11:31:11 AM DEBUG state: Hold 
 init: [(9, 26), (9, 0), (9, 21), (9, 14), (9, 19), (9, 25), (9, 20), (9, 2), (9, 23), (9, 18), (9, 24), (9, 1), (9, 22), (9, 15), (9, 17)]
 final: [(11, 16)]
10/09/2023 11:31:11 AM DEBUG state: Concatenation 
 init: [(3, 3)]
 final: [(11, 16)]
10/09/2023 11:31:11 AM DEBUG state: Eventually 
 init: [(3, 3)]
 final: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
10/09/2023 11:31:11 AM DEBUG state: Hold 
 init: [(9, 0), (16, 0), (13, 0), (15, 0), (1, 0), (10, 0), (12, 0), (14, 0), (0, 0), (2, 0)]
 final: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
10/09/2023 11:31:11 AM DEBUG state: Eventually 
 init: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
 final: [(11, 16)]
10/09/2023 11:31:11 AM DEBUG state: Hold 
 init: [(15, 14), (9, 14), (10, 14), (0, 14), (16, 14), (1, 14), (12, 14), (2, 14), (14, 14), (13, 14)]
 final: [(11, 16)]
10/09/2023 11:31:11 AM DEBUG [union] DFA1: (Concat (Eventually (Hold 1 R2 ) 6 10 ) (Eventually (Hold 1 R4 ) 6 10 ) ) DFA2: (Concat (Eventually (Hold 1 R3 ) 11 14 ) (Eventually (Hold 1 R5 ) 11 14 ) )
10/09/2023 11:31:11 AM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 1 I1 ) 0 2 ) (Eventually (Hold 1 R1 ) 3 5 ) ) DFA2: (Union (Concat (Eventually (Hold 1 R2 ) 6 10 ) (Eventually (Hold 1 R4 ) 6 10 ) ) (Concat (Eventually (Hold 1 R3 ) 11 14 ) (Eventually (Hold 1 R5 ) 11 14 ) ) )
10/09/2023 11:31:11 AM DEBUG [hold] Prop: R6 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:31:11 AM DEBUG [eventually] Low: 15 High: 20 DFA: (Hold 1 R6 )
10/09/2023 11:31:11 AM DEBUG [concatenation] DFA1: (Concat (Concat (Eventually (Hold 1 I1 ) 0 2 ) (Eventually (Hold 1 R1 ) 3 5 ) ) (Union (Concat (Eventually (Hold 1 R2 ) 6 10 ) (Eventually (Hold 1 R4 ) 6 10 ) ) (Concat (Eventually (Hold 1 R3 ) 11 14 ) (Eventually (Hold 1 R5 ) 11 14 ) ) ) ) DFA2: (Eventually (Hold 1 R6 ) 15 20 )
10/09/2023 11:31:11 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:31:11 AM DEBUG [eventually] Low: 0 High: 2 DFA: (Hold 1 B )
10/09/2023 11:31:11 AM DEBUG [hold] Prop: R7 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:31:11 AM DEBUG [eventually] Low: 3 High: 5 DFA: (Hold 1 R7 )
10/09/2023 11:31:11 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 B ) 0 2 ) DFA2: (Eventually (Hold 1 R7 ) 3 5 )
10/09/2023 11:31:11 AM DEBUG [hold] Prop: R8 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:31:11 AM DEBUG [eventually] Low: 6 High: 10 DFA: (Hold 1 R8 )
10/09/2023 11:31:11 AM DEBUG [hold] Prop: R10 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:31:11 AM DEBUG [eventually] Low: 6 High: 10 DFA: (Hold 1 R10 )
10/09/2023 11:31:11 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 R8 ) 6 10 ) DFA2: (Eventually (Hold 1 R10 ) 6 10 )
10/09/2023 11:31:11 AM DEBUG [hold] Prop: R9 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:31:11 AM DEBUG [eventually] Low: 11 High: 14 DFA: (Hold 1 R9 )
10/09/2023 11:31:11 AM DEBUG [hold] Prop: R11 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:31:11 AM DEBUG [eventually] Low: 11 High: 14 DFA: (Hold 1 R11 )
10/09/2023 11:31:11 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 R9 ) 11 14 ) DFA2: (Eventually (Hold 1 R11 ) 11 14 )
10/09/2023 11:31:11 AM INFO No trap states were added.
10/09/2023 11:31:11 AM INFO No trap states were added.
10/09/2023 11:31:12 AM DEBUG state: Concatenation 
 init: [(3, 3)]
 final: [(11, 16)]
10/09/2023 11:31:12 AM DEBUG state: Eventually 
 init: [(3, 3)]
 final: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
10/09/2023 11:31:12 AM DEBUG state: Hold 
 init: [(0, 20), (0, 10), (0, 17), (0, 1), (0, 14), (0, 21), (0, 24), (0, 11), (0, 18), (0, 2), (0, 15), (0, 22), (0, 25), (0, 19), (0, 9), (0, 0), (0, 12), (0, 23), (0, 26), (0, 13)]
 final: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
10/09/2023 11:31:12 AM DEBUG state: Eventually 
 init: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
 final: [(11, 16)]
10/09/2023 11:31:12 AM DEBUG state: Hold 
 init: [(9, 26), (9, 0), (9, 21), (9, 14), (9, 19), (9, 25), (9, 20), (9, 2), (9, 23), (9, 18), (9, 24), (9, 1), (9, 22), (9, 15), (9, 17)]
 final: [(11, 16)]
10/09/2023 11:31:12 AM DEBUG state: Concatenation 
 init: [(3, 3)]
 final: [(11, 16)]
10/09/2023 11:31:12 AM DEBUG state: Eventually 
 init: [(3, 3)]
 final: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
10/09/2023 11:31:12 AM DEBUG state: Hold 
 init: [(9, 0), (16, 0), (13, 0), (15, 0), (1, 0), (10, 0), (12, 0), (14, 0), (0, 0), (2, 0)]
 final: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
10/09/2023 11:31:12 AM DEBUG state: Eventually 
 init: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
 final: [(11, 16)]
10/09/2023 11:31:12 AM DEBUG state: Hold 
 init: [(15, 14), (9, 14), (10, 14), (0, 14), (16, 14), (1, 14), (12, 14), (2, 14), (14, 14), (13, 14)]
 final: [(11, 16)]
10/09/2023 11:31:12 AM DEBUG [union] DFA1: (Concat (Eventually (Hold 1 R8 ) 6 10 ) (Eventually (Hold 1 R10 ) 6 10 ) ) DFA2: (Concat (Eventually (Hold 1 R9 ) 11 14 ) (Eventually (Hold 1 R11 ) 11 14 ) )
10/09/2023 11:31:12 AM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 1 B ) 0 2 ) (Eventually (Hold 1 R7 ) 3 5 ) ) DFA2: (Union (Concat (Eventually (Hold 1 R8 ) 6 10 ) (Eventually (Hold 1 R10 ) 6 10 ) ) (Concat (Eventually (Hold 1 R9 ) 11 14 ) (Eventually (Hold 1 R11 ) 11 14 ) ) )
10/09/2023 11:31:12 AM DEBUG [hold] Prop: R12 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:31:12 AM DEBUG [eventually] Low: 15 High: 20 DFA: (Hold 1 R12 )
10/09/2023 11:31:12 AM DEBUG [concatenation] DFA1: (Concat (Concat (Eventually (Hold 1 B ) 0 2 ) (Eventually (Hold 1 R7 ) 3 5 ) ) (Union (Concat (Eventually (Hold 1 R8 ) 6 10 ) (Eventually (Hold 1 R10 ) 6 10 ) ) (Concat (Eventually (Hold 1 R9 ) 11 14 ) (Eventually (Hold 1 R11 ) 11 14 ) ) ) ) DFA2: (Eventually (Hold 1 R12 ) 15 20 )
10/09/2023 11:32:09 AM DEBUG [hold] Prop: I1 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:32:09 AM DEBUG [eventually] Low: 0 High: 2 DFA: (Hold 1 I1 )
10/09/2023 11:32:09 AM DEBUG [hold] Prop: R1 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:32:09 AM DEBUG [eventually] Low: 3 High: 5 DFA: (Hold 1 R1 )
10/09/2023 11:32:09 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 I1 ) 0 2 ) DFA2: (Eventually (Hold 1 R1 ) 3 5 )
10/09/2023 11:32:09 AM DEBUG [hold] Prop: R2 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:32:09 AM DEBUG [eventually] Low: 6 High: 10 DFA: (Hold 1 R2 )
10/09/2023 11:32:09 AM DEBUG [hold] Prop: R4 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:32:10 AM DEBUG [eventually] Low: 6 High: 10 DFA: (Hold 1 R4 )
10/09/2023 11:32:10 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 R2 ) 6 10 ) DFA2: (Eventually (Hold 1 R4 ) 6 10 )
10/09/2023 11:32:10 AM DEBUG [hold] Prop: R3 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:32:10 AM DEBUG [eventually] Low: 11 High: 14 DFA: (Hold 1 R3 )
10/09/2023 11:32:10 AM DEBUG [hold] Prop: R5 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:32:10 AM DEBUG [eventually] Low: 11 High: 14 DFA: (Hold 1 R5 )
10/09/2023 11:32:10 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 R3 ) 11 14 ) DFA2: (Eventually (Hold 1 R5 ) 11 14 )
10/09/2023 11:32:10 AM INFO No trap states were added.
10/09/2023 11:32:10 AM INFO No trap states were added.
10/09/2023 11:32:10 AM DEBUG state: Concatenation 
 init: [(3, 3)]
 final: [(11, 16)]
10/09/2023 11:32:10 AM DEBUG state: Eventually 
 init: [(3, 3)]
 final: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
10/09/2023 11:32:10 AM DEBUG state: Hold 
 init: [(0, 20), (0, 10), (0, 17), (0, 1), (0, 14), (0, 21), (0, 24), (0, 11), (0, 18), (0, 2), (0, 15), (0, 22), (0, 25), (0, 19), (0, 9), (0, 0), (0, 12), (0, 23), (0, 26), (0, 13)]
 final: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
10/09/2023 11:32:10 AM DEBUG state: Eventually 
 init: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
 final: [(11, 16)]
10/09/2023 11:32:10 AM DEBUG state: Hold 
 init: [(9, 26), (9, 0), (9, 21), (9, 14), (9, 19), (9, 25), (9, 20), (9, 2), (9, 23), (9, 18), (9, 24), (9, 1), (9, 22), (9, 15), (9, 17)]
 final: [(11, 16)]
10/09/2023 11:32:10 AM DEBUG state: Concatenation 
 init: [(3, 3)]
 final: [(11, 16)]
10/09/2023 11:32:10 AM DEBUG state: Eventually 
 init: [(3, 3)]
 final: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
10/09/2023 11:32:10 AM DEBUG state: Hold 
 init: [(9, 0), (16, 0), (13, 0), (15, 0), (1, 0), (10, 0), (12, 0), (14, 0), (0, 0), (2, 0)]
 final: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
10/09/2023 11:32:10 AM DEBUG state: Eventually 
 init: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
 final: [(11, 16)]
10/09/2023 11:32:10 AM DEBUG state: Hold 
 init: [(15, 14), (9, 14), (10, 14), (0, 14), (16, 14), (1, 14), (12, 14), (2, 14), (14, 14), (13, 14)]
 final: [(11, 16)]
10/09/2023 11:32:10 AM DEBUG [union] DFA1: (Concat (Eventually (Hold 1 R2 ) 6 10 ) (Eventually (Hold 1 R4 ) 6 10 ) ) DFA2: (Concat (Eventually (Hold 1 R3 ) 11 14 ) (Eventually (Hold 1 R5 ) 11 14 ) )
10/09/2023 11:32:10 AM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 1 I1 ) 0 2 ) (Eventually (Hold 1 R1 ) 3 5 ) ) DFA2: (Union (Concat (Eventually (Hold 1 R2 ) 6 10 ) (Eventually (Hold 1 R4 ) 6 10 ) ) (Concat (Eventually (Hold 1 R3 ) 11 14 ) (Eventually (Hold 1 R5 ) 11 14 ) ) )
10/09/2023 11:32:10 AM DEBUG [hold] Prop: R6 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:32:10 AM DEBUG [eventually] Low: 15 High: 20 DFA: (Hold 1 R6 )
10/09/2023 11:32:10 AM DEBUG [concatenation] DFA1: (Concat (Concat (Eventually (Hold 1 I1 ) 0 2 ) (Eventually (Hold 1 R1 ) 3 5 ) ) (Union (Concat (Eventually (Hold 1 R2 ) 6 10 ) (Eventually (Hold 1 R4 ) 6 10 ) ) (Concat (Eventually (Hold 1 R3 ) 11 14 ) (Eventually (Hold 1 R5 ) 11 14 ) ) ) ) DFA2: (Eventually (Hold 1 R6 ) 15 20 )
10/09/2023 11:32:10 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:32:10 AM DEBUG [eventually] Low: 0 High: 2 DFA: (Hold 1 B )
10/09/2023 11:32:10 AM DEBUG [hold] Prop: R7 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:32:10 AM DEBUG [eventually] Low: 3 High: 5 DFA: (Hold 1 R7 )
10/09/2023 11:32:10 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 B ) 0 2 ) DFA2: (Eventually (Hold 1 R7 ) 3 5 )
10/09/2023 11:32:10 AM DEBUG [hold] Prop: R8 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:32:10 AM DEBUG [eventually] Low: 6 High: 10 DFA: (Hold 1 R8 )
10/09/2023 11:32:10 AM DEBUG [hold] Prop: R10 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:32:10 AM DEBUG [eventually] Low: 6 High: 10 DFA: (Hold 1 R10 )
10/09/2023 11:32:10 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 R8 ) 6 10 ) DFA2: (Eventually (Hold 1 R10 ) 6 10 )
10/09/2023 11:32:10 AM DEBUG [hold] Prop: R9 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:32:11 AM DEBUG [eventually] Low: 11 High: 14 DFA: (Hold 1 R9 )
10/09/2023 11:32:11 AM DEBUG [hold] Prop: R11 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:32:11 AM DEBUG [eventually] Low: 11 High: 14 DFA: (Hold 1 R11 )
10/09/2023 11:32:11 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 R9 ) 11 14 ) DFA2: (Eventually (Hold 1 R11 ) 11 14 )
10/09/2023 11:32:11 AM INFO No trap states were added.
10/09/2023 11:32:11 AM INFO No trap states were added.
10/09/2023 11:32:11 AM DEBUG state: Concatenation 
 init: [(3, 3)]
 final: [(11, 16)]
10/09/2023 11:32:11 AM DEBUG state: Eventually 
 init: [(3, 3)]
 final: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
10/09/2023 11:32:11 AM DEBUG state: Hold 
 init: [(0, 20), (0, 10), (0, 17), (0, 1), (0, 14), (0, 21), (0, 24), (0, 11), (0, 18), (0, 2), (0, 15), (0, 22), (0, 25), (0, 19), (0, 9), (0, 0), (0, 12), (0, 23), (0, 26), (0, 13)]
 final: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
10/09/2023 11:32:11 AM DEBUG state: Eventually 
 init: [(2, 22), (2, 17), (2, 11), (2, 18), (2, 1), (2, 12), (2, 23), (2, 2), (2, 24), (2, 19), (2, 13), (2, 20), (2, 14), (2, 25), (2, 26), (2, 21), (2, 0), (2, 15)]
 final: [(11, 16)]
10/09/2023 11:32:11 AM DEBUG state: Hold 
 init: [(9, 26), (9, 0), (9, 21), (9, 14), (9, 19), (9, 25), (9, 20), (9, 2), (9, 23), (9, 18), (9, 24), (9, 1), (9, 22), (9, 15), (9, 17)]
 final: [(11, 16)]
10/09/2023 11:32:11 AM DEBUG state: Concatenation 
 init: [(3, 3)]
 final: [(11, 16)]
10/09/2023 11:32:11 AM DEBUG state: Eventually 
 init: [(3, 3)]
 final: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
10/09/2023 11:32:11 AM DEBUG state: Hold 
 init: [(9, 0), (16, 0), (13, 0), (15, 0), (1, 0), (10, 0), (12, 0), (14, 0), (0, 0), (2, 0)]
 final: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
10/09/2023 11:32:11 AM DEBUG state: Eventually 
 init: [(14, 2), (12, 2), (2, 2), (9, 2), (0, 2), (13, 2), (16, 2), (1, 2), (15, 2), (10, 2)]
 final: [(11, 16)]
10/09/2023 11:32:11 AM DEBUG state: Hold 
 init: [(15, 14), (9, 14), (10, 14), (0, 14), (16, 14), (1, 14), (12, 14), (2, 14), (14, 14), (13, 14)]
 final: [(11, 16)]
10/09/2023 11:32:11 AM DEBUG [union] DFA1: (Concat (Eventually (Hold 1 R8 ) 6 10 ) (Eventually (Hold 1 R10 ) 6 10 ) ) DFA2: (Concat (Eventually (Hold 1 R9 ) 11 14 ) (Eventually (Hold 1 R11 ) 11 14 ) )
10/09/2023 11:32:11 AM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 1 B ) 0 2 ) (Eventually (Hold 1 R7 ) 3 5 ) ) DFA2: (Union (Concat (Eventually (Hold 1 R8 ) 6 10 ) (Eventually (Hold 1 R10 ) 6 10 ) ) (Concat (Eventually (Hold 1 R9 ) 11 14 ) (Eventually (Hold 1 R11 ) 11 14 ) ) )
10/09/2023 11:32:11 AM DEBUG [hold] Prop: R12 Duration: 1 Negation: False Props: set(['R4', 'R5', 'R6', 'B', 'R12', 'R1', 'R2', 'R3', 'I1', 'R11', 'R8', 'R9', 'R10', 'R7'])
10/09/2023 11:32:11 AM DEBUG [eventually] Low: 15 High: 20 DFA: (Hold 1 R12 )
10/09/2023 11:32:11 AM DEBUG [concatenation] DFA1: (Concat (Concat (Eventually (Hold 1 B ) 0 2 ) (Eventually (Hold 1 R7 ) 3 5 ) ) (Union (Concat (Eventually (Hold 1 R8 ) 6 10 ) (Eventually (Hold 1 R10 ) 6 10 ) ) (Concat (Eventually (Hold 1 R9 ) 11 14 ) (Eventually (Hold 1 R11 ) 11 14 ) ) ) ) DFA2: (Eventually (Hold 1 R12 ) 15 20 )
10/09/2023 11:44:45 AM DEBUG state: Concatenation 
 init: [(0, 109), (0, 29), (0, 50), (0, 141), (0, 87), (0, 162), (0, 76), (0, 97), (0, 17), (0, 54), (0, 129), (0, 43), (0, 166), (0, 64), (0, 101), (0, 21), (0, 10), (0, 133), (0, 47), (0, 186), (0, 68), (0, 121), (0, 57), (0, 14), (0, 153), (0, 35), (0, 190), (0, 88), (0, 125), (0, 2), (0, 157), (0, 39), (0, 178), (0, 92), (0, 113), (0, 6), (0, 145), (0, 59), (0, 182), (0, 80), (0, 171), (0, 117), (0, 192), (0, 106), (0, 26), (0, 149), (0, 63), (0, 138), (0, 84), (0, 175), (0, 73), (0, 94), (0, 110), (0, 30), (0, 51), (0, 142), (0, 40), (0, 163), (0, 77), (0, 98), (0, 18), (0, 55), (0, 130), (0, 44), (0, 167), (0, 65), (0, 102), (0, 22), (0, 11), (0, 134), (0, 32), (0, 187), (0, 69), (0, 122), (0, 15), (0, 154), (0, 36), (0, 191), (0, 89), (0, 126), (0, 3), (0, 158), (0, 56), (0, 179), (0, 93), (0, 168), (0, 114), (0, 7), (0, 146), (0, 60), (0, 183), (0, 81), (0, 172), (0, 118), (0, 193), (0, 107), (0, 27), (0, 150), (0, 48), (0, 139), (0, 85), (0, 160), (0, 74), (0, 111), (0, 31), (0, 52), (0, 143), (0, 41), (0, 164), (0, 78), (0, 99), (0, 19), (0, 8), (0, 131), (0, 45), (0, 184), (0, 66), (0, 103), (0, 23), (0, 135), (0, 33), (0, 188), (0, 70), (0, 123), (0, 0), (0, 155), (0, 37), (0, 176), (0, 90), (0, 127), (0, 4), (0, 159), (0, 180), (0, 169), (0, 115), (0, 104), (0, 24), (0, 147), (0, 61), (0, 136), (0, 82), (0, 173), (0, 119), (0, 194), (0, 108), (0, 28), (0, 151), (0, 49), (0, 140), (0, 86), (0, 161), (0, 75), (0, 96), (0, 16), (0, 12), (0, 53), (0, 128), (0, 42), (0, 165), (0, 79), (0, 100), (0, 20), (0, 9), (0, 132), (0, 46), (0, 185), (0, 67), (0, 120), (0, 13), (0, 152), (0, 34), (0, 189), (0, 71), (0, 124), (0, 1), (0, 156), (0, 38), (0, 177), (0, 91), (0, 112), (0, 5), (0, 144), (0, 58), (0, 181), (0, 95), (0, 170), (0, 116), (0, 105), (0, 25), (0, 148), (0, 62), (0, 137), (0, 83), (0, 174), (0, 72), (0, 195)]
 final: [(181, 68), (181, 154), (181, 111), (181, 10), (181, 55), (181, 64), (181, 107), (181, 129), (181, 22), (181, 49), (181, 133), (181, 119), (181, 141), (181, 18), (181, 168), (181, 61), (181, 195), (181, 72), (181, 115), (181, 137), (181, 60), (181, 30), (181, 57), (181, 53), (181, 36), (181, 84), (181, 152), (181, 127), (181, 149), (181, 26), (181, 5), (181, 32), (181, 80), (181, 123), (181, 31), (181, 180), (181, 145), (181, 102), (181, 167), (181, 44), (181, 1), (181, 92), (181, 71), (181, 157), (181, 58), (181, 98), (181, 184), (181, 13), (181, 51), (181, 40), (181, 88), (181, 67), (181, 153), (181, 110), (181, 132), (181, 9), (181, 175), (181, 29), (181, 106), (181, 176), (181, 128), (181, 21), (181, 171), (181, 15), (181, 75), (181, 172), (181, 56), (181, 78), (181, 118), (181, 140), (181, 17), (181, 183), (181, 39), (181, 194), (181, 87), (181, 114), (181, 136), (181, 179), (181, 150), (181, 189), (181, 35), (181, 83), (181, 27), (181, 126), (181, 148), (181, 25), (181, 20), (181, 95), (181, 170), (181, 6), (181, 76), (181, 122), (181, 144), (181, 101), (181, 187), (181, 63), (181, 166), (181, 43), (181, 186), (181, 91), (181, 70), (181, 156), (181, 97), (181, 135), (181, 12), (181, 162), (181, 66), (181, 134), (181, 109), (181, 131), (181, 8), (181, 191), (181, 4), (181, 105), (181, 143), (181, 74), (181, 47), (181, 117), (181, 139), (181, 16), (181, 182), (181, 59), (181, 38), (181, 86), (181, 113), (181, 151), (181, 28), (181, 160), (181, 178), (181, 188), (181, 34), (181, 2), (181, 82), (181, 125), (181, 147), (181, 24), (181, 190), (181, 3), (181, 52), (181, 46), (181, 94), (181, 121), (181, 159), (181, 100), (181, 165), (181, 42), (181, 90), (181, 69), (181, 155), (181, 96), (181, 193), (181, 11), (181, 23), (181, 161), (181, 54), (181, 163), (181, 0), (181, 65), (181, 79), (181, 108), (181, 130), (181, 173), (181, 50), (181, 104), (181, 142), (181, 169), (181, 62), (181, 73), (181, 116), (181, 138), (181, 181), (181, 37), (181, 14), (181, 192), (181, 85), (181, 7), (181, 77), (181, 112), (181, 177), (181, 48), (181, 33), (181, 81), (181, 124), (181, 146), (181, 103), (181, 174), (181, 45), (181, 93), (181, 120), (181, 158), (181, 99), (181, 19), (181, 185), (181, 164), (181, 41), (181, 89)]
10/09/2023 11:44:45 AM DEBUG state: Concatenation 
 init: [(0, 109), (0, 29), (0, 50), (0, 141), (0, 87), (0, 162), (0, 76), (0, 97), (0, 17), (0, 54), (0, 129), (0, 43), (0, 166), (0, 64), (0, 101), (0, 21), (0, 10), (0, 133), (0, 47), (0, 186), (0, 68), (0, 121), (0, 57), (0, 14), (0, 153), (0, 35), (0, 190), (0, 88), (0, 125), (0, 2), (0, 157), (0, 39), (0, 178), (0, 92), (0, 113), (0, 6), (0, 145), (0, 59), (0, 182), (0, 80), (0, 171), (0, 117), (0, 192), (0, 106), (0, 26), (0, 149), (0, 63), (0, 138), (0, 84), (0, 175), (0, 73), (0, 94), (0, 110), (0, 30), (0, 51), (0, 142), (0, 40), (0, 163), (0, 77), (0, 98), (0, 18), (0, 55), (0, 130), (0, 44), (0, 167), (0, 65), (0, 102), (0, 22), (0, 11), (0, 134), (0, 32), (0, 187), (0, 69), (0, 122), (0, 15), (0, 154), (0, 36), (0, 191), (0, 89), (0, 126), (0, 3), (0, 158), (0, 56), (0, 179), (0, 93), (0, 168), (0, 114), (0, 7), (0, 146), (0, 60), (0, 183), (0, 81), (0, 172), (0, 118), (0, 193), (0, 107), (0, 27), (0, 150), (0, 48), (0, 139), (0, 85), (0, 160), (0, 74), (0, 111), (0, 31), (0, 52), (0, 143), (0, 41), (0, 164), (0, 78), (0, 99), (0, 19), (0, 8), (0, 131), (0, 45), (0, 184), (0, 66), (0, 103), (0, 23), (0, 135), (0, 33), (0, 188), (0, 70), (0, 123), (0, 0), (0, 155), (0, 37), (0, 176), (0, 90), (0, 127), (0, 4), (0, 159), (0, 180), (0, 169), (0, 115), (0, 104), (0, 24), (0, 147), (0, 61), (0, 136), (0, 82), (0, 173), (0, 119), (0, 194), (0, 108), (0, 28), (0, 151), (0, 49), (0, 140), (0, 86), (0, 161), (0, 75), (0, 96), (0, 16), (0, 12), (0, 53), (0, 128), (0, 42), (0, 165), (0, 79), (0, 100), (0, 20), (0, 9), (0, 132), (0, 46), (0, 185), (0, 67), (0, 120), (0, 13), (0, 152), (0, 34), (0, 189), (0, 71), (0, 124), (0, 1), (0, 156), (0, 38), (0, 177), (0, 91), (0, 112), (0, 5), (0, 144), (0, 58), (0, 181), (0, 95), (0, 170), (0, 116), (0, 105), (0, 25), (0, 148), (0, 62), (0, 137), (0, 83), (0, 174), (0, 72), (0, 195)]
 final: [(54, 13), (54, 26), (54, 189), (54, 91), (54, 124), (54, 194), (54, 152), (54, 58), (54, 177), (54, 63), (54, 95), (54, 112), (54, 38), (54, 181), (54, 83), (54, 116), (54, 105), (54, 17), (54, 175), (54, 25), (54, 50), (54, 24), (54, 87), (54, 72), (54, 3), (54, 151), (54, 109), (54, 10), (54, 61), (54, 43), (54, 166), (54, 76), (54, 97), (54, 47), (54, 129), (54, 186), (54, 64), (54, 101), (54, 23), (54, 133), (54, 68), (54, 1), (54, 121), (54, 156), (54, 153), (54, 39), (54, 178), (54, 88), (54, 142), (54, 125), (54, 45), (54, 157), (54, 59), (54, 182), (54, 184), (54, 92), (54, 171), (54, 113), (54, 21), (54, 163), (54, 106), (54, 28), (54, 170), (54, 145), (54, 138), (54, 80), (54, 7), (54, 117), (54, 192), (54, 110), (54, 14), (54, 30), (54, 149), (54, 51), (54, 84), (54, 56), (54, 73), (54, 98), (54, 35), (54, 18), (54, 55), (54, 130), (54, 42), (54, 190), (54, 77), (54, 161), (54, 102), (54, 11), (54, 134), (54, 44), (54, 5), (54, 65), (54, 122), (54, 144), (54, 155), (54, 15), (54, 62), (54, 69), (54, 126), (54, 158), (54, 40), (54, 36), (54, 179), (54, 89), (54, 167), (54, 114), (54, 16), (54, 174), (54, 146), (54, 27), (54, 183), (54, 93), (54, 118), (54, 2), (54, 107), (54, 195), (54, 150), (54, 60), (54, 81), (54, 172), (54, 74), (54, 193), (54, 139), (54, 111), (54, 85), (54, 78), (54, 99), (54, 22), (54, 52), (54, 131), (54, 41), (54, 164), (54, 66), (54, 0), (54, 148), (54, 103), (54, 8), (54, 135), (54, 70), (54, 37), (54, 137), (54, 123), (54, 176), (54, 12), (54, 33), (54, 188), (54, 187), (54, 90), (54, 127), (54, 162), (54, 31), (54, 159), (54, 94), (54, 6), (54, 115), (54, 147), (54, 48), (54, 180), (54, 82), (54, 169), (54, 143), (54, 119), (54, 104), (54, 136), (54, 185), (54, 86), (54, 173), (54, 75), (54, 160), (54, 108), (54, 29), (54, 49), (54, 140), (54, 4), (54, 79), (54, 96), (54, 54), (54, 154), (54, 53), (54, 128), (54, 46), (54, 165), (54, 57), (54, 141), (54, 67), (54, 100), (54, 32), (54, 168), (54, 20), (54, 9), (54, 132), (54, 191), (54, 34), (54, 71), (54, 120), (54, 19)]
10/09/2023 11:44:45 AM DEBUG state: Concatenation 
 init: [(0, 109), (0, 29), (0, 50), (0, 141), (0, 87), (0, 162), (0, 76), (0, 97), (0, 17), (0, 54), (0, 129), (0, 43), (0, 166), (0, 64), (0, 101), (0, 21), (0, 10), (0, 133), (0, 47), (0, 186), (0, 68), (0, 121), (0, 57), (0, 14), (0, 153), (0, 35), (0, 190), (0, 88), (0, 125), (0, 2), (0, 157), (0, 39), (0, 178), (0, 92), (0, 113), (0, 6), (0, 145), (0, 59), (0, 182), (0, 80), (0, 171), (0, 117), (0, 192), (0, 106), (0, 26), (0, 149), (0, 63), (0, 138), (0, 84), (0, 175), (0, 73), (0, 94), (0, 110), (0, 30), (0, 51), (0, 142), (0, 40), (0, 163), (0, 77), (0, 98), (0, 18), (0, 55), (0, 130), (0, 44), (0, 167), (0, 65), (0, 102), (0, 22), (0, 11), (0, 134), (0, 32), (0, 187), (0, 69), (0, 122), (0, 15), (0, 154), (0, 36), (0, 191), (0, 89), (0, 126), (0, 3), (0, 158), (0, 56), (0, 179), (0, 93), (0, 168), (0, 114), (0, 7), (0, 146), (0, 60), (0, 183), (0, 81), (0, 172), (0, 118), (0, 193), (0, 107), (0, 27), (0, 150), (0, 48), (0, 139), (0, 85), (0, 160), (0, 74), (0, 111), (0, 31), (0, 52), (0, 143), (0, 41), (0, 164), (0, 78), (0, 99), (0, 19), (0, 8), (0, 131), (0, 45), (0, 184), (0, 66), (0, 103), (0, 23), (0, 135), (0, 33), (0, 188), (0, 70), (0, 123), (0, 0), (0, 155), (0, 37), (0, 176), (0, 90), (0, 127), (0, 4), (0, 159), (0, 180), (0, 169), (0, 115), (0, 104), (0, 24), (0, 147), (0, 61), (0, 136), (0, 82), (0, 173), (0, 119), (0, 194), (0, 108), (0, 28), (0, 151), (0, 49), (0, 140), (0, 86), (0, 161), (0, 75), (0, 96), (0, 16), (0, 12), (0, 53), (0, 128), (0, 42), (0, 165), (0, 79), (0, 100), (0, 20), (0, 9), (0, 132), (0, 46), (0, 185), (0, 67), (0, 120), (0, 13), (0, 152), (0, 34), (0, 189), (0, 71), (0, 124), (0, 1), (0, 156), (0, 38), (0, 177), (0, 91), (0, 112), (0, 5), (0, 144), (0, 58), (0, 181), (0, 95), (0, 170), (0, 116), (0, 105), (0, 25), (0, 148), (0, 62), (0, 137), (0, 83), (0, 174), (0, 72), (0, 195)]
 final: [(5, 178), (5, 194), (5, 39), (5, 82), (5, 136), (5, 125), (5, 147), (5, 24), (5, 190), (5, 35), (5, 94), (5, 121), (5, 159), (5, 4), (5, 186), (5, 47), (5, 90), (5, 101), (5, 155), (5, 0), (5, 166), (5, 54), (5, 70), (5, 97), (5, 135), (5, 12), (5, 162), (5, 23), (5, 50), (5, 66), (5, 109), (5, 131), (5, 8), (5, 174), (5, 19), (5, 62), (5, 78), (5, 105), (5, 143), (5, 116), (5, 170), (5, 31), (5, 181), (5, 58), (5, 74), (5, 85), (5, 139), (5, 112), (5, 150), (5, 27), (5, 177), (5, 38), (5, 193), (5, 81), (5, 124), (5, 146), (5, 7), (5, 189), (5, 34), (5, 93), (5, 120), (5, 158), (5, 3), (5, 185), (5, 46), (5, 33), (5, 89), (5, 100), (5, 154), (5, 15), (5, 165), (5, 42), (5, 53), (5, 69), (5, 96), (5, 134), (5, 11), (5, 161), (5, 22), (5, 49), (5, 65), (5, 108), (5, 130), (5, 119), (5, 173), (5, 18), (5, 61), (5, 77), (5, 104), (5, 142), (5, 115), (5, 169), (5, 30), (5, 180), (5, 57), (5, 73), (5, 84), (5, 138), (5, 127), (5, 149), (5, 26), (5, 176), (5, 37), (5, 192), (5, 80), (5, 123), (5, 145), (5, 6), (5, 188), (5, 92), (5, 103), (5, 2), (5, 184), (5, 45), (5, 88), (5, 99), (5, 153), (5, 14), (5, 164), (5, 41), (5, 52), (5, 68), (5, 111), (5, 133), (5, 10), (5, 160), (5, 43), (5, 48), (5, 64), (5, 107), (5, 129), (5, 118), (5, 172), (5, 17), (5, 183), (5, 60), (5, 76), (5, 87), (5, 141), (5, 114), (5, 168), (5, 29), (5, 179), (5, 56), (5, 195), (5, 72), (5, 83), (5, 137), (5, 126), (5, 148), (5, 25), (5, 191), (5, 36), (5, 95), (5, 122), (5, 144), (5, 5), (5, 187), (5, 32), (5, 91), (5, 102), (5, 156), (5, 1), (5, 167), (5, 44), (5, 55), (5, 71), (5, 98), (5, 152), (5, 13), (5, 163), (5, 40), (5, 51), (5, 67), (5, 110), (5, 132), (5, 9), (5, 175), (5, 20), (5, 157), (5, 63), (5, 79), (5, 106), (5, 128), (5, 117), (5, 171), (5, 16), (5, 182), (5, 59), (5, 75), (5, 86), (5, 140), (5, 21), (5, 113), (5, 151), (5, 28)]
10/09/2023 11:44:45 AM DEBUG state: Eventually 
 init: [(0, 109), (0, 29), (0, 50), (0, 141), (0, 87), (0, 162), (0, 76), (0, 97), (0, 17), (0, 54), (0, 129), (0, 43), (0, 166), (0, 64), (0, 101), (0, 21), (0, 10), (0, 133), (0, 47), (0, 186), (0, 68), (0, 121), (0, 57), (0, 14), (0, 153), (0, 35), (0, 190), (0, 88), (0, 125), (0, 2), (0, 157), (0, 39), (0, 178), (0, 92), (0, 113), (0, 6), (0, 145), (0, 59), (0, 182), (0, 80), (0, 171), (0, 117), (0, 192), (0, 106), (0, 26), (0, 149), (0, 63), (0, 138), (0, 84), (0, 175), (0, 73), (0, 94), (0, 110), (0, 30), (0, 51), (0, 142), (0, 40), (0, 163), (0, 77), (0, 98), (0, 18), (0, 55), (0, 130), (0, 44), (0, 167), (0, 65), (0, 102), (0, 22), (0, 11), (0, 134), (0, 32), (0, 187), (0, 69), (0, 122), (0, 15), (0, 154), (0, 36), (0, 191), (0, 89), (0, 126), (0, 3), (0, 158), (0, 56), (0, 179), (0, 93), (0, 168), (0, 114), (0, 7), (0, 146), (0, 60), (0, 183), (0, 81), (0, 172), (0, 118), (0, 193), (0, 107), (0, 27), (0, 150), (0, 48), (0, 139), (0, 85), (0, 160), (0, 74), (0, 111), (0, 31), (0, 52), (0, 143), (0, 41), (0, 164), (0, 78), (0, 99), (0, 19), (0, 8), (0, 131), (0, 45), (0, 184), (0, 66), (0, 103), (0, 23), (0, 135), (0, 33), (0, 188), (0, 70), (0, 123), (0, 0), (0, 155), (0, 37), (0, 176), (0, 90), (0, 127), (0, 4), (0, 159), (0, 180), (0, 169), (0, 115), (0, 104), (0, 24), (0, 147), (0, 61), (0, 136), (0, 82), (0, 173), (0, 119), (0, 194), (0, 108), (0, 28), (0, 151), (0, 49), (0, 140), (0, 86), (0, 161), (0, 75), (0, 96), (0, 16), (0, 12), (0, 53), (0, 128), (0, 42), (0, 165), (0, 79), (0, 100), (0, 20), (0, 9), (0, 132), (0, 46), (0, 185), (0, 67), (0, 120), (0, 13), (0, 152), (0, 34), (0, 189), (0, 71), (0, 124), (0, 1), (0, 156), (0, 38), (0, 177), (0, 91), (0, 112), (0, 5), (0, 144), (0, 58), (0, 181), (0, 95), (0, 170), (0, 116), (0, 105), (0, 25), (0, 148), (0, 62), (0, 137), (0, 83), (0, 174), (0, 72), (0, 195)]
 final: [(2, 153), (2, 178), (2, 9), (2, 175), (2, 34), (2, 95), (2, 120), (2, 149), (2, 142), (2, 5), (2, 171), (2, 62), (2, 91), (2, 116), (2, 145), (2, 138), (2, 1), (2, 167), (2, 58), (2, 192), (2, 87), (2, 48), (2, 112), (2, 109), (2, 134), (2, 29), (2, 163), (2, 83), (2, 76), (2, 105), (2, 130), (2, 25), (2, 191), (2, 50), (2, 47), (2, 72), (2, 101), (2, 158), (2, 21), (2, 187), (2, 14), (2, 43), (2, 68), (2, 97), (2, 154), (2, 17), (2, 183), (2, 39), (2, 64), (2, 125), (2, 150), (2, 6), (2, 172), (2, 35), (2, 92), (2, 121), (2, 146), (2, 143), (2, 2), (2, 168), (2, 63), (2, 88), (2, 117), (2, 110), (2, 139), (2, 30), (2, 164), (2, 59), (2, 193), (2, 84), (2, 113), (2, 106), (2, 135), (2, 26), (2, 160), (2, 55), (2, 80), (2, 77), (2, 102), (2, 131), (2, 22), (2, 188), (2, 51), (2, 10), (2, 44), (2, 73), (2, 98), (2, 126), (2, 159), (2, 18), (2, 184), (2, 15), (2, 40), (2, 69), (2, 155), (2, 180), (2, 11), (2, 36), (2, 65), (2, 122), (2, 151), (2, 176), (2, 7), (2, 173), (2, 32), (2, 93), (2, 118), (2, 147), (2, 140), (2, 3), (2, 169), (2, 60), (2, 194), (2, 89), (2, 114), (2, 111), (2, 136), (2, 31), (2, 165), (2, 56), (2, 85), (2, 78), (2, 179), (2, 107), (2, 132), (2, 27), (2, 161), (2, 52), (2, 81), (2, 74), (2, 103), (2, 128), (2, 23), (2, 189), (2, 45), (2, 70), (2, 99), (2, 156), (2, 19), (2, 185), (2, 12), (2, 41), (2, 66), (2, 127), (2, 152), (2, 4), (2, 181), (2, 8), (2, 174), (2, 37), (2, 94), (2, 123), (2, 54), (2, 148), (2, 177), (2, 170), (2, 33), (2, 90), (2, 119), (2, 144), (2, 141), (2, 0), (2, 61), (2, 195), (2, 86), (2, 115), (2, 108), (2, 137), (2, 28), (2, 162), (2, 57), (2, 82), (2, 79), (2, 104), (2, 133), (2, 24), (2, 190), (2, 53), (2, 46), (2, 75), (2, 100), (2, 129), (2, 20), (2, 186), (2, 49), (2, 42), (2, 71), (2, 96), (2, 157), (2, 16), (2, 182), (2, 13), (2, 38), (2, 67), (2, 166), (2, 124)]
10/09/2023 11:44:45 AM DEBUG state: Hold 
 init: [(0, 109), (0, 29), (0, 50), (0, 141), (0, 87), (0, 162), (0, 76), (0, 97), (0, 17), (0, 54), (0, 129), (0, 43), (0, 166), (0, 64), (0, 101), (0, 21), (0, 10), (0, 133), (0, 47), (0, 186), (0, 68), (0, 121), (0, 57), (0, 14), (0, 153), (0, 35), (0, 190), (0, 88), (0, 125), (0, 2), (0, 157), (0, 39), (0, 178), (0, 92), (0, 113), (0, 6), (0, 145), (0, 59), (0, 182), (0, 80), (0, 171), (0, 117), (0, 192), (0, 106), (0, 26), (0, 149), (0, 63), (0, 138), (0, 84), (0, 175), (0, 73), (0, 94), (0, 110), (0, 30), (0, 51), (0, 142), (0, 40), (0, 163), (0, 77), (0, 98), (0, 18), (0, 55), (0, 130), (0, 44), (0, 167), (0, 65), (0, 102), (0, 22), (0, 11), (0, 134), (0, 32), (0, 187), (0, 69), (0, 122), (0, 15), (0, 154), (0, 36), (0, 191), (0, 89), (0, 126), (0, 3), (0, 158), (0, 56), (0, 179), (0, 93), (0, 168), (0, 114), (0, 7), (0, 146), (0, 60), (0, 183), (0, 81), (0, 172), (0, 118), (0, 193), (0, 107), (0, 27), (0, 150), (0, 48), (0, 139), (0, 85), (0, 160), (0, 74), (0, 111), (0, 31), (0, 52), (0, 143), (0, 41), (0, 164), (0, 78), (0, 99), (0, 19), (0, 8), (0, 131), (0, 45), (0, 184), (0, 66), (0, 103), (0, 23), (0, 135), (0, 33), (0, 188), (0, 70), (0, 123), (0, 0), (0, 155), (0, 37), (0, 176), (0, 90), (0, 127), (0, 4), (0, 159), (0, 180), (0, 169), (0, 115), (0, 104), (0, 24), (0, 147), (0, 61), (0, 136), (0, 82), (0, 173), (0, 119), (0, 194), (0, 108), (0, 28), (0, 151), (0, 49), (0, 140), (0, 86), (0, 161), (0, 75), (0, 96), (0, 16), (0, 12), (0, 53), (0, 128), (0, 42), (0, 165), (0, 79), (0, 100), (0, 20), (0, 9), (0, 132), (0, 46), (0, 185), (0, 67), (0, 120), (0, 13), (0, 152), (0, 34), (0, 189), (0, 71), (0, 124), (0, 1), (0, 156), (0, 38), (0, 177), (0, 91), (0, 112), (0, 5), (0, 144), (0, 58), (0, 181), (0, 95), (0, 170), (0, 116), (0, 105), (0, 25), (0, 148), (0, 62), (0, 137), (0, 83), (0, 174), (0, 72), (0, 195)]
 final: [(2, 153), (2, 178), (2, 9), (2, 175), (2, 34), (2, 95), (2, 120), (2, 149), (2, 142), (2, 5), (2, 171), (2, 62), (2, 91), (2, 116), (2, 145), (2, 138), (2, 1), (2, 167), (2, 58), (2, 192), (2, 87), (2, 48), (2, 112), (2, 109), (2, 134), (2, 29), (2, 163), (2, 83), (2, 76), (2, 105), (2, 130), (2, 25), (2, 191), (2, 50), (2, 47), (2, 72), (2, 101), (2, 158), (2, 21), (2, 187), (2, 14), (2, 43), (2, 68), (2, 97), (2, 154), (2, 17), (2, 183), (2, 39), (2, 64), (2, 125), (2, 150), (2, 6), (2, 172), (2, 35), (2, 92), (2, 121), (2, 146), (2, 143), (2, 2), (2, 168), (2, 63), (2, 88), (2, 117), (2, 110), (2, 139), (2, 30), (2, 164), (2, 59), (2, 193), (2, 84), (2, 113), (2, 106), (2, 135), (2, 26), (2, 160), (2, 55), (2, 80), (2, 77), (2, 102), (2, 131), (2, 22), (2, 188), (2, 51), (2, 10), (2, 44), (2, 73), (2, 98), (2, 126), (2, 159), (2, 18), (2, 184), (2, 15), (2, 40), (2, 69), (2, 155), (2, 180), (2, 11), (2, 36), (2, 65), (2, 122), (2, 151), (2, 176), (2, 7), (2, 173), (2, 32), (2, 93), (2, 118), (2, 147), (2, 140), (2, 3), (2, 169), (2, 60), (2, 194), (2, 89), (2, 114), (2, 111), (2, 136), (2, 31), (2, 165), (2, 56), (2, 85), (2, 78), (2, 179), (2, 107), (2, 132), (2, 27), (2, 161), (2, 52), (2, 81), (2, 74), (2, 103), (2, 128), (2, 23), (2, 189), (2, 45), (2, 70), (2, 99), (2, 156), (2, 19), (2, 185), (2, 12), (2, 41), (2, 66), (2, 127), (2, 152), (2, 4), (2, 181), (2, 8), (2, 174), (2, 37), (2, 94), (2, 123), (2, 54), (2, 148), (2, 177), (2, 170), (2, 33), (2, 90), (2, 119), (2, 144), (2, 141), (2, 0), (2, 61), (2, 195), (2, 86), (2, 115), (2, 108), (2, 137), (2, 28), (2, 162), (2, 57), (2, 82), (2, 79), (2, 104), (2, 133), (2, 24), (2, 190), (2, 53), (2, 46), (2, 75), (2, 100), (2, 129), (2, 20), (2, 186), (2, 49), (2, 42), (2, 71), (2, 96), (2, 157), (2, 16), (2, 182), (2, 13), (2, 38), (2, 67), (2, 166), (2, 124)]
10/09/2023 11:44:45 AM DEBUG state: Eventually 
 init: [(2, 153), (2, 178), (2, 9), (2, 175), (2, 34), (2, 95), (2, 120), (2, 149), (2, 142), (2, 5), (2, 171), (2, 62), (2, 91), (2, 116), (2, 145), (2, 138), (2, 1), (2, 167), (2, 58), (2, 192), (2, 87), (2, 48), (2, 112), (2, 109), (2, 134), (2, 29), (2, 163), (2, 83), (2, 76), (2, 105), (2, 130), (2, 25), (2, 191), (2, 50), (2, 47), (2, 72), (2, 101), (2, 158), (2, 21), (2, 187), (2, 14), (2, 43), (2, 68), (2, 97), (2, 154), (2, 17), (2, 183), (2, 39), (2, 64), (2, 125), (2, 150), (2, 6), (2, 172), (2, 35), (2, 92), (2, 121), (2, 146), (2, 143), (2, 2), (2, 168), (2, 63), (2, 88), (2, 117), (2, 110), (2, 139), (2, 30), (2, 164), (2, 59), (2, 193), (2, 84), (2, 113), (2, 106), (2, 135), (2, 26), (2, 160), (2, 55), (2, 80), (2, 77), (2, 102), (2, 131), (2, 22), (2, 188), (2, 51), (2, 10), (2, 44), (2, 73), (2, 98), (2, 126), (2, 159), (2, 18), (2, 184), (2, 15), (2, 40), (2, 69), (2, 155), (2, 180), (2, 11), (2, 36), (2, 65), (2, 122), (2, 151), (2, 176), (2, 7), (2, 173), (2, 32), (2, 93), (2, 118), (2, 147), (2, 140), (2, 3), (2, 169), (2, 60), (2, 194), (2, 89), (2, 114), (2, 111), (2, 136), (2, 31), (2, 165), (2, 56), (2, 85), (2, 78), (2, 179), (2, 107), (2, 132), (2, 27), (2, 161), (2, 52), (2, 81), (2, 74), (2, 103), (2, 128), (2, 23), (2, 189), (2, 45), (2, 70), (2, 99), (2, 156), (2, 19), (2, 185), (2, 12), (2, 41), (2, 66), (2, 127), (2, 152), (2, 4), (2, 181), (2, 8), (2, 174), (2, 37), (2, 94), (2, 123), (2, 54), (2, 148), (2, 177), (2, 170), (2, 33), (2, 90), (2, 119), (2, 144), (2, 141), (2, 0), (2, 61), (2, 195), (2, 86), (2, 115), (2, 108), (2, 137), (2, 28), (2, 162), (2, 57), (2, 82), (2, 79), (2, 104), (2, 133), (2, 24), (2, 190), (2, 53), (2, 46), (2, 75), (2, 100), (2, 129), (2, 20), (2, 186), (2, 49), (2, 42), (2, 71), (2, 96), (2, 157), (2, 16), (2, 182), (2, 13), (2, 38), (2, 67), (2, 166), (2, 124)]
 final: [(5, 178), (5, 194), (5, 39), (5, 82), (5, 136), (5, 125), (5, 147), (5, 24), (5, 190), (5, 35), (5, 94), (5, 121), (5, 159), (5, 4), (5, 186), (5, 47), (5, 90), (5, 101), (5, 155), (5, 0), (5, 166), (5, 54), (5, 70), (5, 97), (5, 135), (5, 12), (5, 162), (5, 23), (5, 50), (5, 66), (5, 109), (5, 131), (5, 8), (5, 174), (5, 19), (5, 62), (5, 78), (5, 105), (5, 143), (5, 116), (5, 170), (5, 31), (5, 181), (5, 58), (5, 74), (5, 85), (5, 139), (5, 112), (5, 150), (5, 27), (5, 177), (5, 38), (5, 193), (5, 81), (5, 124), (5, 146), (5, 7), (5, 189), (5, 34), (5, 93), (5, 120), (5, 158), (5, 3), (5, 185), (5, 46), (5, 33), (5, 89), (5, 100), (5, 154), (5, 15), (5, 165), (5, 42), (5, 53), (5, 69), (5, 96), (5, 134), (5, 11), (5, 161), (5, 22), (5, 49), (5, 65), (5, 108), (5, 130), (5, 119), (5, 173), (5, 18), (5, 61), (5, 77), (5, 104), (5, 142), (5, 115), (5, 169), (5, 30), (5, 180), (5, 57), (5, 73), (5, 84), (5, 138), (5, 127), (5, 149), (5, 26), (5, 176), (5, 37), (5, 192), (5, 80), (5, 123), (5, 145), (5, 6), (5, 188), (5, 92), (5, 103), (5, 2), (5, 184), (5, 45), (5, 88), (5, 99), (5, 153), (5, 14), (5, 164), (5, 41), (5, 52), (5, 68), (5, 111), (5, 133), (5, 10), (5, 160), (5, 43), (5, 48), (5, 64), (5, 107), (5, 129), (5, 118), (5, 172), (5, 17), (5, 183), (5, 60), (5, 76), (5, 87), (5, 141), (5, 114), (5, 168), (5, 29), (5, 179), (5, 56), (5, 195), (5, 72), (5, 83), (5, 137), (5, 126), (5, 148), (5, 25), (5, 191), (5, 36), (5, 95), (5, 122), (5, 144), (5, 5), (5, 187), (5, 32), (5, 91), (5, 102), (5, 156), (5, 1), (5, 167), (5, 44), (5, 55), (5, 71), (5, 98), (5, 152), (5, 13), (5, 163), (5, 40), (5, 51), (5, 67), (5, 110), (5, 132), (5, 9), (5, 175), (5, 20), (5, 157), (5, 63), (5, 79), (5, 106), (5, 128), (5, 117), (5, 171), (5, 16), (5, 182), (5, 59), (5, 75), (5, 86), (5, 140), (5, 21), (5, 113), (5, 151), (5, 28)]
10/09/2023 11:44:45 AM DEBUG state: Hold 
 init: [(3, 152), (3, 50), (3, 191), (3, 66), (3, 105), (3, 12), (3, 19), (3, 156), (3, 54), (3, 163), (3, 70), (3, 109), (3, 112), (3, 23), (3, 128), (3, 58), (3, 167), (3, 74), (3, 81), (3, 116), (3, 27), (3, 132), (3, 62), (3, 171), (3, 78), (3, 85), (3, 120), (3, 31), (3, 136), (3, 34), (3, 175), (3, 178), (3, 89), (3, 194), (3, 124), (3, 3), (3, 140), (3, 38), (3, 147), (3, 182), (3, 93), (3, 96), (3, 7), (3, 42), (3, 151), (3, 49), (3, 186), (3, 65), (3, 100), (3, 11), (3, 46), (3, 155), (3, 53), (3, 190), (3, 69), (3, 104), (3, 15), (3, 18), (3, 159), (3, 57), (3, 162), (3, 73), (3, 108), (3, 115), (3, 22), (3, 131), (3, 61), (3, 166), (3, 77), (3, 80), (3, 119), (3, 26), (3, 135), (3, 33), (3, 170), (3, 177), (3, 84), (3, 193), (3, 123), (3, 30), (3, 139), (3, 37), (3, 174), (3, 181), (3, 88), (3, 127), (3, 2), (3, 143), (3, 41), (3, 146), (3, 185), (3, 92), (3, 99), (3, 6), (3, 45), (3, 150), (3, 48), (3, 189), (3, 64), (3, 103), (3, 10), (3, 17), (3, 154), (3, 52), (3, 161), (3, 68), (3, 107), (3, 14), (3, 21), (3, 158), (3, 56), (3, 165), (3, 72), (3, 111), (3, 114), (3, 25), (3, 130), (3, 60), (3, 169), (3, 76), (3, 83), (3, 118), (3, 29), (3, 134), (3, 32), (3, 173), (3, 176), (3, 87), (3, 192), (3, 122), (3, 1), (3, 138), (3, 36), (3, 145), (3, 180), (3, 91), (3, 126), (3, 5), (3, 142), (3, 40), (3, 149), (3, 184), (3, 95), (3, 98), (3, 9), (3, 44), (3, 153), (3, 51), (3, 188), (3, 67), (3, 102), (3, 13), (3, 16), (3, 157), (3, 55), (3, 160), (3, 71), (3, 106), (3, 113), (3, 20), (3, 129), (3, 59), (3, 164), (3, 75), (3, 110), (3, 117), (3, 24), (3, 133), (3, 63), (3, 168), (3, 79), (3, 82), (3, 121), (3, 28), (3, 137), (3, 35), (3, 172), (3, 179), (3, 86), (3, 195), (3, 125), (3, 0), (3, 141), (3, 39), (3, 144), (3, 183), (3, 90), (3, 97), (3, 4), (3, 43), (3, 148), (3, 187), (3, 94), (3, 101), (3, 8), (3, 47)]
 final: [(5, 178), (5, 194), (5, 39), (5, 82), (5, 136), (5, 125), (5, 147), (5, 24), (5, 190), (5, 35), (5, 94), (5, 121), (5, 159), (5, 4), (5, 186), (5, 47), (5, 90), (5, 101), (5, 155), (5, 0), (5, 166), (5, 54), (5, 70), (5, 97), (5, 135), (5, 12), (5, 162), (5, 23), (5, 50), (5, 66), (5, 109), (5, 131), (5, 8), (5, 174), (5, 19), (5, 62), (5, 78), (5, 105), (5, 143), (5, 116), (5, 170), (5, 31), (5, 181), (5, 58), (5, 74), (5, 85), (5, 139), (5, 112), (5, 150), (5, 27), (5, 177), (5, 38), (5, 193), (5, 81), (5, 124), (5, 146), (5, 7), (5, 189), (5, 34), (5, 93), (5, 120), (5, 158), (5, 3), (5, 185), (5, 46), (5, 33), (5, 89), (5, 100), (5, 154), (5, 15), (5, 165), (5, 42), (5, 53), (5, 69), (5, 96), (5, 134), (5, 11), (5, 161), (5, 22), (5, 49), (5, 65), (5, 108), (5, 130), (5, 119), (5, 173), (5, 18), (5, 61), (5, 77), (5, 104), (5, 142), (5, 115), (5, 169), (5, 30), (5, 180), (5, 57), (5, 73), (5, 84), (5, 138), (5, 127), (5, 149), (5, 26), (5, 176), (5, 37), (5, 192), (5, 80), (5, 123), (5, 145), (5, 6), (5, 188), (5, 92), (5, 103), (5, 2), (5, 184), (5, 45), (5, 88), (5, 99), (5, 153), (5, 14), (5, 164), (5, 41), (5, 52), (5, 68), (5, 111), (5, 133), (5, 10), (5, 160), (5, 43), (5, 48), (5, 64), (5, 107), (5, 129), (5, 118), (5, 172), (5, 17), (5, 183), (5, 60), (5, 76), (5, 87), (5, 141), (5, 114), (5, 168), (5, 29), (5, 179), (5, 56), (5, 195), (5, 72), (5, 83), (5, 137), (5, 126), (5, 148), (5, 25), (5, 191), (5, 36), (5, 95), (5, 122), (5, 144), (5, 5), (5, 187), (5, 32), (5, 91), (5, 102), (5, 156), (5, 1), (5, 167), (5, 44), (5, 55), (5, 71), (5, 98), (5, 152), (5, 13), (5, 163), (5, 40), (5, 51), (5, 67), (5, 110), (5, 132), (5, 9), (5, 175), (5, 20), (5, 157), (5, 63), (5, 79), (5, 106), (5, 128), (5, 117), (5, 171), (5, 16), (5, 182), (5, 59), (5, 75), (5, 86), (5, 140), (5, 21), (5, 113), (5, 151), (5, 28)]
10/09/2023 11:44:45 AM DEBUG state: Union 
 init: [(5, 178), (5, 194), (5, 39), (5, 82), (5, 136), (5, 125), (5, 147), (5, 24), (5, 190), (5, 35), (5, 94), (5, 121), (5, 159), (5, 4), (5, 186), (5, 47), (5, 90), (5, 101), (5, 155), (5, 0), (5, 166), (5, 54), (5, 70), (5, 97), (5, 135), (5, 12), (5, 162), (5, 23), (5, 50), (5, 66), (5, 109), (5, 131), (5, 8), (5, 174), (5, 19), (5, 62), (5, 78), (5, 105), (5, 143), (5, 116), (5, 170), (5, 31), (5, 181), (5, 58), (5, 74), (5, 85), (5, 139), (5, 112), (5, 150), (5, 27), (5, 177), (5, 38), (5, 193), (5, 81), (5, 124), (5, 146), (5, 7), (5, 189), (5, 34), (5, 93), (5, 120), (5, 158), (5, 3), (5, 185), (5, 46), (5, 33), (5, 89), (5, 100), (5, 154), (5, 15), (5, 165), (5, 42), (5, 53), (5, 69), (5, 96), (5, 134), (5, 11), (5, 161), (5, 22), (5, 49), (5, 65), (5, 108), (5, 130), (5, 119), (5, 173), (5, 18), (5, 61), (5, 77), (5, 104), (5, 142), (5, 115), (5, 169), (5, 30), (5, 180), (5, 57), (5, 73), (5, 84), (5, 138), (5, 127), (5, 149), (5, 26), (5, 176), (5, 37), (5, 192), (5, 80), (5, 123), (5, 145), (5, 6), (5, 188), (5, 92), (5, 103), (5, 2), (5, 184), (5, 45), (5, 88), (5, 99), (5, 153), (5, 14), (5, 164), (5, 41), (5, 52), (5, 68), (5, 111), (5, 133), (5, 10), (5, 160), (5, 43), (5, 48), (5, 64), (5, 107), (5, 129), (5, 118), (5, 172), (5, 17), (5, 183), (5, 60), (5, 76), (5, 87), (5, 141), (5, 114), (5, 168), (5, 29), (5, 179), (5, 56), (5, 195), (5, 72), (5, 83), (5, 137), (5, 126), (5, 148), (5, 25), (5, 191), (5, 36), (5, 95), (5, 122), (5, 144), (5, 5), (5, 187), (5, 32), (5, 91), (5, 102), (5, 156), (5, 1), (5, 167), (5, 44), (5, 55), (5, 71), (5, 98), (5, 152), (5, 13), (5, 163), (5, 40), (5, 51), (5, 67), (5, 110), (5, 132), (5, 9), (5, 175), (5, 20), (5, 157), (5, 63), (5, 79), (5, 106), (5, 128), (5, 117), (5, 171), (5, 16), (5, 182), (5, 59), (5, 75), (5, 86), (5, 140), (5, 21), (5, 113), (5, 151), (5, 28)]
 final: [(54, 13), (54, 26), (54, 189), (54, 91), (54, 124), (54, 194), (54, 152), (54, 58), (54, 177), (54, 63), (54, 95), (54, 112), (54, 38), (54, 181), (54, 83), (54, 116), (54, 105), (54, 17), (54, 175), (54, 25), (54, 50), (54, 24), (54, 87), (54, 72), (54, 3), (54, 151), (54, 109), (54, 10), (54, 61), (54, 43), (54, 166), (54, 76), (54, 97), (54, 47), (54, 129), (54, 186), (54, 64), (54, 101), (54, 23), (54, 133), (54, 68), (54, 1), (54, 121), (54, 156), (54, 153), (54, 39), (54, 178), (54, 88), (54, 142), (54, 125), (54, 45), (54, 157), (54, 59), (54, 182), (54, 184), (54, 92), (54, 171), (54, 113), (54, 21), (54, 163), (54, 106), (54, 28), (54, 170), (54, 145), (54, 138), (54, 80), (54, 7), (54, 117), (54, 192), (54, 110), (54, 14), (54, 30), (54, 149), (54, 51), (54, 84), (54, 56), (54, 73), (54, 98), (54, 35), (54, 18), (54, 55), (54, 130), (54, 42), (54, 190), (54, 77), (54, 161), (54, 102), (54, 11), (54, 134), (54, 44), (54, 5), (54, 65), (54, 122), (54, 144), (54, 155), (54, 15), (54, 62), (54, 69), (54, 126), (54, 158), (54, 40), (54, 36), (54, 179), (54, 89), (54, 167), (54, 114), (54, 16), (54, 174), (54, 146), (54, 27), (54, 183), (54, 93), (54, 118), (54, 2), (54, 107), (54, 195), (54, 150), (54, 60), (54, 81), (54, 172), (54, 74), (54, 193), (54, 139), (54, 111), (54, 85), (54, 78), (54, 99), (54, 22), (54, 52), (54, 131), (54, 41), (54, 164), (54, 66), (54, 0), (54, 148), (54, 103), (54, 8), (54, 135), (54, 70), (54, 37), (54, 137), (54, 123), (54, 176), (54, 12), (54, 33), (54, 188), (54, 187), (54, 90), (54, 127), (54, 162), (54, 31), (54, 159), (54, 94), (54, 6), (54, 115), (54, 147), (54, 48), (54, 180), (54, 82), (54, 169), (54, 143), (54, 119), (54, 104), (54, 136), (54, 185), (54, 86), (54, 173), (54, 75), (54, 160), (54, 108), (54, 29), (54, 49), (54, 140), (54, 4), (54, 79), (54, 96), (54, 54), (54, 154), (54, 53), (54, 128), (54, 46), (54, 165), (54, 57), (54, 141), (54, 67), (54, 100), (54, 32), (54, 168), (54, 20), (54, 9), (54, 132), (54, 191), (54, 34), (54, 71), (54, 120), (54, 19)]
10/09/2023 11:44:45 AM DEBUG state: Concatenation 
 init: [(5, 178), (5, 194), (5, 39), (5, 82), (5, 136), (5, 125), (5, 147), (5, 24), (5, 190), (5, 35), (5, 94), (5, 121), (5, 159), (5, 4), (5, 186), (5, 47), (5, 90), (5, 101), (5, 155), (5, 0), (5, 166), (5, 54), (5, 70), (5, 97), (5, 135), (5, 12), (5, 162), (5, 23), (5, 50), (5, 66), (5, 109), (5, 131), (5, 8), (5, 174), (5, 19), (5, 62), (5, 78), (5, 105), (5, 143), (5, 116), (5, 170), (5, 31), (5, 181), (5, 58), (5, 74), (5, 85), (5, 139), (5, 112), (5, 150), (5, 27), (5, 177), (5, 38), (5, 193), (5, 81), (5, 124), (5, 146), (5, 7), (5, 189), (5, 34), (5, 93), (5, 120), (5, 158), (5, 3), (5, 185), (5, 46), (5, 33), (5, 89), (5, 100), (5, 154), (5, 15), (5, 165), (5, 42), (5, 53), (5, 69), (5, 96), (5, 134), (5, 11), (5, 161), (5, 22), (5, 49), (5, 65), (5, 108), (5, 130), (5, 119), (5, 173), (5, 18), (5, 61), (5, 77), (5, 104), (5, 142), (5, 115), (5, 169), (5, 30), (5, 180), (5, 57), (5, 73), (5, 84), (5, 138), (5, 127), (5, 149), (5, 26), (5, 176), (5, 37), (5, 192), (5, 80), (5, 123), (5, 145), (5, 6), (5, 188), (5, 92), (5, 103), (5, 2), (5, 184), (5, 45), (5, 88), (5, 99), (5, 153), (5, 14), (5, 164), (5, 41), (5, 52), (5, 68), (5, 111), (5, 133), (5, 10), (5, 160), (5, 43), (5, 48), (5, 64), (5, 107), (5, 129), (5, 118), (5, 172), (5, 17), (5, 183), (5, 60), (5, 76), (5, 87), (5, 141), (5, 114), (5, 168), (5, 29), (5, 179), (5, 56), (5, 195), (5, 72), (5, 83), (5, 137), (5, 126), (5, 148), (5, 25), (5, 191), (5, 36), (5, 95), (5, 122), (5, 144), (5, 5), (5, 187), (5, 32), (5, 91), (5, 102), (5, 156), (5, 1), (5, 167), (5, 44), (5, 55), (5, 71), (5, 98), (5, 152), (5, 13), (5, 163), (5, 40), (5, 51), (5, 67), (5, 110), (5, 132), (5, 9), (5, 175), (5, 20), (5, 157), (5, 63), (5, 79), (5, 106), (5, 128), (5, 117), (5, 171), (5, 16), (5, 182), (5, 59), (5, 75), (5, 86), (5, 140), (5, 21), (5, 113), (5, 151), (5, 28)]
 final: [(54, 13), (54, 26), (54, 189), (54, 91), (54, 124), (54, 194), (54, 152), (54, 58), (54, 177), (54, 63), (54, 95), (54, 112), (54, 38), (54, 181), (54, 83), (54, 116), (54, 105), (54, 17), (54, 175), (54, 25), (54, 50), (54, 24), (54, 87), (54, 72), (54, 3), (54, 151), (54, 109), (54, 10), (54, 61), (54, 43), (54, 166), (54, 76), (54, 97), (54, 47), (54, 129), (54, 186), (54, 64), (54, 101), (54, 23), (54, 133), (54, 68), (54, 1), (54, 121), (54, 156), (54, 153), (54, 39), (54, 178), (54, 88), (54, 142), (54, 125), (54, 45), (54, 157), (54, 59), (54, 182), (54, 184), (54, 92), (54, 171), (54, 113), (54, 21), (54, 163), (54, 106), (54, 28), (54, 170), (54, 145), (54, 138), (54, 80), (54, 7), (54, 117), (54, 192), (54, 110), (54, 14), (54, 30), (54, 149), (54, 51), (54, 84), (54, 56), (54, 73), (54, 98), (54, 35), (54, 18), (54, 55), (54, 130), (54, 42), (54, 190), (54, 77), (54, 161), (54, 102), (54, 11), (54, 134), (54, 44), (54, 5), (54, 65), (54, 122), (54, 144), (54, 155), (54, 15), (54, 62), (54, 69), (54, 126), (54, 158), (54, 40), (54, 36), (54, 179), (54, 89), (54, 167), (54, 114), (54, 16), (54, 174), (54, 146), (54, 27), (54, 183), (54, 93), (54, 118), (54, 2), (54, 107), (54, 195), (54, 150), (54, 60), (54, 81), (54, 172), (54, 74), (54, 193), (54, 139), (54, 111), (54, 85), (54, 78), (54, 99), (54, 22), (54, 52), (54, 131), (54, 41), (54, 164), (54, 66), (54, 0), (54, 148), (54, 103), (54, 8), (54, 135), (54, 70), (54, 37), (54, 137), (54, 123), (54, 176), (54, 12), (54, 33), (54, 188), (54, 187), (54, 90), (54, 127), (54, 162), (54, 31), (54, 159), (54, 94), (54, 6), (54, 115), (54, 147), (54, 48), (54, 180), (54, 82), (54, 169), (54, 143), (54, 119), (54, 104), (54, 136), (54, 185), (54, 86), (54, 173), (54, 75), (54, 160), (54, 108), (54, 29), (54, 49), (54, 140), (54, 4), (54, 79), (54, 96), (54, 54), (54, 154), (54, 53), (54, 128), (54, 46), (54, 165), (54, 57), (54, 141), (54, 67), (54, 100), (54, 32), (54, 168), (54, 20), (54, 9), (54, 132), (54, 191), (54, 34), (54, 71), (54, 120), (54, 19)]
10/14/2023 02:08:20 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/14/2023 02:08:20 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/14/2023 02:08:20 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/14/2023 02:08:20 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/14/2023 02:08:20 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/14/2023 02:08:20 PM DEBUG [spec] No of nodes: 4
10/14/2023 02:08:20 PM DEBUG [spec] No of edges: 5
10/14/2023 02:08:20 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/14/2023 02:08:20 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/14/2023 02:08:41 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/14/2023 02:08:41 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/14/2023 02:08:41 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/14/2023 02:08:41 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/14/2023 02:08:41 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/14/2023 02:08:41 PM DEBUG [spec] No of nodes: 4
10/14/2023 02:08:41 PM DEBUG [spec] No of edges: 5
10/14/2023 02:08:41 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/14/2023 02:08:41 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/14/2023 02:09:18 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/14/2023 02:09:18 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/14/2023 02:09:18 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/14/2023 02:09:18 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/14/2023 02:09:18 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/14/2023 02:09:18 PM DEBUG [spec] No of nodes: 4
10/14/2023 02:09:18 PM DEBUG [spec] No of edges: 5
10/14/2023 02:09:18 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/14/2023 02:09:18 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/14/2023 02:10:36 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/14/2023 02:10:36 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/14/2023 02:10:36 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/14/2023 02:10:36 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/14/2023 02:10:36 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/14/2023 02:10:36 PM DEBUG [spec] No of nodes: 4
10/14/2023 02:10:36 PM DEBUG [spec] No of edges: 5
10/14/2023 02:10:36 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/14/2023 02:10:36 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/14/2023 02:30:30 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/14/2023 02:30:30 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/14/2023 02:30:31 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/14/2023 02:30:31 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/14/2023 02:30:31 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/14/2023 02:30:31 PM DEBUG [spec] No of nodes: 4
10/14/2023 02:30:31 PM DEBUG [spec] No of edges: 5
10/14/2023 02:30:31 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/14/2023 02:30:31 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/14/2023 02:33:33 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/14/2023 02:33:33 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/14/2023 02:33:33 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/14/2023 02:33:33 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/14/2023 02:33:33 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/14/2023 02:33:33 PM DEBUG [spec] No of nodes: 4
10/14/2023 02:33:33 PM DEBUG [spec] No of edges: 5
10/14/2023 02:33:33 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/14/2023 02:33:33 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/14/2023 02:49:59 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/14/2023 02:52:38 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/14/2023 02:53:13 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/14/2023 02:53:36 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/14/2023 02:57:51 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/14/2023 03:17:42 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/14/2023 03:27:33 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/14/2023 03:27:33 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/14/2023 03:27:33 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/14/2023 03:27:33 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/14/2023 03:27:33 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/14/2023 03:27:33 PM DEBUG [spec] No of nodes: 4
10/14/2023 03:27:33 PM DEBUG [spec] No of edges: 5
10/14/2023 03:27:33 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/14/2023 03:27:33 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/14/2023 04:48:19 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/15/2023 08:44:48 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/15/2023 08:46:48 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/15/2023 08:47:10 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/15/2023 08:49:38 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/15/2023 09:46:15 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/15/2023 09:58:04 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/15/2023 09:58:04 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/15/2023 09:58:04 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/15/2023 09:58:04 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/15/2023 09:58:04 PM DEBUG [spec] No of nodes: 4
10/15/2023 09:58:04 PM DEBUG [spec] No of edges: 5
10/15/2023 09:58:04 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/15/2023 09:58:04 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/15/2023 10:00:04 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/15/2023 10:40:11 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/15/2023 10:40:36 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/15/2023 10:48:59 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/15/2023 11:00:55 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 02:30:44 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 02:30:44 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 02:30:44 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 02:30:44 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 02:30:44 PM DEBUG [spec] No of nodes: 4
10/16/2023 02:30:44 PM DEBUG [spec] No of edges: 5
10/16/2023 02:30:44 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 02:30:44 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/16/2023 02:32:31 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 02:44:58 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 02:46:43 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 02:52:02 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 02:52:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 02:52:04 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 02:52:05 PM DEBUG [spec] No of nodes: 4
10/16/2023 02:52:05 PM DEBUG [spec] No of edges: 5
10/16/2023 02:52:17 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 02:52:18 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/16/2023 02:57:12 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 02:59:23 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 02:59:23 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 03:07:04 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 03:07:05 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 03:07:05 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 03:07:06 PM DEBUG [spec] No of nodes: 4
10/16/2023 03:07:07 PM DEBUG [spec] No of edges: 5
10/16/2023 03:07:42 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 03:07:45 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/16/2023 03:31:31 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 03:31:31 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 03:31:51 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 03:31:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 03:31:51 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 03:31:52 PM DEBUG [spec] No of nodes: 4
10/16/2023 03:31:52 PM DEBUG [spec] No of edges: 5
10/16/2023 03:31:56 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 03:31:58 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/16/2023 04:07:44 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 04:07:44 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 04:07:44 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 04:07:44 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 04:07:44 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 04:07:44 PM DEBUG [spec] No of nodes: 4
10/16/2023 04:07:44 PM DEBUG [spec] No of edges: 5
10/16/2023 04:07:44 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 04:07:44 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/16/2023 04:18:53 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 04:18:53 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 04:18:53 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 04:18:53 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 04:18:53 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 04:18:53 PM DEBUG [spec] No of nodes: 4
10/16/2023 04:18:53 PM DEBUG [spec] No of edges: 5
10/16/2023 04:18:53 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 04:18:53 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/16/2023 04:21:46 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 04:21:46 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 04:21:46 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 04:21:46 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 04:21:46 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 04:21:46 PM DEBUG [spec] No of nodes: 4
10/16/2023 04:21:46 PM DEBUG [spec] No of edges: 5
10/16/2023 04:21:46 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 04:21:46 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/16/2023 04:22:33 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 04:22:33 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 04:22:33 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 04:22:33 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 04:22:33 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 04:22:33 PM DEBUG [spec] No of nodes: 4
10/16/2023 04:22:33 PM DEBUG [spec] No of edges: 5
10/16/2023 04:22:33 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 04:22:33 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/16/2023 04:32:58 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 04:32:58 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 04:32:58 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 04:32:58 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 04:32:58 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 04:32:58 PM DEBUG [spec] No of nodes: 4
10/16/2023 04:32:58 PM DEBUG [spec] No of edges: 5
10/16/2023 04:32:58 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 04:32:58 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/16/2023 07:31:57 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 07:31:57 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 07:31:57 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 07:31:57 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 07:31:57 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 07:31:57 PM DEBUG [spec] No of nodes: 4
10/16/2023 07:31:57 PM DEBUG [spec] No of edges: 5
10/16/2023 07:31:57 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 07:31:57 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/16/2023 08:19:27 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 08:19:27 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 08:19:27 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 08:19:27 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 08:19:27 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 08:19:27 PM DEBUG [spec] No of nodes: 4
10/16/2023 08:19:27 PM DEBUG [spec] No of edges: 5
10/16/2023 08:19:27 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 08:19:27 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/16/2023 08:25:36 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 08:25:36 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 08:25:36 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 08:25:36 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 08:25:36 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 08:25:36 PM DEBUG [spec] No of nodes: 4
10/16/2023 08:25:36 PM DEBUG [spec] No of edges: 5
10/16/2023 08:25:36 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 08:25:36 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/16/2023 08:26:04 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 08:26:04 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 08:26:04 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 08:26:04 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 08:26:04 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 08:26:04 PM DEBUG [spec] No of nodes: 4
10/16/2023 08:26:04 PM DEBUG [spec] No of edges: 5
10/16/2023 08:26:04 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 08:26:04 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/16/2023 08:34:06 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 08:34:06 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 08:34:06 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 08:34:06 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 08:34:06 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 08:34:06 PM DEBUG [spec] No of nodes: 4
10/16/2023 08:34:06 PM DEBUG [spec] No of edges: 5
10/16/2023 08:34:06 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 08:34:06 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/16/2023 08:40:01 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 08:40:01 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 08:40:01 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 08:40:01 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 08:40:01 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 08:40:01 PM DEBUG [spec] No of nodes: 4
10/16/2023 08:40:01 PM DEBUG [spec] No of edges: 5
10/16/2023 08:40:01 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 08:40:01 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/16/2023 08:49:00 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/16/2023 08:49:00 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/16/2023 08:49:00 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/16/2023 08:49:00 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/16/2023 08:49:00 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/16/2023 08:49:00 PM DEBUG [spec] No of nodes: 4
10/16/2023 08:49:00 PM DEBUG [spec] No of edges: 5
10/16/2023 08:49:00 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/16/2023 08:49:00 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/21/2023 01:14:31 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/21/2023 01:14:31 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/21/2023 01:16:47 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/21/2023 01:16:47 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/21/2023 01:26:44 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/21/2023 01:26:44 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/27/2023 12:20:55 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/27/2023 12:21:41 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/27/2023 12:22:53 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/27/2023 12:22:53 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/27/2023 12:22:54 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/27/2023 12:22:55 PM DEBUG [spec] No of nodes: 4
10/27/2023 12:22:55 PM DEBUG [spec] No of edges: 5
10/27/2023 12:22:59 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/27/2023 12:23:00 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/27/2023 12:54:07 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/27/2023 12:54:07 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/27/2023 12:54:07 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/27/2023 12:54:07 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/27/2023 12:54:07 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/27/2023 12:54:07 PM DEBUG [spec] No of nodes: 4
10/27/2023 12:54:07 PM DEBUG [spec] No of edges: 5
10/27/2023 12:54:07 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/27/2023 12:54:07 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/27/2023 01:00:23 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/27/2023 01:00:23 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/27/2023 01:00:23 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/27/2023 01:00:23 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/27/2023 01:00:23 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/27/2023 01:00:23 PM DEBUG [spec] No of nodes: 4
10/27/2023 01:00:23 PM DEBUG [spec] No of edges: 5
10/27/2023 01:00:23 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/27/2023 01:00:23 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/27/2023 01:01:07 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/27/2023 01:01:07 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/27/2023 01:01:07 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/27/2023 01:01:07 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/27/2023 01:01:07 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/27/2023 01:01:07 PM DEBUG [spec] No of nodes: 6
10/27/2023 01:01:07 PM DEBUG [spec] No of edges: 9
10/27/2023 01:01:07 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/27/2023 01:01:07 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
10/27/2023 01:01:56 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/27/2023 01:01:56 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 3 not B )
10/27/2023 01:01:56 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/27/2023 01:01:56 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/27/2023 01:01:56 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/27/2023 01:01:56 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/27/2023 01:01:56 PM DEBUG [spec] No of nodes: 6
10/27/2023 01:01:56 PM DEBUG [spec] No of edges: 5
10/27/2023 01:01:56 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/27/2023 01:01:56 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/27/2023 01:01:56 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/27/2023 01:01:56 PM DEBUG [spec] No of nodes: 6
10/27/2023 01:01:56 PM DEBUG [spec] No of edges: 9
10/27/2023 01:02:22 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/27/2023 01:02:22 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 3 not B )
10/27/2023 01:02:22 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/27/2023 01:02:22 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/27/2023 01:02:22 PM DEBUG [spec] No of nodes: 6
10/27/2023 01:02:22 PM DEBUG [spec] No of edges: 5
10/27/2023 01:02:22 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/27/2023 01:02:22 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 5)!
10/27/2023 01:02:22 PM INFO Trap states were added.
10/27/2023 01:02:22 PM INFO Constructing product automaton with infinity DFA!
10/27/2023 01:02:22 PM INFO Product automaton size is: (12, 17)
10/27/2023 01:02:22 PM INFO The total number of nodes is 5
10/27/2023 01:02:22 PM INFO The total number of edges is 6
10/27/2023 01:02:22 PM INFO The result of the verification procedure is False!
10/27/2023 01:04:18 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/27/2023 01:04:18 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/27/2023 01:04:18 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/27/2023 01:04:18 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/27/2023 01:04:18 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/27/2023 01:04:18 PM DEBUG [spec] No of nodes: 6
10/27/2023 01:04:18 PM DEBUG [spec] No of edges: 9
10/27/2023 01:04:18 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/27/2023 01:04:18 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
10/27/2023 01:07:05 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/27/2023 01:07:05 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/27/2023 01:07:05 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/27/2023 01:07:05 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/27/2023 01:07:05 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/27/2023 01:07:05 PM DEBUG [spec] No of nodes: 6
10/27/2023 01:07:05 PM DEBUG [spec] No of edges: 9
10/27/2023 01:07:05 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/27/2023 01:07:05 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
10/27/2023 04:02:21 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/27/2023 04:02:48 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/27/2023 04:03:05 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/27/2023 04:03:05 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/27/2023 04:03:06 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/27/2023 04:03:06 PM DEBUG [spec] No of nodes: 6
10/27/2023 04:03:06 PM DEBUG [spec] No of edges: 9
10/27/2023 04:03:08 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/27/2023 04:03:09 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
10/27/2023 04:04:07 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/27/2023 04:04:38 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/27/2023 04:04:48 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/27/2023 04:04:48 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/27/2023 04:04:49 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/27/2023 04:04:49 PM DEBUG [spec] No of nodes: 6
10/27/2023 04:04:49 PM DEBUG [spec] No of edges: 9
10/27/2023 04:04:50 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/27/2023 04:04:51 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
10/27/2023 04:06:36 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/27/2023 04:06:41 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/27/2023 04:06:57 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/27/2023 04:06:58 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/27/2023 04:06:58 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/27/2023 04:06:59 PM DEBUG [spec] No of nodes: 6
10/27/2023 04:06:59 PM DEBUG [spec] No of edges: 9
10/27/2023 04:07:03 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/27/2023 04:07:04 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
10/28/2023 12:21:13 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/28/2023 12:21:13 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/28/2023 12:21:13 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/28/2023 12:21:13 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 12:21:13 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/28/2023 12:21:13 PM DEBUG [spec] No of nodes: 6
10/28/2023 12:21:13 PM DEBUG [spec] No of edges: 9
10/28/2023 12:21:13 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/28/2023 12:21:13 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
10/28/2023 12:22:03 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/28/2023 12:22:03 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/28/2023 12:22:03 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/28/2023 12:22:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 12:22:03 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/28/2023 12:22:03 PM DEBUG [spec] No of nodes: 6
10/28/2023 12:22:03 PM DEBUG [spec] No of edges: 9
10/28/2023 12:22:03 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/28/2023 12:22:03 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
10/28/2023 12:22:32 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/28/2023 12:22:32 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/28/2023 12:22:32 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/28/2023 12:22:32 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 12:22:32 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/28/2023 12:22:32 PM DEBUG [spec] No of nodes: 6
10/28/2023 12:22:32 PM DEBUG [spec] No of edges: 9
10/28/2023 12:22:32 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/28/2023 12:22:32 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
10/28/2023 12:23:19 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/28/2023 12:23:19 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/28/2023 12:23:19 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/28/2023 12:23:19 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 12:23:19 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/28/2023 12:23:19 PM DEBUG [spec] No of nodes: 6
10/28/2023 12:23:19 PM DEBUG [spec] No of edges: 9
10/28/2023 12:23:19 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/28/2023 12:23:20 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
10/28/2023 12:24:30 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/28/2023 12:24:30 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/28/2023 12:24:30 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/28/2023 12:24:30 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 12:24:30 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/28/2023 12:24:30 PM DEBUG [spec] No of nodes: 6
10/28/2023 12:24:30 PM DEBUG [spec] No of edges: 9
10/28/2023 12:24:30 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/28/2023 12:24:30 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
10/28/2023 12:26:26 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/28/2023 12:26:26 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/28/2023 12:26:26 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/28/2023 12:26:26 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 12:26:26 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/28/2023 12:26:26 PM DEBUG [spec] No of nodes: 6
10/28/2023 12:26:26 PM DEBUG [spec] No of edges: 9
10/28/2023 12:26:26 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/28/2023 12:26:26 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
10/28/2023 12:26:26 PM INFO Trap states were added.
10/28/2023 12:26:26 PM INFO Constructing product automaton with infinity DFA!
10/28/2023 12:26:26 PM INFO Product automaton size is: (10, 14)
10/28/2023 12:26:26 PM INFO The total number of nodes is 5
10/28/2023 12:26:26 PM INFO The total number of edges is 6
10/28/2023 12:26:26 PM INFO The result of the verification procedure is False!
10/28/2023 12:27:09 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/28/2023 12:27:09 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/28/2023 12:27:09 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/28/2023 12:27:09 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 12:27:09 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/28/2023 12:27:09 PM DEBUG [spec] No of nodes: 6
10/28/2023 12:27:09 PM DEBUG [spec] No of edges: 9
10/28/2023 12:27:09 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/28/2023 12:27:09 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
10/28/2023 12:27:11 PM INFO Trap states were added.
10/28/2023 12:27:11 PM INFO Constructing product automaton with infinity DFA!
10/28/2023 12:30:28 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/28/2023 12:30:28 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/28/2023 12:30:28 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/28/2023 12:30:28 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 12:30:28 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/28/2023 12:30:28 PM DEBUG [spec] No of nodes: 6
10/28/2023 12:30:28 PM DEBUG [spec] No of edges: 9
10/28/2023 12:30:28 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/28/2023 12:30:28 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
10/28/2023 12:46:05 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
10/28/2023 12:46:05 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
10/28/2023 12:46:05 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
10/28/2023 12:46:05 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 12:46:05 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

10/28/2023 12:46:05 PM DEBUG [spec] No of nodes: 6
10/28/2023 12:46:05 PM DEBUG [spec] No of edges: 9
10/28/2023 12:46:05 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
10/28/2023 12:46:05 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
10/28/2023 12:47:47 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/28/2023 12:47:47 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/28/2023 12:47:47 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/28/2023 12:47:47 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 12:47:47 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/28/2023 12:47:47 PM DEBUG [spec] No of nodes: 4
10/28/2023 12:47:47 PM DEBUG [spec] No of edges: 5
10/28/2023 12:47:47 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/28/2023 12:47:47 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/28/2023 01:13:08 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/28/2023 01:13:08 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/28/2023 01:13:08 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/28/2023 01:13:08 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 01:13:08 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/28/2023 01:13:08 PM DEBUG [spec] No of nodes: 4
10/28/2023 01:13:08 PM DEBUG [spec] No of edges: 5
10/28/2023 01:13:08 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/28/2023 01:13:08 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/28/2023 01:26:39 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/28/2023 01:26:39 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/28/2023 01:26:39 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/28/2023 01:26:39 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 01:26:39 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/28/2023 01:26:39 PM DEBUG [spec] No of nodes: 4
10/28/2023 01:26:39 PM DEBUG [spec] No of edges: 5
10/28/2023 01:26:39 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/28/2023 01:26:39 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/28/2023 01:38:33 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/28/2023 01:38:33 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/28/2023 01:38:33 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/28/2023 01:38:33 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 01:38:33 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/28/2023 01:38:33 PM DEBUG [spec] No of nodes: 4
10/28/2023 01:38:33 PM DEBUG [spec] No of edges: 5
10/28/2023 01:38:33 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/28/2023 01:38:33 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/28/2023 01:38:44 PM INFO Trap states were added.
10/28/2023 01:39:37 PM INFO Constructing product automaton with infinity DFA!
10/28/2023 02:08:22 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/28/2023 02:08:22 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/28/2023 02:08:22 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/28/2023 02:08:22 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 02:08:22 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/28/2023 02:08:22 PM DEBUG [spec] No of nodes: 4
10/28/2023 02:08:22 PM DEBUG [spec] No of edges: 5
10/28/2023 02:08:23 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/28/2023 02:08:23 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/28/2023 02:08:38 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/28/2023 02:08:38 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/28/2023 02:08:38 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/28/2023 02:08:38 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 02:08:38 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/28/2023 02:08:38 PM DEBUG [spec] No of nodes: 4
10/28/2023 02:08:38 PM DEBUG [spec] No of edges: 5
10/28/2023 02:08:38 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/28/2023 02:08:38 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/28/2023 02:08:47 PM INFO Trap states were added.
10/28/2023 02:09:34 PM INFO Constructing product automaton with infinity DFA!
10/28/2023 02:09:55 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/28/2023 02:09:55 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/28/2023 02:09:55 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/28/2023 02:09:55 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 02:09:55 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/28/2023 02:09:55 PM DEBUG [spec] No of nodes: 4
10/28/2023 02:09:55 PM DEBUG [spec] No of edges: 5
10/28/2023 02:09:55 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/28/2023 02:09:55 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/28/2023 02:10:03 PM INFO Trap states were added.
10/28/2023 02:10:05 PM INFO Constructing product automaton with infinity DFA!
10/28/2023 02:12:06 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/28/2023 02:12:06 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/28/2023 02:12:06 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/28/2023 02:12:06 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 02:12:06 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/28/2023 02:12:06 PM DEBUG [spec] No of nodes: 4
10/28/2023 02:12:06 PM DEBUG [spec] No of edges: 5
10/28/2023 02:12:06 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/28/2023 02:12:06 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/28/2023 02:12:06 PM INFO Trap states were added.
10/28/2023 02:12:06 PM INFO Constructing product automaton with infinity DFA!
10/28/2023 02:12:06 PM INFO Product automaton size is: (8, 10)
10/28/2023 02:12:06 PM INFO The total number of nodes is 5
10/28/2023 02:12:06 PM INFO The total number of edges is 6
10/28/2023 02:12:06 PM INFO The result of the verification procedure is True!
10/28/2023 03:14:11 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/28/2023 03:14:11 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/28/2023 03:14:11 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/28/2023 03:14:11 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 03:14:11 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/28/2023 03:14:11 PM DEBUG [spec] No of nodes: 4
10/28/2023 03:14:11 PM DEBUG [spec] No of edges: 5
10/28/2023 03:14:11 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/28/2023 03:14:11 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/28/2023 03:14:38 PM INFO Trap states were added.
10/28/2023 03:14:38 PM INFO Constructing product automaton with infinity DFA!
10/28/2023 03:16:29 PM INFO Product automaton size is: (8, 10)
10/28/2023 03:16:41 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/28/2023 03:16:41 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/28/2023 03:16:41 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/28/2023 03:16:41 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/28/2023 03:16:41 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/28/2023 03:16:41 PM DEBUG [spec] No of nodes: 4
10/28/2023 03:16:41 PM DEBUG [spec] No of edges: 5
10/28/2023 03:16:41 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/28/2023 03:16:41 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/28/2023 03:16:45 PM INFO Trap states were added.
10/28/2023 03:16:46 PM INFO Constructing product automaton with infinity DFA!
10/29/2023 02:58:41 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/29/2023 02:58:41 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/29/2023 02:58:41 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/29/2023 02:58:41 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/29/2023 02:58:41 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/29/2023 02:58:41 PM DEBUG [spec] No of nodes: 4
10/29/2023 02:58:41 PM DEBUG [spec] No of edges: 5
10/29/2023 02:58:41 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/29/2023 02:58:42 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/29/2023 02:58:47 PM INFO Trap states were added.
10/29/2023 02:58:47 PM INFO Constructing product automaton with infinity DFA!
10/29/2023 02:58:49 PM INFO Product automaton size is: (8, 10)
10/29/2023 02:59:09 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/29/2023 02:59:09 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/29/2023 02:59:09 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/29/2023 02:59:09 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/29/2023 02:59:09 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/29/2023 02:59:09 PM DEBUG [spec] No of nodes: 4
10/29/2023 02:59:09 PM DEBUG [spec] No of edges: 5
10/29/2023 02:59:09 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/29/2023 02:59:09 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/29/2023 02:59:11 PM INFO Trap states were added.
10/29/2023 02:59:11 PM INFO Constructing product automaton with infinity DFA!
10/30/2023 01:03:38 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 01:03:38 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/30/2023 01:03:38 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/30/2023 01:03:38 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/30/2023 01:03:38 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/30/2023 01:03:38 PM DEBUG [spec] No of nodes: 4
10/30/2023 01:03:38 PM DEBUG [spec] No of edges: 5
10/30/2023 01:03:38 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/30/2023 01:03:38 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/30/2023 01:03:40 PM INFO Trap states were added.
10/30/2023 01:03:40 PM INFO Constructing product automaton with infinity DFA!
10/30/2023 01:10:49 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 01:10:49 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/30/2023 01:10:49 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/30/2023 01:10:49 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/30/2023 01:10:49 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/30/2023 01:10:49 PM DEBUG [spec] No of nodes: 4
10/30/2023 01:10:49 PM DEBUG [spec] No of edges: 5
10/30/2023 01:10:49 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/30/2023 01:10:49 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/30/2023 01:14:06 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 01:14:06 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/30/2023 01:14:06 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/30/2023 01:14:06 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/30/2023 01:14:06 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/30/2023 01:14:06 PM DEBUG [spec] No of nodes: 4
10/30/2023 01:14:06 PM DEBUG [spec] No of edges: 5
10/30/2023 01:14:06 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/30/2023 01:14:06 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/30/2023 01:27:24 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 01:27:24 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/30/2023 01:27:24 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/30/2023 01:27:24 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/30/2023 01:27:24 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/30/2023 01:27:24 PM DEBUG [spec] No of nodes: 4
10/30/2023 01:27:24 PM DEBUG [spec] No of edges: 5
10/30/2023 01:27:25 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/30/2023 01:27:26 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/30/2023 01:47:05 PM INFO Trap states were added.
10/30/2023 01:47:05 PM INFO Constructing product automaton with infinity DFA!
10/30/2023 01:50:25 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 01:50:25 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/30/2023 01:50:25 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/30/2023 01:50:25 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/30/2023 01:50:25 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/30/2023 01:50:25 PM DEBUG [spec] No of nodes: 4
10/30/2023 01:50:25 PM DEBUG [spec] No of edges: 5
10/30/2023 01:50:25 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/30/2023 01:50:25 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/30/2023 01:50:40 PM INFO Trap states were added.
10/30/2023 01:50:41 PM INFO Constructing product automaton with infinity DFA!
10/30/2023 01:54:09 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 01:54:09 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
10/30/2023 01:54:09 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/30/2023 01:54:09 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/30/2023 01:54:09 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

10/30/2023 01:54:09 PM DEBUG [spec] No of nodes: 4
10/30/2023 01:54:09 PM DEBUG [spec] No of edges: 5
10/30/2023 01:54:09 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/30/2023 01:54:09 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 5)!
10/30/2023 02:07:22 PM INFO Trap states were added.
10/30/2023 02:07:22 PM INFO Constructing product automaton with infinity DFA!
10/30/2023 02:14:24 PM INFO Product automaton size is: (8, 10)
10/30/2023 02:15:20 PM INFO The total number of nodes is 5
10/30/2023 02:15:20 PM INFO The total number of edges is 6
10/30/2023 02:15:21 PM INFO The result of the verification procedure is True!
10/30/2023 02:21:44 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 02:21:44 PM DEBUG [within] Low: 1 High: 2 DFA: (Hold 1 A )
10/30/2023 02:21:44 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/30/2023 02:21:44 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/30/2023 02:21:44 PM DEBUG [spec] No of nodes: 4
10/30/2023 02:21:44 PM DEBUG [spec] No of edges: 3
10/30/2023 02:21:44 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/30/2023 02:21:44 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 3)!
10/30/2023 02:25:53 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 02:25:53 PM DEBUG [within] Low: 1 High: 2 DFA: (Hold 1 A )
10/30/2023 02:28:52 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 02:29:54 PM DEBUG [within] Low: 1 High: 2 DFA: (Hold 1 A )
10/30/2023 02:30:31 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 02:30:31 PM DEBUG [within] Low: 1 High: 2 DFA: (Hold 1 A )
10/30/2023 02:30:39 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/30/2023 02:30:39 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/30/2023 02:30:40 PM DEBUG [spec] No of nodes: 4
10/30/2023 02:30:40 PM DEBUG [spec] No of edges: 3
10/30/2023 02:30:42 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/30/2023 02:30:43 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 3)!
10/30/2023 02:31:00 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 02:31:00 PM DEBUG [within] Low: 1 High: 2 DFA: (Hold 1 A )
10/30/2023 02:31:22 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 02:31:22 PM DEBUG [within] Low: 1 High: 2 DFA: (Hold 1 A )
10/30/2023 02:32:02 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 02:32:05 PM DEBUG [within] Low: 1 High: 2 DFA: (Hold 1 A )
10/30/2023 02:32:19 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 02:56:44 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 02:56:44 PM DEBUG [within] Low: 1 High: 2 DFA: (Hold 1 A )
10/30/2023 02:56:44 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/30/2023 02:56:44 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/30/2023 02:56:44 PM DEBUG [spec] No of nodes: 4
10/30/2023 02:56:44 PM DEBUG [spec] No of edges: 3
10/30/2023 02:56:44 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/30/2023 02:56:44 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 3)!
10/30/2023 02:57:09 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
10/30/2023 02:57:09 PM DEBUG [within] Low: 1 High: 2 DFA: (Hold 1 A )
10/30/2023 02:57:09 PM DEBUG [spec] spec: [H^1 A]^[1, 2] 
10/30/2023 02:57:09 PM DEBUG [spec] mode: Normal DFA: 
Name: (Repeat (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
10/30/2023 02:57:09 PM DEBUG [spec] No of nodes: 4
10/30/2023 02:57:09 PM DEBUG [spec] No of edges: 3
10/30/2023 02:57:09 PM INFO The bound of formula "[H^1 A]^[1, 2] " is (2, 2)!
10/30/2023 02:57:09 PM INFO Translated formula "[H^1 A]^[1, 2] " to infinity DFA of size (4, 3)!
10/30/2023 02:57:09 PM INFO Trap states were added.
10/30/2023 02:57:09 PM INFO Constructing product automaton with infinity DFA!
10/30/2023 02:57:09 PM INFO Product automaton size is: (10, 13)
10/30/2023 02:57:09 PM INFO The total number of nodes is 5
10/30/2023 02:57:09 PM INFO The total number of edges is 6
10/30/2023 02:57:09 PM INFO The result of the verification procedure is False!
11/01/2023 06:06:13 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/01/2023 06:06:13 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/01/2023 06:06:13 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/01/2023 06:06:13 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
11/01/2023 06:06:13 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/01/2023 06:06:13 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
11/01/2023 06:06:13 PM INFO Trap states were added.
11/01/2023 06:06:13 PM INFO Trap states were added.
11/01/2023 06:06:13 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
11/01/2023 06:06:13 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
11/01/2023 06:06:13 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/01/2023 06:06:13 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
11/01/2023 06:06:13 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
11/01/2023 06:06:13 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/01/2023 06:06:13 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
11/01/2023 06:06:13 PM DEBUG [spec] No of nodes: 40
11/01/2023 06:06:13 PM DEBUG [spec] No of edges: 72
11/01/2023 06:06:13 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
11/01/2023 06:06:13 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (40, 72)!
11/01/2023 06:06:13 PM INFO Trap states were added.
11/01/2023 06:06:13 PM INFO Constructing product automaton with infinity DFA!
11/01/2023 06:06:13 PM INFO Product automaton size is: (36, 49)
11/01/2023 06:06:13 PM INFO The total number of nodes is 5
11/01/2023 06:06:13 PM INFO The total number of edges is 6
11/01/2023 06:06:13 PM INFO The result of the verification procedure is False!
11/01/2023 06:08:52 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/01/2023 06:09:48 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/01/2023 06:10:11 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/01/2023 06:15:22 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/02/2023 03:24:55 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/02/2023 03:24:55 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/02/2023 03:24:55 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
11/02/2023 03:24:55 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/02/2023 03:24:55 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
11/02/2023 03:25:23 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/02/2023 03:25:23 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/02/2023 03:25:23 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/02/2023 03:25:23 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
11/02/2023 03:25:23 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/02/2023 03:25:23 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
11/02/2023 03:25:28 PM INFO Trap states were added.
11/02/2023 03:25:28 PM INFO Trap states were added.
11/03/2023 03:09:55 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/03/2023 03:09:55 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/03/2023 03:09:55 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/03/2023 03:09:55 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
11/03/2023 03:09:55 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/03/2023 03:09:55 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
11/03/2023 03:09:57 PM INFO Trap states were added.
11/03/2023 03:09:57 PM INFO Trap states were added.
11/05/2023 05:54:52 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/05/2023 05:54:52 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/05/2023 05:54:52 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/05/2023 05:54:52 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
11/05/2023 05:54:52 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/05/2023 05:54:52 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
11/05/2023 05:54:53 PM INFO Trap states were added.
11/05/2023 05:54:53 PM INFO Trap states were added.
11/05/2023 05:55:48 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/05/2023 05:55:48 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/05/2023 05:55:48 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/05/2023 05:55:48 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
11/05/2023 05:55:48 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/05/2023 05:55:48 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
11/05/2023 05:55:48 PM INFO Trap states were added.
11/05/2023 05:55:48 PM INFO Trap states were added.
11/05/2023 05:55:58 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/05/2023 05:55:58 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/05/2023 05:55:58 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/05/2023 05:55:58 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
11/05/2023 05:55:58 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/05/2023 05:55:58 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
11/05/2023 06:07:34 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/05/2023 06:09:41 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/05/2023 06:13:08 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/05/2023 06:46:32 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/05/2023 06:46:37 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/05/2023 06:46:48 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/05/2023 06:47:36 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
11/05/2023 06:48:53 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/05/2023 06:50:10 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
11/05/2023 06:50:16 PM INFO Trap states were added.
11/05/2023 06:50:16 PM INFO Trap states were added.
11/13/2023 02:14:41 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2023 02:14:41 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/13/2023 02:14:41 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2023 02:14:41 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
11/13/2023 02:14:41 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2023 02:14:41 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
11/13/2023 02:14:41 PM INFO Trap states were added.
11/13/2023 02:14:41 PM INFO Trap states were added.
11/13/2023 02:14:41 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
11/13/2023 02:14:41 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
11/13/2023 02:14:41 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2023 02:14:41 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
11/13/2023 02:14:41 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
11/13/2023 02:14:41 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/13/2023 02:14:41 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
11/13/2023 02:14:41 PM DEBUG [spec] No of nodes: 40
11/13/2023 02:14:41 PM DEBUG [spec] No of edges: 72
11/13/2023 02:14:41 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
11/13/2023 02:14:41 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (40, 72)!
11/13/2023 02:14:41 PM INFO Trap states were added.
11/13/2023 02:14:41 PM INFO Constructing product automaton with infinity DFA!
11/13/2023 02:14:41 PM INFO Product automaton size is: (36, 49)
11/13/2023 02:14:41 PM INFO The total number of nodes is 5
11/13/2023 02:14:41 PM INFO The total number of edges is 6
11/13/2023 02:14:41 PM INFO The result of the verification procedure is False!
12/01/2023 03:42:41 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: {'A'}
12/01/2023 03:42:41 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
12/01/2023 03:42:41 PM DEBUG [spec] spec: [H^1 A]^[1, 2]
12/01/2023 03:42:41 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: {0, 1} 
Initial: dict_keys([3])
Final: {2}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (0, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (1, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (3, 0, {'weight': 0, 'input': {0, 1}, 'guard': '(1)', 'label': '(1)'})]
		
12/01/2023 03:42:41 PM DEBUG [spec] tree:

12/01/2023 03:42:41 PM DEBUG [spec] No of nodes: 4
12/01/2023 03:42:41 PM DEBUG [spec] No of edges: 5
12/01/2023 03:42:41 PM INFO The bound of formula "[H^1 A]^[1, 2]" is (2, 2)!
12/01/2023 03:42:41 PM INFO Translated formula "[H^1 A]^[1, 2]" to infinity DFA of size (4, 5)!
12/01/2023 03:43:19 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: {'A'}
12/01/2023 03:43:19 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
12/01/2023 03:43:19 PM DEBUG [spec] spec: [H^1 A]^[1, 2]
12/01/2023 03:43:19 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: {0, 1} 
Initial: dict_keys([3])
Final: {2}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (0, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (1, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (3, 0, {'weight': 0, 'input': {0, 1}, 'guard': '(1)', 'label': '(1)'})]
		
12/01/2023 03:43:19 PM DEBUG [spec] tree:

12/01/2023 03:43:19 PM DEBUG [spec] No of nodes: 4
12/01/2023 03:43:19 PM DEBUG [spec] No of edges: 5
12/01/2023 03:43:19 PM INFO The bound of formula "[H^1 A]^[1, 2]" is (2, 2)!
12/01/2023 03:43:19 PM INFO Translated formula "[H^1 A]^[1, 2]" to infinity DFA of size (4, 5)!
12/01/2023 03:43:19 PM INFO Trap states were added.
12/01/2023 03:43:19 PM INFO Constructing product automaton with infinity DFA!
12/01/2023 03:49:39 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: {'A'}
12/01/2023 03:49:39 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
12/01/2023 03:49:39 PM DEBUG [spec] spec: [H^1 A]^[1, 2]
12/01/2023 03:49:39 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: {0, 1} 
Initial: dict_keys([3])
Final: {2}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (0, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (1, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (3, 0, {'weight': 0, 'input': {0, 1}, 'guard': '(1)', 'label': '(1)'})]
		
12/01/2023 03:49:39 PM DEBUG [spec] tree:

12/01/2023 03:49:39 PM DEBUG [spec] No of nodes: 4
12/01/2023 03:49:39 PM DEBUG [spec] No of edges: 5
12/01/2023 03:49:39 PM INFO The bound of formula "[H^1 A]^[1, 2]" is (2, 2)!
12/01/2023 03:49:39 PM INFO Translated formula "[H^1 A]^[1, 2]" to infinity DFA of size (4, 5)!
12/01/2023 03:49:39 PM INFO Trap states were added.
12/01/2023 03:49:39 PM INFO Constructing product automaton with infinity DFA!
12/01/2023 03:51:02 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: {'A'}
12/01/2023 03:51:02 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
12/01/2023 03:51:02 PM DEBUG [spec] spec: [H^1 A]^[1, 2]
12/01/2023 03:51:02 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: {0, 1} 
Initial: dict_keys([3])
Final: {2}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (0, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (1, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (3, 0, {'weight': 0, 'input': {0, 1}, 'guard': '(1)', 'label': '(1)'})]
		
12/01/2023 03:51:02 PM DEBUG [spec] tree:

12/01/2023 03:51:02 PM DEBUG [spec] No of nodes: 4
12/01/2023 03:51:02 PM DEBUG [spec] No of edges: 5
12/01/2023 03:51:02 PM INFO The bound of formula "[H^1 A]^[1, 2]" is (2, 2)!
12/01/2023 03:51:02 PM INFO Translated formula "[H^1 A]^[1, 2]" to infinity DFA of size (4, 5)!
12/01/2023 03:51:02 PM INFO Trap states were added.
12/01/2023 03:51:02 PM INFO Constructing product automaton with infinity DFA!
12/01/2023 03:51:02 PM INFO Product automaton size is: (8, 10)
12/01/2023 03:51:02 PM INFO The result of the verification procedure is True!
12/02/2023 11:51:50 AM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: {'A'}
12/02/2023 11:51:50 AM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
12/02/2023 11:51:50 AM DEBUG [spec] spec: [H^1 A]^[1, 2]
12/02/2023 11:51:50 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: {0, 1} 
Initial: dict_keys([3])
Final: {2}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (0, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (1, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (3, 0, {'weight': 0, 'input': {0, 1}, 'guard': '(1)', 'label': '(1)'})]
		
12/02/2023 11:51:50 AM DEBUG [spec] tree:

12/02/2023 11:51:50 AM DEBUG [spec] No of nodes: 4
12/02/2023 11:51:50 AM DEBUG [spec] No of edges: 5
12/02/2023 11:51:50 AM INFO The bound of formula "[H^1 A]^[1, 2]" is (2, 2)!
12/02/2023 11:51:50 AM INFO Translated formula "[H^1 A]^[1, 2]" to infinity DFA of size (4, 5)!
12/02/2023 11:51:50 AM INFO Trap states were added.
12/02/2023 11:51:50 AM INFO Constructing product automaton with infinity DFA!
12/02/2023 11:51:50 AM INFO Product automaton size is: (8, 10)
12/02/2023 11:51:50 AM INFO The result of the verification procedure is True!
12/02/2023 11:52:11 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: {'B', 'D', 'A', 'C'}
12/02/2023 11:52:11 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
12/02/2023 11:52:11 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: {'B', 'D', 'A', 'C'}
12/02/2023 11:52:11 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
12/02/2023 11:52:11 AM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: {'B', 'D', 'A', 'C'}
12/02/2023 11:52:11 AM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
12/02/2023 11:52:11 AM INFO No trap states were added.
12/02/2023 11:52:11 AM INFO No trap states were added.
12/02/2023 11:52:11 AM DEBUG state: Eventually 
 init: [(0, 3), (0, 0), (0, 1)]
 final: [(2, 2)]
12/02/2023 11:52:11 AM DEBUG state: Hold 
 init: [(0, 3), (0, 0), (0, 1)]
 final: [(2, 2)]
12/02/2023 11:52:11 AM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
12/02/2023 11:52:11 AM DEBUG state: Hold 
 init: [(1, 0), (0, 0)]
 final: [(2, 2)]
12/02/2023 11:52:11 AM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
12/02/2023 11:52:45 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: {'A', 'D', 'C', 'B'}
12/02/2023 11:52:45 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
12/02/2023 11:52:45 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: {'A', 'D', 'C', 'B'}
12/02/2023 11:52:45 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
12/02/2023 11:52:45 AM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: {'A', 'D', 'C', 'B'}
12/02/2023 11:52:45 AM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
12/02/2023 11:52:45 AM INFO No trap states were added.
12/02/2023 11:52:45 AM INFO No trap states were added.
12/02/2023 11:52:45 AM DEBUG state: Eventually 
 init: [(0, 3), (0, 0), (0, 1)]
 final: [(2, 2)]
12/02/2023 11:52:45 AM DEBUG state: Hold 
 init: [(0, 3), (0, 0), (0, 1)]
 final: [(2, 2)]
12/02/2023 11:52:45 AM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
12/02/2023 11:52:45 AM DEBUG state: Hold 
 init: [(1, 0), (0, 0)]
 final: [(2, 2)]
12/02/2023 11:52:45 AM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
12/02/2023 11:52:45 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
12/02/2023 11:52:45 AM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: {'A', 'D', 'C', 'B'}
12/02/2023 11:52:45 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
12/02/2023 11:52:45 AM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
12/02/2023 11:52:45 AM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
12/02/2023 11:52:45 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'D': 2, 'C': 4, 'B': 8}
Alphabet: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15} 
Initial: dict_keys([0])
Final: {10}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 1, {'weight': 0, 'input': {1, 3, 5, 7, 9, 11, 13, 15}, 'guard': 'A', 'label': 'A'}), (0, 0, {'weight': 0, 'input': {0, 2, 4, 6, 8, 10, 12, 14}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {1, 3, 5, 7, 9, 11, 13, 15}, 'guard': 'A', 'label': 'A'}), (1, 0, {'weight': 0, 'input': {0, 2, 4, 6, 8, 10, 12, 14}, 'guard': '(else)', 'label': '(else)'}), (2, 3, {'weight': 0, 'input': {1, 3, 5, 7, 9, 11, 13, 15}, 'guard': 'A', 'label': 'A'}), (2, 0, {'weight': 0, 'input': {0, 2, 4, 6, 8, 10, 12, 14}, 'guard': '(else)', 'label': '(else)'}), (3, 4, {'weight': 0, 'input': {8, 9, 10, 11, 12, 13, 14, 15}, 'guard': '(B) & ((1))', 'label': '(B) & ((1))'}), (3, 5, {'weight': 0, 'input': {0, 1, 2, 3, 4, 5, 6, 7}, 'guard': '((else)) & ((1))', 'label': '((else)) & ((1))'}), (4, 6, {'weight': 0, 'input': {4, 5, 6, 7}, 'guard': '((else)) & (C)', 'label': '((else)) & (C)'}), (4, 5, {'weight': 0, 'input': {0, 1, 2, 3}, 'guard': '((else)) & ((else))', 'label': '((else)) & ((else))'}), (4, 7, {'weight': 0, 'input': {8, 9, 10, 11, 12, 13, 14, 15}, 'guard': '((B) & (C)) | ((B) & ((else)))', 'label': '((B) & (C)) | ((B) & ((else)))'}), (5, 8, {'weight': 0, 'input': {12, 13, 14, 15}, 'guard': '(B) & (C)', 'label': '(B) & (C)'}), (5, 4, {'weight': 0, 'input': {8, 9, 10, 11}, 'guard': '(B) & ((else))', 'label': '(B) & ((else))'}), (5, 6, {'weight': 0, 'input': {4, 5, 6, 7}, 'guard': '((else)) & (C)', 'label': '((else)) & (C)'}), (5, 5, {'weight': 0, 'input': {0, 1, 2, 3}, 'guard': '((else)) & ((else))', 'label': '((else)) & ((else))'}), (6, 4, {'weight': 0, 'input': {8, 9, 10, 11}, 'guard': '(B) & ((else))', 'label': '(B) & ((else))'}), (6, 5, {'weight': 0, 'input': {0, 1, 2, 3}, 'guard': '((else)) & ((else))', 'label': '((else)) & ((else))'}), (6, 7, {'weight': 0, 'input': {4, 5, 6, 7, 12, 13, 14, 15}, 'guard': '((B) & (C)) | (((else)) & (C))', 'label': '((B) & (C)) | (((else)) & (C))'}), (7, 9, {'weight': 0, 'input': {2, 3, 6, 7, 10, 11, 14, 15}, 'guard': 'D', 'label': 'D'}), (7, 7, {'weight': 0, 'input': {0, 1, 4, 5, 8, 9, 12, 13}, 'guard': '(else)', 'label': '(else)'}), (8, 7, {'weight': 0, 'input': {4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, 'guard': '((B) & ((else))) | ((((else)) & (C)) | ((B) & (C)))', 'label': '((B) & ((else))) | ((((else)) & (C)) | ((B) & (C)))'}), (8, 5, {'weight': 0, 'input': {0, 1, 2, 3}, 'guard': '((else)) & ((else))', 'label': '((else)) & ((else))'}), (9, 10, {'weight': 0, 'input': {2, 3, 6, 7, 10, 11, 14, 15}, 'guard': 'D', 'label': 'D'}), (9, 7, {'weight': 0, 'input': {0, 1, 4, 5, 8, 9, 12, 13}, 'guard': '(else)', 'label': '(else)'})]
		
12/02/2023 11:53:29 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: {'C', 'B', 'A', 'D'}
12/02/2023 11:53:29 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
12/02/2023 11:53:29 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: {'C', 'B', 'A', 'D'}
12/02/2023 11:53:29 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
12/02/2023 11:53:29 AM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: {'C', 'B', 'A', 'D'}
12/02/2023 11:53:29 AM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
12/02/2023 11:53:29 AM INFO No trap states were added.
12/02/2023 11:53:29 AM INFO No trap states were added.
12/02/2023 11:53:29 AM DEBUG state: Eventually 
 init: [(0, 3), (0, 0), (0, 1)]
 final: [(2, 2)]
12/02/2023 11:53:29 AM DEBUG state: Hold 
 init: [(0, 3), (0, 0), (0, 1)]
 final: [(2, 2)]
12/02/2023 11:53:29 AM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
12/02/2023 11:53:29 AM DEBUG state: Hold 
 init: [(1, 0), (0, 0)]
 final: [(2, 2)]
12/02/2023 11:53:29 AM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
12/02/2023 11:53:29 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
12/02/2023 11:53:29 AM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: {'C', 'B', 'A', 'D'}
12/02/2023 11:53:29 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
12/02/2023 11:53:29 AM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
12/02/2023 11:53:29 AM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
12/02/2023 11:53:29 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'C': 1, 'B': 2, 'A': 4, 'D': 8}
Alphabet: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15} 
Initial: dict_keys([0])
Final: {10}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 1, {'weight': 0, 'input': {4, 5, 6, 7, 12, 13, 14, 15}, 'guard': 'A', 'label': 'A'}), (0, 0, {'weight': 0, 'input': {0, 1, 2, 3, 8, 9, 10, 11}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {4, 5, 6, 7, 12, 13, 14, 15}, 'guard': 'A', 'label': 'A'}), (1, 0, {'weight': 0, 'input': {0, 1, 2, 3, 8, 9, 10, 11}, 'guard': '(else)', 'label': '(else)'}), (2, 3, {'weight': 0, 'input': {4, 5, 6, 7, 12, 13, 14, 15}, 'guard': 'A', 'label': 'A'}), (2, 0, {'weight': 0, 'input': {0, 1, 2, 3, 8, 9, 10, 11}, 'guard': '(else)', 'label': '(else)'}), (3, 4, {'weight': 0, 'input': {2, 3, 6, 7, 10, 11, 14, 15}, 'guard': '(B) & ((1))', 'label': '(B) & ((1))'}), (3, 5, {'weight': 0, 'input': {0, 1, 4, 5, 8, 9, 12, 13}, 'guard': '((else)) & ((1))', 'label': '((else)) & ((1))'}), (4, 6, {'weight': 0, 'input': {1, 13, 5, 9}, 'guard': '((else)) & (C)', 'label': '((else)) & (C)'}), (4, 5, {'weight': 0, 'input': {0, 8, 4, 12}, 'guard': '((else)) & ((else))', 'label': '((else)) & ((else))'}), (4, 7, {'weight': 0, 'input': {2, 3, 6, 7, 10, 11, 14, 15}, 'guard': '((B) & (C)) | ((B) & ((else)))', 'label': '((B) & (C)) | ((B) & ((else)))'}), (5, 8, {'weight': 0, 'input': {11, 3, 15, 7}, 'guard': '(B) & (C)', 'label': '(B) & (C)'}), (5, 4, {'weight': 0, 'input': {2, 10, 6, 14}, 'guard': '(B) & ((else))', 'label': '(B) & ((else))'}), (5, 6, {'weight': 0, 'input': {1, 13, 5, 9}, 'guard': '((else)) & (C)', 'label': '((else)) & (C)'}), (5, 5, {'weight': 0, 'input': {0, 8, 4, 12}, 'guard': '((else)) & ((else))', 'label': '((else)) & ((else))'}), (6, 4, {'weight': 0, 'input': {2, 10, 6, 14}, 'guard': '(B) & ((else))', 'label': '(B) & ((else))'}), (6, 5, {'weight': 0, 'input': {0, 8, 4, 12}, 'guard': '((else)) & ((else))', 'label': '((else)) & ((else))'}), (6, 7, {'weight': 0, 'input': {1, 3, 5, 7, 9, 11, 13, 15}, 'guard': '((B) & (C)) | (((else)) & (C))', 'label': '((B) & (C)) | (((else)) & (C))'}), (7, 9, {'weight': 0, 'input': {8, 9, 10, 11, 12, 13, 14, 15}, 'guard': 'D', 'label': 'D'}), (7, 7, {'weight': 0, 'input': {0, 1, 2, 3, 4, 5, 6, 7}, 'guard': '(else)', 'label': '(else)'}), (8, 7, {'weight': 0, 'input': {1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15}, 'guard': '((B) & ((else))) | ((((else)) & (C)) | ((B) & (C)))', 'label': '((B) & ((else))) | ((((else)) & (C)) | ((B) & (C)))'}), (8, 5, {'weight': 0, 'input': {0, 8, 4, 12}, 'guard': '((else)) & ((else))', 'label': '((else)) & ((else))'}), (9, 10, {'weight': 0, 'input': {8, 9, 10, 11, 12, 13, 14, 15}, 'guard': 'D', 'label': 'D'}), (9, 7, {'weight': 0, 'input': {0, 1, 2, 3, 4, 5, 6, 7}, 'guard': '(else)', 'label': '(else)'})]
		
12/02/2023 11:53:29 AM DEBUG [spec] tree:

12/02/2023 11:53:29 AM DEBUG [spec] No of nodes: 11
12/02/2023 11:53:29 AM DEBUG [spec] No of edges: 24
12/02/2023 11:53:29 AM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
12/02/2023 11:53:29 AM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
12/02/2023 11:53:29 AM INFO Trap states were added.
12/02/2023 11:53:29 AM INFO Constructing product automaton with infinity DFA!
12/02/2023 11:53:29 AM INFO Product automaton size is: (15, 21)
12/02/2023 11:53:29 AM INFO The result of the verification procedure is False!
12/02/2023 11:55:53 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: {'B', 'C', 'D', 'A'}
12/02/2023 11:55:53 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
12/02/2023 11:55:53 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: {'B', 'C', 'D', 'A'}
12/02/2023 11:55:53 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
12/02/2023 11:55:53 AM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: {'B', 'C', 'D', 'A'}
12/02/2023 11:55:53 AM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
12/02/2023 11:55:53 AM INFO No trap states were added.
12/02/2023 11:55:53 AM INFO No trap states were added.
12/02/2023 11:55:53 AM DEBUG state: Eventually 
 init: [(0, 3), (0, 0), (0, 1)]
 final: [(2, 2)]
12/02/2023 11:55:53 AM DEBUG state: Hold 
 init: [(0, 3), (0, 0), (0, 1)]
 final: [(2, 2)]
12/02/2023 11:55:53 AM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
12/02/2023 11:55:53 AM DEBUG state: Hold 
 init: [(1, 0), (0, 0)]
 final: [(2, 2)]
12/02/2023 11:55:53 AM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
12/02/2023 11:55:53 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
12/02/2023 11:55:53 AM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: {'B', 'C', 'D', 'A'}
12/02/2023 11:55:53 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
12/02/2023 11:55:53 AM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
12/02/2023 11:55:53 AM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
12/02/2023 11:55:53 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'B': 1, 'C': 2, 'D': 4, 'A': 8}
Alphabet: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15} 
Initial: dict_keys([0])
Final: {10}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 1, {'weight': 0, 'input': {8, 9, 10, 11, 12, 13, 14, 15}, 'guard': 'A', 'label': 'A'}), (0, 0, {'weight': 0, 'input': {0, 1, 2, 3, 4, 5, 6, 7}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {8, 9, 10, 11, 12, 13, 14, 15}, 'guard': 'A', 'label': 'A'}), (1, 0, {'weight': 0, 'input': {0, 1, 2, 3, 4, 5, 6, 7}, 'guard': '(else)', 'label': '(else)'}), (2, 3, {'weight': 0, 'input': {8, 9, 10, 11, 12, 13, 14, 15}, 'guard': 'A', 'label': 'A'}), (2, 0, {'weight': 0, 'input': {0, 1, 2, 3, 4, 5, 6, 7}, 'guard': '(else)', 'label': '(else)'}), (3, 4, {'weight': 0, 'input': {1, 3, 5, 7, 9, 11, 13, 15}, 'guard': '(B) & ((1))', 'label': '(B) & ((1))'}), (3, 5, {'weight': 0, 'input': {0, 2, 4, 6, 8, 10, 12, 14}, 'guard': '((else)) & ((1))', 'label': '((else)) & ((1))'}), (4, 6, {'weight': 0, 'input': {2, 10, 6, 14}, 'guard': '((else)) & (C)', 'label': '((else)) & (C)'}), (4, 5, {'weight': 0, 'input': {0, 8, 4, 12}, 'guard': '((else)) & ((else))', 'label': '((else)) & ((else))'}), (4, 7, {'weight': 0, 'input': {1, 3, 5, 7, 9, 11, 13, 15}, 'guard': '((B) & (C)) | ((B) & ((else)))', 'label': '((B) & (C)) | ((B) & ((else)))'}), (5, 8, {'weight': 0, 'input': {11, 3, 15, 7}, 'guard': '(B) & (C)', 'label': '(B) & (C)'}), (5, 4, {'weight': 0, 'input': {1, 13, 5, 9}, 'guard': '(B) & ((else))', 'label': '(B) & ((else))'}), (5, 6, {'weight': 0, 'input': {2, 10, 6, 14}, 'guard': '((else)) & (C)', 'label': '((else)) & (C)'}), (5, 5, {'weight': 0, 'input': {0, 8, 4, 12}, 'guard': '((else)) & ((else))', 'label': '((else)) & ((else))'}), (6, 4, {'weight': 0, 'input': {1, 13, 5, 9}, 'guard': '(B) & ((else))', 'label': '(B) & ((else))'}), (6, 5, {'weight': 0, 'input': {0, 8, 4, 12}, 'guard': '((else)) & ((else))', 'label': '((else)) & ((else))'}), (6, 7, {'weight': 0, 'input': {2, 3, 6, 7, 10, 11, 14, 15}, 'guard': '((B) & (C)) | (((else)) & (C))', 'label': '((B) & (C)) | (((else)) & (C))'}), (7, 9, {'weight': 0, 'input': {4, 5, 6, 7, 12, 13, 14, 15}, 'guard': 'D', 'label': 'D'}), (7, 7, {'weight': 0, 'input': {0, 1, 2, 3, 8, 9, 10, 11}, 'guard': '(else)', 'label': '(else)'}), (8, 7, {'weight': 0, 'input': {1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15}, 'guard': '((B) & ((else))) | ((((else)) & (C)) | ((B) & (C)))', 'label': '((B) & ((else))) | ((((else)) & (C)) | ((B) & (C)))'}), (8, 5, {'weight': 0, 'input': {0, 8, 4, 12}, 'guard': '((else)) & ((else))', 'label': '((else)) & ((else))'}), (9, 10, {'weight': 0, 'input': {4, 5, 6, 7, 12, 13, 14, 15}, 'guard': 'D', 'label': 'D'}), (9, 7, {'weight': 0, 'input': {0, 1, 2, 3, 8, 9, 10, 11}, 'guard': '(else)', 'label': '(else)'})]
		
12/02/2023 11:55:53 AM DEBUG [spec] tree:

12/02/2023 11:55:53 AM DEBUG [spec] No of nodes: 11
12/02/2023 11:55:53 AM DEBUG [spec] No of edges: 24
12/02/2023 11:55:53 AM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
12/02/2023 11:55:53 AM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
12/02/2023 11:55:53 AM INFO Trap states were added.
12/02/2023 11:55:53 AM INFO Constructing product automaton with infinity DFA!
12/02/2023 11:55:53 AM INFO Product automaton size is: (15, 21)
12/02/2023 11:55:53 AM INFO The result of the verification procedure is False!
12/02/2023 11:56:20 AM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: {'B'}
12/02/2023 11:56:20 AM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
12/02/2023 11:56:20 AM DEBUG [spec] spec: [H^3 !B]^[1, 4]
12/02/2023 11:56:20 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: {0, 1} 
Initial: dict_keys([5])
Final: {4}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 1, {'weight': 0, 'input': {0}, 'guard': '!B', 'label': '!B'}), (0, 0, {'weight': 0, 'input': {1}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {0}, 'guard': '!B', 'label': '!B'}), (1, 0, {'weight': 0, 'input': {1}, 'guard': '(else)', 'label': '(else)'}), (2, 3, {'weight': 0, 'input': {0}, 'guard': '!B', 'label': '!B'}), (2, 0, {'weight': 0, 'input': {1}, 'guard': '(else)', 'label': '(else)'}), (3, 4, {'weight': 0, 'input': {0}, 'guard': '!B', 'label': '!B'}), (3, 0, {'weight': 0, 'input': {1}, 'guard': '(else)', 'label': '(else)'}), (5, 0, {'weight': 0, 'input': {0, 1}, 'guard': '(1)', 'label': '(1)'})]
		
12/02/2023 11:56:20 AM DEBUG [spec] tree:

12/02/2023 11:56:20 AM DEBUG [spec] No of nodes: 6
12/02/2023 11:56:20 AM DEBUG [spec] No of edges: 9
12/02/2023 11:56:20 AM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
12/02/2023 11:56:20 AM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
12/02/2023 11:56:20 AM INFO Trap states were added.
12/02/2023 11:56:20 AM INFO Constructing product automaton with infinity DFA!
12/02/2023 11:56:20 AM INFO Product automaton size is: (10, 14)
12/02/2023 11:56:20 AM INFO The result of the verification procedure is False!
12/02/2023 11:59:09 AM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: {'A'}
12/02/2023 11:59:09 AM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
12/02/2023 11:59:09 AM DEBUG [spec] spec: [H^1 A]^[1, 2]
12/02/2023 11:59:09 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: {0, 1} 
Initial: dict_keys([3])
Final: {2}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (0, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (1, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (3, 0, {'weight': 0, 'input': {0, 1}, 'guard': '(1)', 'label': '(1)'})]
		
12/02/2023 11:59:09 AM DEBUG [spec] tree:

12/02/2023 11:59:09 AM DEBUG [spec] No of nodes: 4
12/02/2023 11:59:09 AM DEBUG [spec] No of edges: 5
12/02/2023 11:59:09 AM INFO The bound of formula "[H^1 A]^[1, 2]" is (2, 2)!
12/02/2023 11:59:09 AM INFO Translated formula "[H^1 A]^[1, 2]" to infinity DFA of size (4, 5)!
12/02/2023 11:59:09 AM INFO Trap states were added.
12/02/2023 11:59:09 AM INFO Constructing product automaton with infinity DFA!
12/02/2023 11:59:09 AM INFO Product automaton size is: (8, 10)
12/02/2023 11:59:09 AM INFO The result of the verification procedure is True!
12/02/2023 12:06:08 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: {'A'}
12/02/2023 12:06:08 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
12/02/2023 12:06:08 PM DEBUG [spec] spec: [H^1 A]^[1, 2]
12/02/2023 12:06:08 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: {0, 1} 
Initial: dict_keys([3])
Final: {2}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (0, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (1, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (3, 0, {'weight': 0, 'input': {0, 1}, 'guard': '(1)', 'label': '(1)'})]
		
12/02/2023 12:06:08 PM DEBUG [spec] tree:

12/02/2023 12:06:08 PM DEBUG [spec] No of nodes: 4
12/02/2023 12:06:08 PM DEBUG [spec] No of edges: 5
12/02/2023 12:06:08 PM INFO The bound of formula "[H^1 A]^[1, 2]" is (2, 2)!
12/02/2023 12:06:08 PM INFO Translated formula "[H^1 A]^[1, 2]" to infinity DFA of size (4, 5)!
12/02/2023 12:06:08 PM INFO Trap states were added.
12/02/2023 12:06:08 PM INFO Constructing product automaton with infinity DFA!
12/02/2023 12:06:08 PM INFO Product automaton size is: (8, 10)
12/02/2023 12:06:08 PM INFO The result of the verification procedure is True!
12/07/2023 01:44:54 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: {'A'}
12/07/2023 01:44:54 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
12/07/2023 01:44:54 PM DEBUG [spec] spec: [H^1 A]^[1, 2]
12/07/2023 01:44:54 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: {0, 1} 
Initial: dict_keys([3])
Final: {2}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (0, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (1, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (3, 0, {'weight': 0, 'input': {0, 1}, 'guard': '(1)', 'label': '(1)'})]
		
12/07/2023 01:44:54 PM DEBUG [spec] tree:

12/07/2023 01:44:54 PM DEBUG [spec] No of nodes: 4
12/07/2023 01:44:54 PM DEBUG [spec] No of edges: 5
12/07/2023 01:44:54 PM INFO The bound of formula "[H^1 A]^[1, 2]" is (2, 2)!
12/07/2023 01:44:54 PM INFO Translated formula "[H^1 A]^[1, 2]" to infinity DFA of size (4, 5)!
12/07/2023 01:44:54 PM INFO Trap states were added.
12/07/2023 01:44:54 PM INFO Constructing product automaton with infinity DFA!
12/07/2023 01:44:54 PM INFO Product automaton size is: (8, 10)
12/07/2023 01:44:54 PM INFO The result of the verification procedure is True!
02/27/2024 01:44:52 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: {'A'}
02/27/2024 01:44:52 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
02/27/2024 01:44:52 PM DEBUG [spec] spec: [H^1 A]^[1, 2]
02/27/2024 01:44:52 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: {0, 1} 
Initial: dict_keys([3])
Final: {2}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (0, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (1, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (3, 0, {'weight': 0, 'input': {0, 1}, 'guard': '(1)', 'label': '(1)'})]
		
02/27/2024 01:44:52 PM DEBUG [spec] tree:

02/27/2024 01:44:52 PM DEBUG [spec] No of nodes: 4
02/27/2024 01:44:52 PM DEBUG [spec] No of edges: 5
02/27/2024 01:44:52 PM INFO The bound of formula "[H^1 A]^[1, 2]" is (2, 2)!
02/27/2024 01:44:52 PM INFO Translated formula "[H^1 A]^[1, 2]" to infinity DFA of size (4, 5)!
02/27/2024 01:44:52 PM INFO Trap states were added.
02/27/2024 01:44:52 PM INFO Constructing product automaton with infinity DFA!
02/27/2024 01:44:52 PM INFO Product automaton size is: (8, 10)
02/27/2024 01:44:52 PM INFO The result of the verification procedure is True!
03/04/2024 10:55:04 AM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: {'A'}
03/04/2024 10:55:04 AM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
03/04/2024 10:55:04 AM DEBUG [spec] spec: [H^1 A]^[1, 2]
03/04/2024 10:55:04 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: {0, 1} 
Initial: dict_keys([3])
Final: {2}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (0, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (1, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (3, 0, {'weight': 0, 'input': {0, 1}, 'guard': '(1)', 'label': '(1)'})]
		
03/04/2024 10:55:04 AM DEBUG [spec] tree:

03/04/2024 10:55:04 AM DEBUG [spec] No of nodes: 4
03/04/2024 10:55:04 AM DEBUG [spec] No of edges: 5
03/04/2024 10:55:04 AM INFO The bound of formula "[H^1 A]^[1, 2]" is (2, 2)!
03/04/2024 10:55:04 AM INFO Translated formula "[H^1 A]^[1, 2]" to infinity DFA of size (4, 5)!
03/04/2024 10:55:04 AM INFO Trap states were added.
03/04/2024 10:55:04 AM INFO Constructing product automaton with infinity DFA!
03/04/2024 10:55:04 AM INFO Product automaton size is: (8, 10)
03/04/2024 10:55:04 AM INFO The result of the verification procedure is True!
03/04/2024 11:14:27 AM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: {'A'}
03/04/2024 11:14:27 AM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
03/04/2024 11:14:27 AM DEBUG [spec] spec: [H^1 A]^[1, 2]
03/04/2024 11:14:27 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: {0, 1} 
Initial: dict_keys([3])
Final: {2}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (0, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (1, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (3, 0, {'weight': 0, 'input': {0, 1}, 'guard': '(1)', 'label': '(1)'})]
		
03/04/2024 11:14:27 AM DEBUG [spec] tree:

03/04/2024 11:14:27 AM DEBUG [spec] No of nodes: 4
03/04/2024 11:14:27 AM DEBUG [spec] No of edges: 5
03/04/2024 11:14:27 AM INFO The bound of formula "[H^1 A]^[1, 2]" is (2, 2)!
03/04/2024 11:14:27 AM INFO Translated formula "[H^1 A]^[1, 2]" to infinity DFA of size (4, 5)!
03/04/2024 11:14:27 AM INFO Trap states were added.
03/04/2024 11:14:27 AM INFO Constructing product automaton with infinity DFA!
03/04/2024 11:14:27 AM INFO Product automaton size is: (8, 10)
03/04/2024 11:14:27 AM INFO The result of the verification procedure is True!
03/07/2024 11:28:23 AM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: {'A'}
03/07/2024 11:28:23 AM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
03/07/2024 11:28:23 AM DEBUG [spec] spec: [H^1 A]^[1, 2]
03/07/2024 11:28:23 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: {0, 1} 
Initial: dict_keys([3])
Final: {2}
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 1, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (0, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (1, 2, {'weight': 0, 'input': {1}, 'guard': 'A', 'label': 'A'}), (1, 0, {'weight': 0, 'input': {0}, 'guard': '(else)', 'label': '(else)'}), (3, 0, {'weight': 0, 'input': {0, 1}, 'guard': '(1)', 'label': '(1)'})]
		
03/07/2024 11:28:23 AM DEBUG [spec] tree:

03/07/2024 11:28:23 AM DEBUG [spec] No of nodes: 4
03/07/2024 11:28:23 AM DEBUG [spec] No of edges: 5
03/07/2024 11:28:23 AM INFO The bound of formula "[H^1 A]^[1, 2]" is (2, 2)!
03/07/2024 11:28:23 AM INFO Translated formula "[H^1 A]^[1, 2]" to infinity DFA of size (4, 5)!
03/07/2024 11:28:23 AM INFO Trap states were added.
03/07/2024 11:28:23 AM INFO Constructing product automaton with infinity DFA!
03/07/2024 11:28:23 AM INFO Product automaton size is: (8, 10)
03/07/2024 11:28:23 AM INFO The result of the verification procedure is True!
